//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z9warp_sortv
.global .align 1 .b8 thread_buffer[1];
.global .align 1 .b8 thread_cache[1];
.global .align 8 .b8 sort_idx[8];
.global .align 8 .b8 launch_index[8];
.global .align 4 .u32 step;
.global .align 4 .u32 divide;
.global .align 8 .b8 gaze[8];
.global .align 1 .b8 ray_count[1];
.const .align 8 .b8 offset[72] = {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8sort_idxE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4stepE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6divideE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4gazeE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename8sort_idxE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename4stepE[5] = {117, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6divideE[5] = {117, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename4gazeE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8sort_idxE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4stepE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6divideE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4gazeE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8sort_idxE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4stepE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic6divideE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4gazeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8sort_idxE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4stepE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6divideE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4gazeE[1];

.visible .entry _Z9warp_sortv(

)
{
	.reg .pred 	%p<47>;
	.reg .b32 	%r<524>;
	.reg .b64 	%rd<627>;


	mov.u64 	%rd20, thread_buffer;
	cvta.global.u64 	%rd19, %rd20;
	mov.u32 	%r176, 2;
	mov.u32 	%r177, 12;
	// inline asm
	call (%rd15, %rd16, %rd17, %rd18), _rt_buffer_get_size_64, (%rd19, %r176, %r177);
	// inline asm
	ld.global.u32 	%r1, [step];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB0_35;

	setp.eq.s32	%p2, %r1, 30;
	@%p2 bra 	BB0_67;
	bra.uni 	BB0_2;

BB0_67:
	mov.u64 	%rd407, ray_count;
	cvta.global.u64 	%rd402, %rd407;
	mov.u32 	%r328, 1;
	mov.u32 	%r329, 4;
	mov.u64 	%rd406, 0;
	// inline asm
	call (%rd401), _rt_buffer_get_64, (%rd402, %r328, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	mov.u32 	%r509, 0;
	st.u32 	[%rd401], %r509;
	setp.eq.s64	%p30, %rd16, 0;
	@%p30 bra 	BB0_86;

	and.b64  	%rd13, %rd16, 3;
	setp.eq.s64	%p31, %rd13, 0;
	@%p31 bra 	BB0_74;

	setp.eq.s64	%p32, %rd13, 1;
	mov.u32 	%r507, 0;
	@%p32 bra 	BB0_73;

	setp.eq.s64	%p33, %rd13, 2;
	mov.u32 	%r506, 0;
	@%p33 bra 	BB0_72;

	mov.u64 	%rd420, thread_cache;
	cvta.global.u64 	%rd409, %rd420;
	// inline asm
	call (%rd408), _rt_buffer_get_64, (%rd409, %r176, %r177, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r339, [%rd408+8];
	// inline asm
	call (%rd414), _rt_buffer_get_64, (%rd402, %r328, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r340, [%rd414];
	add.s32 	%r341, %r340, %r339;
	st.u32 	[%rd414], %r341;
	mov.u32 	%r506, %r328;

BB0_72:
	cvt.u64.u32	%rd425, %r506;
	mov.u64 	%rd434, thread_cache;
	cvta.global.u64 	%rd423, %rd434;
	// inline asm
	call (%rd422), _rt_buffer_get_64, (%rd423, %r176, %r177, %rd406, %rd425, %rd406, %rd406);
	// inline asm
	ld.u32 	%r346, [%rd422+8];
	// inline asm
	call (%rd428), _rt_buffer_get_64, (%rd402, %r328, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r347, [%rd428];
	add.s32 	%r348, %r347, %r346;
	st.u32 	[%rd428], %r348;
	add.s32 	%r507, %r506, 1;

BB0_73:
	cvt.u64.u32	%rd439, %r507;
	mov.u64 	%rd448, thread_cache;
	cvta.global.u64 	%rd437, %rd448;
	// inline asm
	call (%rd436), _rt_buffer_get_64, (%rd437, %r176, %r177, %rd406, %rd439, %rd406, %rd406);
	// inline asm
	ld.u32 	%r353, [%rd436+8];
	mov.u32 	%r351, 1;
	// inline asm
	call (%rd442), _rt_buffer_get_64, (%rd402, %r351, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r354, [%rd442];
	add.s32 	%r355, %r354, %r353;
	st.u32 	[%rd442], %r355;
	add.s32 	%r509, %r507, 1;

BB0_74:
	setp.lt.u64	%p34, %rd16, 4;
	@%p34 bra 	BB0_86;

BB0_75:
	cvt.u64.u32	%rd453, %r509;
	mov.u64 	%rd498, thread_cache;
	cvta.global.u64 	%rd451, %rd498;
	// inline asm
	call (%rd450), _rt_buffer_get_64, (%rd451, %r176, %r177, %rd406, %rd453, %rd406, %rd406);
	// inline asm
	ld.u32 	%r372, [%rd450+8];
	mov.u32 	%r370, 1;
	// inline asm
	call (%rd456), _rt_buffer_get_64, (%rd402, %r370, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r373, [%rd456];
	add.s32 	%r374, %r373, %r372;
	st.u32 	[%rd456], %r374;
	add.s32 	%r375, %r509, 1;
	cvt.u64.u32	%rd465, %r375;
	// inline asm
	call (%rd462), _rt_buffer_get_64, (%rd451, %r176, %r177, %rd406, %rd465, %rd406, %rd406);
	// inline asm
	ld.u32 	%r376, [%rd462+8];
	// inline asm
	call (%rd468), _rt_buffer_get_64, (%rd402, %r370, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r377, [%rd468];
	add.s32 	%r378, %r377, %r376;
	st.u32 	[%rd468], %r378;
	add.s32 	%r379, %r509, 2;
	cvt.u64.u32	%rd477, %r379;
	// inline asm
	call (%rd474), _rt_buffer_get_64, (%rd451, %r176, %r177, %rd406, %rd477, %rd406, %rd406);
	// inline asm
	ld.u32 	%r380, [%rd474+8];
	// inline asm
	call (%rd480), _rt_buffer_get_64, (%rd402, %r370, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r381, [%rd480];
	add.s32 	%r382, %r381, %r380;
	st.u32 	[%rd480], %r382;
	add.s32 	%r383, %r509, 3;
	cvt.u64.u32	%rd489, %r383;
	// inline asm
	call (%rd486), _rt_buffer_get_64, (%rd451, %r176, %r177, %rd406, %rd489, %rd406, %rd406);
	// inline asm
	ld.u32 	%r384, [%rd486+8];
	// inline asm
	call (%rd492), _rt_buffer_get_64, (%rd402, %r370, %r329, %rd406, %rd406, %rd406, %rd406);
	// inline asm
	ld.u32 	%r385, [%rd492];
	add.s32 	%r386, %r385, %r384;
	st.u32 	[%rd492], %r386;
	add.s32 	%r509, %r509, 4;
	cvt.s64.s32	%rd500, %r509;
	setp.lt.u64	%p35, %rd500, %rd16;
	@%p35 bra 	BB0_75;
	bra.uni 	BB0_86;

BB0_35:
	setp.eq.s64	%p17, %rd15, 0;
	@%p17 bra 	BB0_86;

	ld.global.u32 	%r486, [launch_index+4];
	add.s64 	%rd10, %rd15, 4294967295;
	cvt.u32.u64	%r497, %rd10;
	cvt.u64.u32	%rd11, %r486;
	and.b64  	%rd12, %rd15, 3;
	setp.eq.s64	%p18, %rd12, 0;
	mov.u32 	%r495, 0;
	@%p18 bra 	BB0_37;

	setp.eq.s64	%p19, %rd12, 1;
	mov.u32 	%r487, 0;
	@%p19 bra 	BB0_39;
	bra.uni 	BB0_40;

BB0_39:
	mov.u32 	%r496, %r487;
	bra.uni 	BB0_49;

BB0_2:
	setp.ne.s32	%p3, %r1, 31;
	@%p3 bra 	BB0_76;

	setp.eq.s64	%p4, %rd16, 0;
	@%p4 bra 	BB0_86;

	ld.global.u32 	%r461, [launch_index];
	add.s64 	%rd6, %rd16, 4294967295;
	cvt.u32.u64	%r472, %rd6;
	cvt.u64.u32	%rd7, %r461;
	and.b64  	%rd8, %rd16, 3;
	setp.eq.s64	%p5, %rd8, 0;
	mov.u32 	%r470, 0;
	@%p5 bra 	BB0_5;

	setp.eq.s64	%p6, %rd8, 1;
	mov.u32 	%r462, 0;
	@%p6 bra 	BB0_7;
	bra.uni 	BB0_8;

BB0_7:
	mov.u32 	%r471, %r462;
	bra.uni 	BB0_17;

BB0_76:
	setp.gt.u32	%p36, %r1, 9;
	@%p36 bra 	BB0_86;

	ld.global.u32 	%r139, [launch_index+4];
	ld.global.u32 	%r140, [divide];
	mul.lo.s32 	%r522, %r140, %r139;
	cvt.u64.u32	%rd510, %r522;
	mov.u64 	%rd512, 0;
	// inline asm
	call (%rd501), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd510, %rd512, %rd512);
	// inline asm
	ld.u32 	%r142, [%rd501+8];
	// inline asm
	call (%rd507), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd510, %rd512, %rd512);
	// inline asm
	ld.global.u32 	%r391, [step];
	and.b32  	%r392, %r391, 2147483647;
	setp.eq.s32	%p37, %r392, 0;
	@%p37 bra 	BB0_78;

	ld.u32 	%r143, [%rd507+8];
	mul.lo.s32 	%r510, %r140, %r139;
	mov.u32 	%r511, 0;
	mov.u32 	%r523, %r522;

BB0_80:
	cvt.u64.u32	%rd523, %r510;
	// inline asm
	call (%rd514), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd523, %rd512, %rd512);
	// inline asm
	ld.u32 	%r398, [%rd514+8];
	setp.lt.u32	%p38, %r142, %r398;
	selp.b32	%r522, %r510, %r522, %p38;
	// inline asm
	call (%rd520), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd523, %rd512, %rd512);
	// inline asm
	ld.u32 	%r399, [%rd520+8];
	setp.gt.u32	%p39, %r143, %r399;
	selp.b32	%r523, %r510, %r523, %p39;
	ld.global.u32 	%r400, [step];
	shl.b32 	%r401, %r400, 1;
	add.s32 	%r510, %r510, 1;
	add.s32 	%r511, %r511, 1;
	setp.lt.u32	%p40, %r511, %r401;
	@%p40 bra 	BB0_80;
	bra.uni 	BB0_81;

BB0_37:
	mov.u32 	%r496, %r495;
	bra.uni 	BB0_53;

BB0_40:
	setp.eq.s64	%p20, %rd12, 2;
	mov.u32 	%r481, 0;
	@%p20 bra 	BB0_41;
	bra.uni 	BB0_42;

BB0_41:
	mov.u32 	%r496, %r481;
	bra.uni 	BB0_45;

BB0_5:
	mov.u32 	%r471, %r470;
	bra.uni 	BB0_21;

BB0_8:
	setp.eq.s64	%p7, %rd8, 2;
	mov.u32 	%r456, 0;
	@%p7 bra 	BB0_9;
	bra.uni 	BB0_10;

BB0_9:
	mov.u32 	%r471, %r456;
	bra.uni 	BB0_13;

BB0_42:
	mov.u64 	%rd216, 0;
	// inline asm
	call (%rd211), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd216, %rd11, %rd216, %rd216);
	// inline asm
	ld.u32 	%r70, [%rd211+4];
	ld.u32 	%r69, [%rd211];
	ld.u32 	%r71, [%rd211+8];
	setp.eq.s32	%p21, %r71, 0;
	@%p21 bra 	BB0_44;

	mov.u64 	%rd230, thread_cache;
	cvta.global.u64 	%rd219, %rd230;
	// inline asm
	call (%rd218), _rt_buffer_get_64, (%rd219, %r176, %r177, %rd216, %rd11, %rd216, %rd216);
	// inline asm
	st.u32 	[%rd218+8], %r71;
	st.u32 	[%rd218+4], %r70;
	st.u32 	[%rd218], %r69;
	ld.global.u32 	%rd227, [launch_index+4];
	// inline asm
	call (%rd224), _rt_buffer_get_64, (%rd219, %r176, %r177, %rd216, %rd227, %rd216, %rd216);
	// inline asm
	mov.u32 	%r481, 1;
	st.u32 	[%rd224+8], %r481;
	mov.u32 	%r496, %r481;
	bra.uni 	BB0_45;

BB0_78:
	mov.u32 	%r523, %r522;

BB0_81:
	cvt.u64.u32	%rd530, %r522;
	// inline asm
	call (%rd527), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd530, %rd512, %rd512);
	// inline asm
	ld.u32 	%r517, [%rd527+8];
	cvt.u64.u32	%rd536, %r523;
	// inline asm
	call (%rd533), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd536, %rd512, %rd512);
	// inline asm
	ld.u32 	%r516, [%rd533+8];
	sub.s32 	%r406, %r517, %r516;
	setp.lt.s32	%p41, %r406, 2;
	@%p41 bra 	BB0_86;

	mul.lo.s32 	%r157, %r140, %r139;

BB0_83:
	add.s32 	%r428, %r516, 1;
	cvt.u64.u32	%rd572, %r428;
	cvt.u64.u32	%rd597, %r523;
	// inline asm
	call (%rd540), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd572, %rd597, %rd512, %rd512);
	// inline asm
	st.u32 	[%rd540+8], %r176;
	add.s32 	%r429, %r517, -1;
	cvt.u64.u32	%rd560, %r429;
	cvt.u64.u32	%rd591, %r522;
	// inline asm
	call (%rd546), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd560, %rd591, %rd512, %rd512);
	// inline asm
	mov.u32 	%r430, 3;
	st.u32 	[%rd546+8], %r430;
	// inline asm
	call (%rd552), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd560, %rd591, %rd512, %rd512);
	// inline asm
	ld.u32 	%r431, [%rd552];
	ld.u32 	%r432, [%rd552+4];
	ld.u32 	%r433, [%rd552+8];
	// inline asm
	call (%rd558), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd560, %rd591, %rd512, %rd512);
	// inline asm
	// inline asm
	call (%rd564), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd572, %rd597, %rd512, %rd512);
	// inline asm
	ld.u32 	%r434, [%rd564];
	ld.u32 	%r435, [%rd564+4];
	ld.u32 	%r436, [%rd564+8];
	st.u32 	[%rd558+8], %r436;
	st.u32 	[%rd558+4], %r435;
	st.u32 	[%rd558], %r434;
	// inline asm
	call (%rd570), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd572, %rd597, %rd512, %rd512);
	// inline asm
	st.u32 	[%rd570+8], %r433;
	st.u32 	[%rd570+4], %r432;
	st.u32 	[%rd570], %r431;
	// inline asm
	call (%rd576), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd591, %rd512, %rd512);
	// inline asm
	ld.u32 	%r437, [%rd576+8];
	add.s32 	%r438, %r437, -1;
	st.u32 	[%rd576+8], %r438;
	// inline asm
	call (%rd582), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd597, %rd512, %rd512);
	// inline asm
	ld.u32 	%r439, [%rd582+8];
	add.s32 	%r440, %r439, 1;
	st.u32 	[%rd582+8], %r440;
	// inline asm
	call (%rd588), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd591, %rd512, %rd512);
	// inline asm
	ld.u32 	%r162, [%rd588+8];
	// inline asm
	call (%rd594), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd597, %rd512, %rd512);
	// inline asm
	ld.u32 	%r163, [%rd594+8];
	ld.global.u32 	%r441, [step];
	and.b32  	%r442, %r441, 2147483647;
	setp.eq.s32	%p42, %r442, 0;
	mov.u32 	%r521, 0;
	mov.u32 	%r520, %r157;
	@%p42 bra 	BB0_85;

BB0_84:
	cvt.u64.u32	%rd610, %r520;
	// inline asm
	call (%rd601), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd610, %rd512, %rd512);
	// inline asm
	ld.u32 	%r447, [%rd601+8];
	setp.lt.u32	%p43, %r162, %r447;
	selp.b32	%r522, %r520, %r522, %p43;
	// inline asm
	call (%rd607), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd610, %rd512, %rd512);
	// inline asm
	ld.u32 	%r448, [%rd607+8];
	setp.gt.u32	%p44, %r163, %r448;
	selp.b32	%r523, %r520, %r523, %p44;
	ld.global.u32 	%r449, [step];
	shl.b32 	%r450, %r449, 1;
	add.s32 	%r520, %r520, 1;
	add.s32 	%r521, %r521, 1;
	setp.lt.u32	%p45, %r521, %r450;
	@%p45 bra 	BB0_84;

BB0_85:
	cvt.u64.u32	%rd617, %r522;
	// inline asm
	call (%rd614), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd617, %rd512, %rd512);
	// inline asm
	ld.u32 	%r517, [%rd614+8];
	cvt.u64.u32	%rd623, %r523;
	// inline asm
	call (%rd620), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd512, %rd623, %rd512, %rd512);
	// inline asm
	ld.u32 	%r516, [%rd620+8];
	sub.s32 	%r455, %r517, %r516;
	setp.gt.s32	%p46, %r455, 1;
	@%p46 bra 	BB0_83;
	bra.uni 	BB0_86;

BB0_10:
	mov.u64 	%rd27, thread_cache;
	cvta.global.u64 	%rd22, %rd27;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r176, %r177, %rd7, %rd26, %rd26, %rd26);
	// inline asm
	ld.u32 	%r5, [%rd21+4];
	ld.u32 	%r4, [%rd21];
	ld.u32 	%r6, [%rd21+8];
	setp.eq.s32	%p8, %r6, 0;
	@%p8 bra 	BB0_12;

	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd26, %rd26, %rd26);
	// inline asm
	st.u32 	[%rd28+8], %r6;
	st.u32 	[%rd28+4], %r5;
	st.u32 	[%rd28], %r4;
	ld.global.u32 	%rd36, [launch_index];
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd36, %rd26, %rd26, %rd26);
	// inline asm
	mov.u32 	%r456, 1;
	st.u32 	[%rd34+8], %r456;
	mov.u32 	%r471, %r456;
	bra.uni 	BB0_13;

BB0_44:
	and.b64  	%rd233, %rd10, 4294967295;
	mov.u64 	%rd237, thread_cache;
	cvta.global.u64 	%rd232, %rd237;
	// inline asm
	call (%rd231), _rt_buffer_get_64, (%rd232, %r176, %r177, %rd233, %rd11, %rd216, %rd216);
	// inline asm
	mov.u32 	%r496, 0;
	st.u32 	[%rd231+8], %r496;
	st.u32 	[%rd231+4], %r70;
	st.u32 	[%rd231], %r69;
	add.s32 	%r497, %r497, -1;
	mov.u32 	%r481, 1;

BB0_45:
	ld.global.u32 	%rd241, [launch_index+4];
	cvt.u64.u32	%rd240, %r481;
	mov.u64 	%rd243, 0;
	// inline asm
	call (%rd238), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd240, %rd241, %rd243, %rd243);
	// inline asm
	ld.u32 	%r77, [%rd238+4];
	ld.u32 	%r76, [%rd238];
	ld.u32 	%r78, [%rd238+8];
	setp.eq.s32	%p22, %r78, 0;
	@%p22 bra 	BB0_47;

	cvt.u64.u32	%rd247, %r496;
	mov.u64 	%rd257, thread_cache;
	cvta.global.u64 	%rd246, %rd257;
	// inline asm
	call (%rd245), _rt_buffer_get_64, (%rd246, %r176, %r177, %rd247, %rd11, %rd243, %rd243);
	// inline asm
	st.u32 	[%rd245+8], %r78;
	st.u32 	[%rd245+4], %r77;
	st.u32 	[%rd245], %r76;
	ld.global.u32 	%rd254, [launch_index+4];
	// inline asm
	call (%rd251), _rt_buffer_get_64, (%rd246, %r176, %r177, %rd243, %rd254, %rd243, %rd243);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd251+8], %r496;
	bra.uni 	BB0_48;

BB0_47:
	cvt.u64.u32	%rd260, %r497;
	mov.u64 	%rd264, thread_cache;
	cvta.global.u64 	%rd259, %rd264;
	// inline asm
	call (%rd258), _rt_buffer_get_64, (%rd259, %r176, %r177, %rd260, %rd11, %rd243, %rd243);
	// inline asm
	mov.u32 	%r279, 0;
	st.u32 	[%rd258+8], %r279;
	st.u32 	[%rd258+4], %r77;
	st.u32 	[%rd258], %r76;
	add.s32 	%r497, %r497, -1;

BB0_48:
	add.s32 	%r487, %r481, 1;
	ld.global.u32 	%r486, [launch_index+4];

BB0_49:
	cvt.u64.u32	%rd268, %r486;
	cvt.u64.u32	%rd267, %r487;
	mov.u64 	%rd270, 0;
	// inline asm
	call (%rd265), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd267, %rd268, %rd270, %rd270);
	// inline asm
	ld.u32 	%r90, [%rd265+4];
	ld.u32 	%r89, [%rd265];
	ld.u32 	%r91, [%rd265+8];
	setp.eq.s32	%p23, %r91, 0;
	@%p23 bra 	BB0_51;

	cvt.u64.u32	%rd274, %r496;
	mov.u64 	%rd284, thread_cache;
	cvta.global.u64 	%rd273, %rd284;
	// inline asm
	call (%rd272), _rt_buffer_get_64, (%rd273, %r176, %r177, %rd274, %rd11, %rd270, %rd270);
	// inline asm
	st.u32 	[%rd272+8], %r91;
	st.u32 	[%rd272+4], %r90;
	st.u32 	[%rd272], %r89;
	ld.global.u32 	%rd281, [launch_index+4];
	// inline asm
	call (%rd278), _rt_buffer_get_64, (%rd273, %r176, %r177, %rd270, %rd281, %rd270, %rd270);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd278+8], %r496;
	bra.uni 	BB0_52;

BB0_51:
	cvt.u64.u32	%rd287, %r497;
	mov.u64 	%rd291, thread_cache;
	cvta.global.u64 	%rd286, %rd291;
	// inline asm
	call (%rd285), _rt_buffer_get_64, (%rd286, %r176, %r177, %rd287, %rd11, %rd270, %rd270);
	// inline asm
	mov.u32 	%r288, 0;
	st.u32 	[%rd285+8], %r288;
	st.u32 	[%rd285+4], %r90;
	st.u32 	[%rd285], %r89;
	add.s32 	%r497, %r497, -1;

BB0_52:
	add.s32 	%r495, %r487, 1;

BB0_53:
	setp.lt.u64	%p24, %rd15, 4;
	@%p24 bra 	BB0_86;

BB0_54:
	ld.global.u32 	%rd295, [launch_index+4];
	cvt.u64.u32	%rd294, %r495;
	mov.u64 	%rd297, 0;
	// inline asm
	call (%rd292), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd294, %rd295, %rd297, %rd297);
	// inline asm
	ld.u32 	%r104, [%rd292+4];
	ld.u32 	%r103, [%rd292];
	ld.u32 	%r105, [%rd292+8];
	setp.eq.s32	%p25, %r105, 0;
	@%p25 bra 	BB0_56;
	bra.uni 	BB0_55;

BB0_56:
	cvt.u64.u32	%rd314, %r497;
	mov.u64 	%rd318, thread_cache;
	cvta.global.u64 	%rd313, %rd318;
	// inline asm
	call (%rd312), _rt_buffer_get_64, (%rd313, %r176, %r177, %rd314, %rd11, %rd297, %rd297);
	// inline asm
	mov.u32 	%r297, 0;
	st.u32 	[%rd312+8], %r297;
	st.u32 	[%rd312+4], %r104;
	st.u32 	[%rd312], %r103;
	add.s32 	%r497, %r497, -1;
	bra.uni 	BB0_57;

BB0_55:
	cvt.u64.u32	%rd301, %r496;
	mov.u64 	%rd311, thread_cache;
	cvta.global.u64 	%rd300, %rd311;
	// inline asm
	call (%rd299), _rt_buffer_get_64, (%rd300, %r176, %r177, %rd301, %rd11, %rd297, %rd297);
	// inline asm
	st.u32 	[%rd299+8], %r105;
	st.u32 	[%rd299+4], %r104;
	st.u32 	[%rd299], %r103;
	ld.global.u32 	%rd308, [launch_index+4];
	// inline asm
	call (%rd305), _rt_buffer_get_64, (%rd300, %r176, %r177, %rd297, %rd308, %rd297, %rd297);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd305+8], %r496;

BB0_57:
	add.s32 	%r300, %r495, 1;
	cvt.u64.u32	%rd321, %r300;
	ld.global.u32 	%rd322, [launch_index+4];
	// inline asm
	call (%rd319), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd321, %rd322, %rd297, %rd297);
	// inline asm
	ld.u32 	%r111, [%rd319+4];
	ld.u32 	%r110, [%rd319];
	ld.u32 	%r112, [%rd319+8];
	setp.eq.s32	%p26, %r112, 0;
	@%p26 bra 	BB0_59;
	bra.uni 	BB0_58;

BB0_59:
	cvt.u64.u32	%rd341, %r497;
	mov.u64 	%rd345, thread_cache;
	cvta.global.u64 	%rd340, %rd345;
	// inline asm
	call (%rd339), _rt_buffer_get_64, (%rd340, %r176, %r177, %rd341, %rd11, %rd297, %rd297);
	// inline asm
	mov.u32 	%r307, 0;
	st.u32 	[%rd339+8], %r307;
	st.u32 	[%rd339+4], %r111;
	st.u32 	[%rd339], %r110;
	add.s32 	%r497, %r497, -1;
	bra.uni 	BB0_60;

BB0_58:
	cvt.u64.u32	%rd328, %r496;
	mov.u64 	%rd338, thread_cache;
	cvta.global.u64 	%rd327, %rd338;
	// inline asm
	call (%rd326), _rt_buffer_get_64, (%rd327, %r176, %r177, %rd328, %rd11, %rd297, %rd297);
	// inline asm
	st.u32 	[%rd326+8], %r112;
	st.u32 	[%rd326+4], %r111;
	st.u32 	[%rd326], %r110;
	ld.global.u32 	%rd335, [launch_index+4];
	// inline asm
	call (%rd332), _rt_buffer_get_64, (%rd327, %r176, %r177, %rd297, %rd335, %rd297, %rd297);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd332+8], %r496;

BB0_60:
	add.s32 	%r310, %r495, 2;
	cvt.u64.u32	%rd348, %r310;
	ld.global.u32 	%rd349, [launch_index+4];
	// inline asm
	call (%rd346), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd348, %rd349, %rd297, %rd297);
	// inline asm
	ld.u32 	%r118, [%rd346+4];
	ld.u32 	%r117, [%rd346];
	ld.u32 	%r119, [%rd346+8];
	setp.eq.s32	%p27, %r119, 0;
	@%p27 bra 	BB0_62;
	bra.uni 	BB0_61;

BB0_62:
	cvt.u64.u32	%rd368, %r497;
	mov.u64 	%rd372, thread_cache;
	cvta.global.u64 	%rd367, %rd372;
	// inline asm
	call (%rd366), _rt_buffer_get_64, (%rd367, %r176, %r177, %rd368, %rd11, %rd297, %rd297);
	// inline asm
	mov.u32 	%r317, 0;
	st.u32 	[%rd366+8], %r317;
	st.u32 	[%rd366+4], %r118;
	st.u32 	[%rd366], %r117;
	add.s32 	%r497, %r497, -1;
	bra.uni 	BB0_63;

BB0_61:
	cvt.u64.u32	%rd355, %r496;
	mov.u64 	%rd365, thread_cache;
	cvta.global.u64 	%rd354, %rd365;
	// inline asm
	call (%rd353), _rt_buffer_get_64, (%rd354, %r176, %r177, %rd355, %rd11, %rd297, %rd297);
	// inline asm
	st.u32 	[%rd353+8], %r119;
	st.u32 	[%rd353+4], %r118;
	st.u32 	[%rd353], %r117;
	ld.global.u32 	%rd362, [launch_index+4];
	// inline asm
	call (%rd359), _rt_buffer_get_64, (%rd354, %r176, %r177, %rd297, %rd362, %rd297, %rd297);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd359+8], %r496;

BB0_63:
	add.s32 	%r320, %r495, 3;
	cvt.u64.u32	%rd375, %r320;
	ld.global.u32 	%rd376, [launch_index+4];
	// inline asm
	call (%rd373), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd375, %rd376, %rd297, %rd297);
	// inline asm
	ld.u32 	%r125, [%rd373+4];
	ld.u32 	%r124, [%rd373];
	ld.u32 	%r126, [%rd373+8];
	setp.eq.s32	%p28, %r126, 0;
	@%p28 bra 	BB0_65;
	bra.uni 	BB0_64;

BB0_65:
	cvt.u64.u32	%rd395, %r497;
	mov.u64 	%rd399, thread_cache;
	cvta.global.u64 	%rd394, %rd399;
	// inline asm
	call (%rd393), _rt_buffer_get_64, (%rd394, %r176, %r177, %rd395, %rd11, %rd297, %rd297);
	// inline asm
	mov.u32 	%r327, 0;
	st.u32 	[%rd393+8], %r327;
	st.u32 	[%rd393+4], %r125;
	st.u32 	[%rd393], %r124;
	add.s32 	%r497, %r497, -1;
	bra.uni 	BB0_66;

BB0_64:
	cvt.u64.u32	%rd382, %r496;
	mov.u64 	%rd392, thread_cache;
	cvta.global.u64 	%rd381, %rd392;
	// inline asm
	call (%rd380), _rt_buffer_get_64, (%rd381, %r176, %r177, %rd382, %rd11, %rd297, %rd297);
	// inline asm
	st.u32 	[%rd380+8], %r126;
	st.u32 	[%rd380+4], %r125;
	st.u32 	[%rd380], %r124;
	ld.global.u32 	%rd389, [launch_index+4];
	// inline asm
	call (%rd386), _rt_buffer_get_64, (%rd381, %r176, %r177, %rd297, %rd389, %rd297, %rd297);
	// inline asm
	add.s32 	%r496, %r496, 1;
	st.u32 	[%rd386+8], %r496;

BB0_66:
	add.s32 	%r495, %r495, 4;
	cvt.s64.s32	%rd400, %r495;
	setp.lt.u64	%p29, %rd400, %rd15;
	@%p29 bra 	BB0_54;
	bra.uni 	BB0_86;

BB0_12:
	and.b64  	%rd44, %rd6, 4294967295;
	// inline asm
	call (%rd41), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd44, %rd26, %rd26);
	// inline asm
	mov.u32 	%r471, 0;
	st.u32 	[%rd41+8], %r471;
	st.u32 	[%rd41+4], %r5;
	st.u32 	[%rd41], %r4;
	add.s32 	%r472, %r472, -1;
	mov.u32 	%r456, 1;

BB0_13:
	ld.global.u32 	%rd50, [launch_index];
	cvt.u64.u32	%rd51, %r456;
	mov.u64 	%rd54, thread_cache;
	cvta.global.u64 	%rd49, %rd54;
	mov.u64 	%rd53, 0;
	// inline asm
	call (%rd48), _rt_buffer_get_64, (%rd49, %r176, %r177, %rd50, %rd51, %rd53, %rd53);
	// inline asm
	ld.u32 	%r12, [%rd48+4];
	ld.u32 	%r11, [%rd48];
	ld.u32 	%r13, [%rd48+8];
	setp.eq.s32	%p9, %r13, 0;
	@%p9 bra 	BB0_15;

	cvt.u64.u32	%rd58, %r471;
	// inline asm
	call (%rd55), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd58, %rd53, %rd53);
	// inline asm
	st.u32 	[%rd55+8], %r13;
	st.u32 	[%rd55+4], %r12;
	st.u32 	[%rd55], %r11;
	ld.global.u32 	%rd63, [launch_index];
	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd63, %rd53, %rd53, %rd53);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd61+8], %r471;
	bra.uni 	BB0_16;

BB0_15:
	cvt.u64.u32	%rd71, %r472;
	// inline asm
	call (%rd68), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd71, %rd53, %rd53);
	// inline asm
	mov.u32 	%r204, 0;
	st.u32 	[%rd68+8], %r204;
	st.u32 	[%rd68+4], %r12;
	st.u32 	[%rd68], %r11;
	add.s32 	%r472, %r472, -1;

BB0_16:
	add.s32 	%r462, %r456, 1;
	ld.global.u32 	%r461, [launch_index];

BB0_17:
	cvt.u64.u32	%rd78, %r462;
	cvt.u64.u32	%rd77, %r461;
	mov.u64 	%rd81, thread_cache;
	cvta.global.u64 	%rd76, %rd81;
	mov.u64 	%rd80, 0;
	// inline asm
	call (%rd75), _rt_buffer_get_64, (%rd76, %r176, %r177, %rd77, %rd78, %rd80, %rd80);
	// inline asm
	ld.u32 	%r25, [%rd75+4];
	ld.u32 	%r24, [%rd75];
	ld.u32 	%r26, [%rd75+8];
	setp.eq.s32	%p10, %r26, 0;
	@%p10 bra 	BB0_19;

	cvt.u64.u32	%rd85, %r471;
	// inline asm
	call (%rd82), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd85, %rd80, %rd80);
	// inline asm
	st.u32 	[%rd82+8], %r26;
	st.u32 	[%rd82+4], %r25;
	st.u32 	[%rd82], %r24;
	ld.global.u32 	%rd90, [launch_index];
	// inline asm
	call (%rd88), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd90, %rd80, %rd80, %rd80);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd88+8], %r471;
	bra.uni 	BB0_20;

BB0_19:
	cvt.u64.u32	%rd98, %r472;
	// inline asm
	call (%rd95), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd98, %rd80, %rd80);
	// inline asm
	mov.u32 	%r213, 0;
	st.u32 	[%rd95+8], %r213;
	st.u32 	[%rd95+4], %r25;
	st.u32 	[%rd95], %r24;
	add.s32 	%r472, %r472, -1;

BB0_20:
	add.s32 	%r470, %r462, 1;

BB0_21:
	setp.lt.u64	%p11, %rd16, 4;
	@%p11 bra 	BB0_86;

BB0_22:
	ld.global.u32 	%rd104, [launch_index];
	cvt.u64.u32	%rd105, %r470;
	mov.u64 	%rd108, thread_cache;
	cvta.global.u64 	%rd103, %rd108;
	mov.u64 	%rd107, 0;
	// inline asm
	call (%rd102), _rt_buffer_get_64, (%rd103, %r176, %r177, %rd104, %rd105, %rd107, %rd107);
	// inline asm
	ld.u32 	%r39, [%rd102+4];
	ld.u32 	%r38, [%rd102];
	ld.u32 	%r40, [%rd102+8];
	setp.eq.s32	%p12, %r40, 0;
	@%p12 bra 	BB0_24;
	bra.uni 	BB0_23;

BB0_24:
	cvt.u64.u32	%rd125, %r472;
	// inline asm
	call (%rd122), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd125, %rd107, %rd107);
	// inline asm
	mov.u32 	%r222, 0;
	st.u32 	[%rd122+8], %r222;
	st.u32 	[%rd122+4], %r39;
	st.u32 	[%rd122], %r38;
	add.s32 	%r472, %r472, -1;
	bra.uni 	BB0_25;

BB0_23:
	cvt.u64.u32	%rd112, %r471;
	// inline asm
	call (%rd109), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd112, %rd107, %rd107);
	// inline asm
	st.u32 	[%rd109+8], %r40;
	st.u32 	[%rd109+4], %r39;
	st.u32 	[%rd109], %r38;
	ld.global.u32 	%rd117, [launch_index];
	// inline asm
	call (%rd115), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd117, %rd107, %rd107, %rd107);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd115+8], %r471;

BB0_25:
	ld.global.u32 	%rd131, [launch_index];
	add.s32 	%r225, %r470, 1;
	cvt.u64.u32	%rd132, %r225;
	// inline asm
	call (%rd129), _rt_buffer_get_64, (%rd103, %r176, %r177, %rd131, %rd132, %rd107, %rd107);
	// inline asm
	ld.u32 	%r46, [%rd129+4];
	ld.u32 	%r45, [%rd129];
	ld.u32 	%r47, [%rd129+8];
	setp.eq.s32	%p13, %r47, 0;
	@%p13 bra 	BB0_27;
	bra.uni 	BB0_26;

BB0_27:
	cvt.u64.u32	%rd152, %r472;
	// inline asm
	call (%rd149), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd152, %rd107, %rd107);
	// inline asm
	mov.u32 	%r232, 0;
	st.u32 	[%rd149+8], %r232;
	st.u32 	[%rd149+4], %r46;
	st.u32 	[%rd149], %r45;
	add.s32 	%r472, %r472, -1;
	bra.uni 	BB0_28;

BB0_26:
	cvt.u64.u32	%rd139, %r471;
	// inline asm
	call (%rd136), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd139, %rd107, %rd107);
	// inline asm
	st.u32 	[%rd136+8], %r47;
	st.u32 	[%rd136+4], %r46;
	st.u32 	[%rd136], %r45;
	ld.global.u32 	%rd144, [launch_index];
	// inline asm
	call (%rd142), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd144, %rd107, %rd107, %rd107);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd142+8], %r471;

BB0_28:
	ld.global.u32 	%rd158, [launch_index];
	add.s32 	%r235, %r470, 2;
	cvt.u64.u32	%rd159, %r235;
	// inline asm
	call (%rd156), _rt_buffer_get_64, (%rd103, %r176, %r177, %rd158, %rd159, %rd107, %rd107);
	// inline asm
	ld.u32 	%r53, [%rd156+4];
	ld.u32 	%r52, [%rd156];
	ld.u32 	%r54, [%rd156+8];
	setp.eq.s32	%p14, %r54, 0;
	@%p14 bra 	BB0_30;
	bra.uni 	BB0_29;

BB0_30:
	cvt.u64.u32	%rd179, %r472;
	// inline asm
	call (%rd176), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd179, %rd107, %rd107);
	// inline asm
	mov.u32 	%r242, 0;
	st.u32 	[%rd176+8], %r242;
	st.u32 	[%rd176+4], %r53;
	st.u32 	[%rd176], %r52;
	add.s32 	%r472, %r472, -1;
	bra.uni 	BB0_31;

BB0_29:
	cvt.u64.u32	%rd166, %r471;
	// inline asm
	call (%rd163), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd166, %rd107, %rd107);
	// inline asm
	st.u32 	[%rd163+8], %r54;
	st.u32 	[%rd163+4], %r53;
	st.u32 	[%rd163], %r52;
	ld.global.u32 	%rd171, [launch_index];
	// inline asm
	call (%rd169), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd171, %rd107, %rd107, %rd107);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd169+8], %r471;

BB0_31:
	ld.global.u32 	%rd185, [launch_index];
	add.s32 	%r245, %r470, 3;
	cvt.u64.u32	%rd186, %r245;
	// inline asm
	call (%rd183), _rt_buffer_get_64, (%rd103, %r176, %r177, %rd185, %rd186, %rd107, %rd107);
	// inline asm
	ld.u32 	%r60, [%rd183+4];
	ld.u32 	%r59, [%rd183];
	ld.u32 	%r61, [%rd183+8];
	setp.eq.s32	%p15, %r61, 0;
	@%p15 bra 	BB0_33;
	bra.uni 	BB0_32;

BB0_33:
	cvt.u64.u32	%rd206, %r472;
	// inline asm
	call (%rd203), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd206, %rd107, %rd107);
	// inline asm
	mov.u32 	%r252, 0;
	st.u32 	[%rd203+8], %r252;
	st.u32 	[%rd203+4], %r60;
	st.u32 	[%rd203], %r59;
	add.s32 	%r472, %r472, -1;
	bra.uni 	BB0_34;

BB0_32:
	cvt.u64.u32	%rd193, %r471;
	// inline asm
	call (%rd190), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd7, %rd193, %rd107, %rd107);
	// inline asm
	st.u32 	[%rd190+8], %r61;
	st.u32 	[%rd190+4], %r60;
	st.u32 	[%rd190], %r59;
	ld.global.u32 	%rd198, [launch_index];
	// inline asm
	call (%rd196), _rt_buffer_get_64, (%rd19, %r176, %r177, %rd198, %rd107, %rd107, %rd107);
	// inline asm
	add.s32 	%r471, %r471, 1;
	st.u32 	[%rd196+8], %r471;

BB0_34:
	add.s32 	%r470, %r470, 4;
	cvt.s64.s32	%rd210, %r470;
	setp.lt.u64	%p16, %rd210, %rd16;
	@%p16 bra 	BB0_22;

BB0_86:
	ret;
}


