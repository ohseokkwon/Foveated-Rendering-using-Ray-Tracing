//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z13sampling_stepv
.const .align 4 .b8 gaussian_weight[36] = {0, 0, 128, 61, 0, 0, 0, 62, 0, 0, 128, 61, 0, 0, 0, 62, 0, 0, 128, 62, 0, 0, 0, 62, 0, 0, 128, 61, 0, 0, 0, 62, 0, 0, 128, 61};
.const .align 4 .b8 gradient_weight[36] = {0, 0, 0, 190, 0, 0, 0, 190, 0, 0, 0, 190, 0, 0, 0, 190, 0, 0, 128, 63, 0, 0, 0, 190, 0, 0, 0, 190, 0, 0, 0, 190, 0, 0, 0, 190};
.const .align 8 .b8 offset[72] = {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.const .align 4 .b8 gx[36] = {0, 0, 128, 191, 0, 0, 0, 128, 0, 0, 128, 63, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 128, 191, 0, 0, 0, 128, 0, 0, 128, 63};
.const .align 4 .b8 gy[36] = {0, 0, 128, 191, 0, 0, 0, 192, 0, 0, 128, 191, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 64, 0, 0, 128, 63};
.const .align 1 .b8 mask_25[16] = {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1};
.const .align 1 .b8 mask_50[16] = {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1};
.const .align 1 .b8 mask_75[16] = {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 4 .b8 prev_eye[12];
.global .align 4 .b8 eye[12];
.global .align 4 .f32 eye_variance;
.global .align 4 .b8 mvp[64];
.global .align 4 .b8 prev_mvp[64];
.global .align 8 .b8 gaze[8];
.global .align 4 .f32 g_apectureSize;
.global .align 4 .f32 scene_epsilon;
.global .align 4 .b8 bbox_min[12];
.global .align 4 .b8 bbox_max[12];
.global .align 4 .u32 max_depth;
.global .align 1 .b8 position_buffer[1];
.global .align 1 .b8 depth_buffer[1];
.global .align 1 .b8 depth_cache[1];
.global .align 1 .b8 weight_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 diffuse_buffer[1];
.global .align 1 .b8 thread_buffer[1];
.global .align 1 .b8 thread_cache[1];
.global .align 1 .b8 extra_buffer[1];
.global .align 1 .b8 gaze_target[1];
.global .texref sampling_map;
.global .align 4 .u32 frame;
.global .align 8 .b8 launch_index[8];
.global .align 4 .b8 _ZN21rti_internal_typeinfo8prev_eyeE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3eyeE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12eye_varianceE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3mvpE[8] = {82, 97, 121, 0, 64, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8prev_mvpE[8] = {82, 97, 121, 0, 64, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4gazeE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14g_apectureSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13scene_epsilonE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8bbox_minE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8bbox_maxE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9max_depthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5frameE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename8prev_eyeE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename3eyeE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12eye_varianceE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename3mvpE[10] = {77, 97, 116, 114, 105, 120, 52, 120, 52, 0};
.global .align 16 .b8 _ZN21rti_internal_typename8prev_mvpE[10] = {77, 97, 116, 114, 105, 120, 52, 120, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename4gazeE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14g_apectureSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename13scene_epsilonE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8bbox_minE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8bbox_maxE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename9max_depthE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename5frameE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8prev_eyeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3eyeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12eye_varianceE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3mvpE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8prev_mvpE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4gazeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14g_apectureSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13scene_epsilonE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8bbox_minE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8bbox_maxE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9max_depthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5frameE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8prev_eyeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3eyeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12eye_varianceE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3mvpE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8prev_mvpE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4gazeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14g_apectureSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13scene_epsilonE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8bbox_minE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8bbox_maxE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9max_depthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5frameE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8prev_eyeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3eyeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12eye_varianceE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3mvpE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8prev_mvpE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4gazeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14g_apectureSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13scene_epsilonE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8bbox_minE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8bbox_maxE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9max_depthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5frameE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];

.visible .entry _Z13sampling_stepv(

)
{
	.reg .pred 	%p<76>;
	.reg .b16 	%rs<16>;
	.reg .f32 	%f<743>;
	.reg .b32 	%r<263>;
	.reg .b64 	%rd<406>;


	mov.u64 	%rd34, thread_buffer;
	cvta.global.u64 	%rd9, %rd34;
	mov.u32 	%r37, 2;
	mov.u32 	%r32, 12;
	// inline asm
	call (%rd5, %rd6, %rd7, %rd8), _rt_buffer_get_size_64, (%rd9, %r37, %r32);
	// inline asm
	cvt.rn.f32.u64	%f1, %rd5;
	cvt.rn.f32.u64	%f2, %rd6;
	ld.global.v2.u32 	{%r39, %r40}, [launch_index];
	cvt.u64.u32	%rd12, %r39;
	cvt.u64.u32	%rd13, %r40;
	mov.u64 	%rd35, thread_cache;
	cvta.global.u64 	%rd11, %rd35;
	mov.u64 	%rd33, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r37, %r32, %rd12, %rd13, %rd33, %rd33);
	// inline asm
	mov.u32 	%r43, 0;
	st.u32 	[%rd10+8], %r43;
	st.u32 	[%rd10+4], %r43;
	st.u32 	[%rd10], %r43;
	ld.global.v2.u32 	{%r44, %r45}, [launch_index];
	cvt.u64.u32	%rd18, %r44;
	cvt.u64.u32	%rd19, %r45;
	mov.u64 	%rd36, position_buffer;
	cvta.global.u64 	%rd17, %rd36;
	mov.u32 	%r38, 16;
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r37, %r38, %rd18, %rd19, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f106, %f107, %f108, %f109}, [%rd16];
	ld.global.v2.u32 	{%r48, %r49}, [launch_index];
	cvt.u64.u32	%rd24, %r48;
	cvt.u64.u32	%rd25, %r49;
	mov.u64 	%rd37, depth_buffer;
	cvta.global.u64 	%rd23, %rd37;
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r37, %r38, %rd24, %rd25, %rd33, %rd33);
	// inline asm
	ld.global.v2.u32 	{%r52, %r53}, [launch_index];
	cvt.u64.u32	%rd30, %r52;
	cvt.u64.u32	%rd31, %r53;
	mov.u64 	%rd38, weight_buffer;
	cvta.global.u64 	%rd29, %rd38;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r37, %r38, %rd30, %rd31, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f110, %f111, %f112, %f113}, [%rd28];
	setp.leu.f32	%p10, %f110, 0fBF800000;
	setp.leu.f32	%p11, %f111, 0fBF800000;
	or.pred  	%p12, %p11, %p10;
	setp.ltu.f32	%p13, %f110, 0f00000000;
	or.pred  	%p14, %p12, %p13;
	add.f32 	%f114, %f1, 0fBF000000;
	setp.geu.f32	%p15, %f110, %f114;
	or.pred  	%p16, %p14, %p15;
	setp.ltu.f32	%p17, %f111, 0f00000000;
	or.pred  	%p18, %p16, %p17;
	add.f32 	%f115, %f2, 0fBF000000;
	setp.geu.f32	%p19, %f111, %f115;
	mov.f32 	%f707, 0f00000000;
	or.pred  	%p20, %p19, %p18;
	mov.f32 	%f705, %f707;
	@%p20 bra 	BB0_6;

	mov.b32 	 %r56, %f110;
	and.b32  	%r57, %r56, -2147483648;
	or.b32  	%r58, %r57, 1056964608;
	mov.b32 	 %f116, %r58;
	add.f32 	%f117, %f110, %f116;
	cvt.rzi.f32.f32	%f118, %f117;
	abs.f32 	%f119, %f110;
	setp.gt.f32	%p21, %f119, 0f4B000000;
	selp.f32	%f703, %f110, %f118, %p21;
	setp.geu.f32	%p22, %f119, 0f3F000000;
	@%p22 bra 	BB0_3;

	cvt.rzi.f32.f32	%f703, %f110;

BB0_3:
	cvt.rzi.u32.f32	%r1, %f703;
	mov.b32 	 %r59, %f111;
	and.b32  	%r60, %r59, -2147483648;
	or.b32  	%r61, %r60, 1056964608;
	mov.b32 	 %f120, %r61;
	add.f32 	%f121, %f111, %f120;
	cvt.rzi.f32.f32	%f122, %f121;
	abs.f32 	%f123, %f111;
	setp.gt.f32	%p23, %f123, 0f4B000000;
	selp.f32	%f704, %f111, %f122, %p23;
	setp.geu.f32	%p24, %f123, 0f3F000000;
	@%p24 bra 	BB0_5;

	cvt.rzi.f32.f32	%f704, %f111;

BB0_5:
	cvt.rzi.u32.f32	%r64, %f704;
	cvt.u64.u32	%rd42, %r64;
	cvt.u64.u32	%rd41, %r1;
	mov.u64 	%rd45, depth_cache;
	cvta.global.u64 	%rd40, %rd45;
	// inline asm
	call (%rd39), _rt_buffer_get_64, (%rd40, %r37, %r38, %rd41, %rd42, %rd33, %rd33);
	// inline asm
	ld.global.f32 	%f124, [prev_eye];
	sub.f32 	%f125, %f106, %f124;
	ld.global.f32 	%f126, [prev_eye+4];
	sub.f32 	%f127, %f107, %f126;
	ld.global.f32 	%f128, [prev_eye+8];
	sub.f32 	%f129, %f108, %f128;
	mul.f32 	%f130, %f127, %f127;
	fma.rn.f32 	%f131, %f125, %f125, %f130;
	fma.rn.f32 	%f132, %f129, %f129, %f131;
	sqrt.rn.f32 	%f133, %f132;
	ld.f32 	%f134, [%rd39];
	sub.f32 	%f135, %f134, %f133;
	abs.f32 	%f136, %f135;
	ld.global.f32 	%f137, [scene_epsilon];
	setp.lt.f32	%p25, %f136, %f137;
	selp.f32	%f705, 0f3F800000, 0f00000000, %p25;

BB0_6:
	ld.global.v2.u32 	{%r71, %r72}, [launch_index];
	cvt.rn.f32.u32	%f139, %r71;
	cvt.rn.f32.u32	%f140, %r72;
	ld.global.v2.f32 	{%f141, %f142}, [gaze];
	sub.f32 	%f144, %f139, %f141;
	sub.f32 	%f146, %f140, %f142;
	mul.f32 	%f147, %f146, %f146;
	fma.rn.f32 	%f148, %f144, %f144, %f147;
	sqrt.rn.f32 	%f149, %f148;
	mul.f32 	%f150, %f2, %f2;
	fma.rn.f32 	%f151, %f1, %f1, %f150;
	sqrt.rn.f32 	%f152, %f151;
	div.rn.f32 	%f21, %f149, %f152;
	mov.u64 	%rd64, gaze_target;
	cvta.global.u64 	%rd47, %rd64;
	mov.u32 	%r65, 1;
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd47, %r65, %r32, %rd33, %rd33, %rd33, %rd33);
	// inline asm
	ld.global.v2.f32 	{%f153, %f154}, [gaze];
	cvt.rzi.u32.f32	%r75, %f153;
	cvt.rzi.u32.f32	%r76, %f154;
	cvt.u64.u32	%rd54, %r75;
	cvt.u64.u32	%rd55, %r76;
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd17, %r37, %r38, %rd54, %rd55, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f157, %f158, %f159, %f160}, [%rd52];
	st.f32 	[%rd46+8], %f159;
	st.f32 	[%rd46+4], %f158;
	st.f32 	[%rd46], %f157;
	ld.global.v2.u32 	{%r77, %r78}, [launch_index];
	and.b32  	%r2, %r77, -4;
	and.b32  	%r3, %r78, -4;
	cvt.u64.u32	%rd60, %r2;
	cvt.u64.u32	%rd61, %r3;
	mov.u64 	%rd66, diffuse_buffer;
	cvta.global.u64 	%rd59, %rd66;
	// inline asm
	call (%rd58), _rt_buffer_get_64, (%rd59, %r37, %r38, %rd60, %rd61, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f164, %f165, %f166, %f167}, [%rd58];
	add.f32 	%f171, %f165, %f166;
	mul.f32 	%f172, %f171, 0f3F000000;
	sub.f32 	%f173, %f164, %f172;
	add.f32 	%f174, %f164, %f166;
	mul.f32 	%f175, %f174, 0f3F000000;
	sub.f32 	%f176, %f165, %f175;
	add.f32 	%f177, %f164, %f165;
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f166, %f178;
	sub.f32 	%f180, %f164, %f165;
	abs.f32 	%f181, %f180;
	mul.f32 	%f182, %f181, 0f3F000000;
	sub.f32 	%f183, %f178, %f182;
	sub.f32 	%f184, %f183, %f166;
	add.f32 	%f22, %f166, %f177;
	sub.f32 	%f23, %f173, %f176;
	sub.f32 	%f24, %f179, %f184;
	ld.const.v2.u32 	{%r81, %r82}, [offset];
	shl.b32 	%r84, %r81, 2;
	shl.b32 	%r86, %r82, 2;
	add.s32 	%r4, %r84, %r2;
	add.s32 	%r5, %r86, %r3;
	cvt.rn.f32.u32	%f185, %r4;
	setp.ge.f32	%p26, %f185, %f1;
	cvt.rn.f32.u32	%f186, %r5;
	setp.ge.f32	%p27, %f186, %f2;
	or.pred  	%p1, %p26, %p27;
	@%p1 bra 	BB0_8;

	mov.u64 	%rd403, diffuse_buffer;
	cvta.global.u64 	%rd402, %rd403;
	cvt.u64.u32	%rd69, %r4;
	cvt.u64.u32	%rd70, %r5;
	// inline asm
	call (%rd67), _rt_buffer_get_64, (%rd402, %r37, %r38, %rd69, %rd70, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f187, %f188, %f189, %f190}, [%rd67];
	add.f32 	%f194, %f187, %f188;
	add.f32 	%f195, %f189, %f194;
	div.rn.f32 	%f196, %f195, 0f40400000;
	ld.const.f32 	%f197, [gx];
	fma.rn.f32 	%f707, %f196, %f197, 0f00000000;

BB0_8:
	and.b32  	%r259, %r78, -4;
	and.b32  	%r258, %r77, -4;
	ld.const.v2.u32 	{%r89, %r90}, [offset+8];
	shl.b32 	%r92, %r89, 2;
	shl.b32 	%r94, %r90, 2;
	add.s32 	%r6, %r92, %r258;
	add.s32 	%r7, %r94, %r259;
	cvt.rn.f32.u32	%f198, %r6;
	setp.ge.f32	%p28, %f198, %f1;
	cvt.rn.f32.u32	%f199, %r7;
	setp.ge.f32	%p29, %f199, %f2;
	or.pred  	%p2, %p28, %p29;
	@%p2 bra 	BB0_10;

	mov.u64 	%rd405, diffuse_buffer;
	cvta.global.u64 	%rd404, %rd405;
	cvt.u64.u32	%rd76, %r6;
	cvt.u64.u32	%rd77, %r7;
	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd404, %r37, %r38, %rd76, %rd77, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f200, %f201, %f202, %f203}, [%rd74];
	add.f32 	%f207, %f200, %f201;
	add.f32 	%f208, %f202, %f207;
	div.rn.f32 	%f209, %f208, 0f40400000;
	ld.const.f32 	%f210, [gx+4];
	fma.rn.f32 	%f707, %f209, %f210, %f707;

BB0_10:
	and.b32  	%r261, %r78, -4;
	and.b32  	%r260, %r77, -4;
	ld.const.v2.u32 	{%r97, %r98}, [offset+16];
	shl.b32 	%r100, %r97, 2;
	shl.b32 	%r102, %r98, 2;
	add.s32 	%r8, %r100, %r260;
	add.s32 	%r9, %r102, %r261;
	cvt.rn.f32.u32	%f211, %r8;
	setp.ge.f32	%p30, %f211, %f1;
	cvt.rn.f32.u32	%f212, %r9;
	setp.ge.f32	%p31, %f212, %f2;
	or.pred  	%p3, %p30, %p31;
	@%p3 bra 	BB0_12;

	mov.u64 	%rd395, diffuse_buffer;
	cvta.global.u64 	%rd394, %rd395;
	cvt.u64.u32	%rd83, %r8;
	cvt.u64.u32	%rd84, %r9;
	// inline asm
	call (%rd81), _rt_buffer_get_64, (%rd394, %r37, %r38, %rd83, %rd84, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f213, %f214, %f215, %f216}, [%rd81];
	add.f32 	%f220, %f213, %f214;
	add.f32 	%f221, %f215, %f220;
	div.rn.f32 	%f222, %f221, 0f40400000;
	ld.const.f32 	%f223, [gx+8];
	fma.rn.f32 	%f707, %f222, %f223, %f707;

BB0_12:
	and.b32  	%r249, %r78, -4;
	and.b32  	%r248, %r77, -4;
	ld.const.v2.u32 	{%r105, %r106}, [offset+24];
	shl.b32 	%r108, %r105, 2;
	shl.b32 	%r110, %r106, 2;
	add.s32 	%r10, %r108, %r248;
	add.s32 	%r11, %r110, %r249;
	cvt.rn.f32.u32	%f224, %r10;
	setp.ge.f32	%p32, %f224, %f1;
	cvt.rn.f32.u32	%f225, %r11;
	setp.ge.f32	%p33, %f225, %f2;
	or.pred  	%p4, %p32, %p33;
	@%p4 bra 	BB0_14;

	mov.u64 	%rd397, diffuse_buffer;
	cvta.global.u64 	%rd396, %rd397;
	cvt.u64.u32	%rd90, %r10;
	cvt.u64.u32	%rd91, %r11;
	// inline asm
	call (%rd88), _rt_buffer_get_64, (%rd396, %r37, %r38, %rd90, %rd91, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f226, %f227, %f228, %f229}, [%rd88];
	add.f32 	%f233, %f226, %f227;
	add.f32 	%f234, %f228, %f233;
	div.rn.f32 	%f235, %f234, 0f40400000;
	ld.const.f32 	%f236, [gx+12];
	fma.rn.f32 	%f707, %f235, %f236, %f707;

BB0_14:
	and.b32  	%r251, %r78, -4;
	and.b32  	%r250, %r77, -4;
	ld.const.v2.u32 	{%r113, %r114}, [offset+32];
	shl.b32 	%r116, %r113, 2;
	shl.b32 	%r118, %r114, 2;
	add.s32 	%r12, %r116, %r250;
	add.s32 	%r13, %r118, %r251;
	cvt.rn.f32.u32	%f237, %r12;
	setp.ge.f32	%p34, %f237, %f1;
	cvt.rn.f32.u32	%f238, %r13;
	setp.ge.f32	%p35, %f238, %f2;
	or.pred  	%p5, %p34, %p35;
	@%p5 bra 	BB0_16;

	mov.u64 	%rd399, diffuse_buffer;
	cvta.global.u64 	%rd398, %rd399;
	cvt.u64.u32	%rd97, %r12;
	cvt.u64.u32	%rd98, %r13;
	// inline asm
	call (%rd95), _rt_buffer_get_64, (%rd398, %r37, %r38, %rd97, %rd98, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f239, %f240, %f241, %f242}, [%rd95];
	add.f32 	%f246, %f239, %f240;
	add.f32 	%f247, %f241, %f246;
	div.rn.f32 	%f248, %f247, 0f40400000;
	ld.const.f32 	%f249, [gx+16];
	fma.rn.f32 	%f707, %f248, %f249, %f707;

BB0_16:
	and.b32  	%r253, %r78, -4;
	and.b32  	%r252, %r77, -4;
	ld.const.v2.u32 	{%r121, %r122}, [offset+40];
	shl.b32 	%r124, %r121, 2;
	shl.b32 	%r126, %r122, 2;
	add.s32 	%r14, %r124, %r252;
	add.s32 	%r15, %r126, %r253;
	cvt.rn.f32.u32	%f250, %r14;
	setp.ge.f32	%p36, %f250, %f1;
	cvt.rn.f32.u32	%f251, %r15;
	setp.ge.f32	%p37, %f251, %f2;
	or.pred  	%p6, %p36, %p37;
	@%p6 bra 	BB0_18;

	mov.u64 	%rd401, diffuse_buffer;
	cvta.global.u64 	%rd400, %rd401;
	cvt.u64.u32	%rd104, %r14;
	cvt.u64.u32	%rd105, %r15;
	// inline asm
	call (%rd102), _rt_buffer_get_64, (%rd400, %r37, %r38, %rd104, %rd105, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f252, %f253, %f254, %f255}, [%rd102];
	add.f32 	%f259, %f252, %f253;
	add.f32 	%f260, %f254, %f259;
	div.rn.f32 	%f261, %f260, 0f40400000;
	ld.const.f32 	%f262, [gx+20];
	fma.rn.f32 	%f707, %f261, %f262, %f707;

BB0_18:
	and.b32  	%r255, %r78, -4;
	and.b32  	%r254, %r77, -4;
	ld.const.v2.u32 	{%r129, %r130}, [offset+48];
	shl.b32 	%r132, %r129, 2;
	shl.b32 	%r134, %r130, 2;
	add.s32 	%r16, %r132, %r254;
	add.s32 	%r17, %r134, %r255;
	cvt.rn.f32.u32	%f263, %r16;
	setp.ge.f32	%p38, %f263, %f1;
	cvt.rn.f32.u32	%f264, %r17;
	setp.ge.f32	%p39, %f264, %f2;
	or.pred  	%p7, %p38, %p39;
	@%p7 bra 	BB0_20;

	mov.u64 	%rd387, diffuse_buffer;
	cvta.global.u64 	%rd386, %rd387;
	cvt.u64.u32	%rd111, %r16;
	cvt.u64.u32	%rd112, %r17;
	// inline asm
	call (%rd109), _rt_buffer_get_64, (%rd386, %r37, %r38, %rd111, %rd112, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f265, %f266, %f267, %f268}, [%rd109];
	add.f32 	%f272, %f265, %f266;
	add.f32 	%f273, %f267, %f272;
	div.rn.f32 	%f274, %f273, 0f40400000;
	ld.const.f32 	%f275, [gx+24];
	fma.rn.f32 	%f707, %f274, %f275, %f707;

BB0_20:
	and.b32  	%r257, %r78, -4;
	and.b32  	%r256, %r77, -4;
	ld.const.v2.u32 	{%r137, %r138}, [offset+56];
	shl.b32 	%r140, %r137, 2;
	shl.b32 	%r142, %r138, 2;
	add.s32 	%r18, %r140, %r256;
	add.s32 	%r19, %r142, %r257;
	cvt.rn.f32.u32	%f276, %r18;
	setp.ge.f32	%p40, %f276, %f1;
	cvt.rn.f32.u32	%f277, %r19;
	setp.ge.f32	%p41, %f277, %f2;
	or.pred  	%p8, %p40, %p41;
	@%p8 bra 	BB0_22;

	mov.u64 	%rd389, diffuse_buffer;
	cvta.global.u64 	%rd388, %rd389;
	cvt.u64.u32	%rd118, %r18;
	cvt.u64.u32	%rd119, %r19;
	// inline asm
	call (%rd116), _rt_buffer_get_64, (%rd388, %r37, %r38, %rd118, %rd119, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f278, %f279, %f280, %f281}, [%rd116];
	add.f32 	%f285, %f278, %f279;
	add.f32 	%f286, %f280, %f285;
	div.rn.f32 	%f287, %f286, 0f40400000;
	ld.const.f32 	%f288, [gx+28];
	fma.rn.f32 	%f707, %f287, %f288, %f707;

BB0_22:
	ld.const.v2.u32 	{%r145, %r146}, [offset+64];
	shl.b32 	%r148, %r145, 2;
	shl.b32 	%r150, %r146, 2;
	cvt.u32.u64	%r151, %rd60;
	add.s32 	%r20, %r148, %r151;
	cvt.u32.u64	%r152, %rd61;
	add.s32 	%r21, %r150, %r152;
	cvt.rn.f32.u32	%f289, %r20;
	setp.ge.f32	%p42, %f289, %f1;
	cvt.rn.f32.u32	%f290, %r21;
	setp.ge.f32	%p43, %f290, %f2;
	or.pred  	%p9, %p42, %p43;
	@%p9 bra 	BB0_24;

	mov.u64 	%rd391, diffuse_buffer;
	cvta.global.u64 	%rd390, %rd391;
	cvt.u64.u32	%rd125, %r20;
	cvt.u64.u32	%rd126, %r21;
	// inline asm
	call (%rd123), _rt_buffer_get_64, (%rd390, %r37, %r38, %rd125, %rd126, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f291, %f292, %f293, %f294}, [%rd123];
	add.f32 	%f298, %f291, %f292;
	add.f32 	%f299, %f293, %f298;
	div.rn.f32 	%f300, %f299, 0f40400000;
	ld.const.f32 	%f301, [gx+32];
	fma.rn.f32 	%f707, %f300, %f301, %f707;

BB0_24:
	mov.f32 	%f716, 0f00000000;
	@%p1 bra 	BB0_26;

	mov.u64 	%rd393, diffuse_buffer;
	cvta.global.u64 	%rd392, %rd393;
	cvt.u64.u32	%rd132, %r4;
	cvt.u64.u32	%rd133, %r5;
	// inline asm
	call (%rd130), _rt_buffer_get_64, (%rd392, %r37, %r38, %rd132, %rd133, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f303, %f304, %f305, %f306}, [%rd130];
	add.f32 	%f310, %f303, %f304;
	add.f32 	%f311, %f305, %f310;
	div.rn.f32 	%f312, %f311, 0f40400000;
	ld.const.f32 	%f313, [gy];
	fma.rn.f32 	%f716, %f312, %f313, 0f00000000;

BB0_26:
	@%p2 bra 	BB0_28;

	mov.u64 	%rd379, diffuse_buffer;
	cvta.global.u64 	%rd378, %rd379;
	cvt.u64.u32	%rd139, %r6;
	cvt.u64.u32	%rd140, %r7;
	// inline asm
	call (%rd137), _rt_buffer_get_64, (%rd378, %r37, %r38, %rd139, %rd140, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f314, %f315, %f316, %f317}, [%rd137];
	add.f32 	%f321, %f314, %f315;
	add.f32 	%f322, %f316, %f321;
	div.rn.f32 	%f323, %f322, 0f40400000;
	ld.const.f32 	%f324, [gy+4];
	fma.rn.f32 	%f716, %f323, %f324, %f716;

BB0_28:
	@%p3 bra 	BB0_30;

	mov.u64 	%rd381, diffuse_buffer;
	cvta.global.u64 	%rd380, %rd381;
	cvt.u64.u32	%rd146, %r8;
	cvt.u64.u32	%rd147, %r9;
	// inline asm
	call (%rd144), _rt_buffer_get_64, (%rd380, %r37, %r38, %rd146, %rd147, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f325, %f326, %f327, %f328}, [%rd144];
	add.f32 	%f332, %f325, %f326;
	add.f32 	%f333, %f327, %f332;
	div.rn.f32 	%f334, %f333, 0f40400000;
	ld.const.f32 	%f335, [gy+8];
	fma.rn.f32 	%f716, %f334, %f335, %f716;

BB0_30:
	@%p4 bra 	BB0_32;

	mov.u64 	%rd383, diffuse_buffer;
	cvta.global.u64 	%rd382, %rd383;
	cvt.u64.u32	%rd153, %r10;
	cvt.u64.u32	%rd154, %r11;
	// inline asm
	call (%rd151), _rt_buffer_get_64, (%rd382, %r37, %r38, %rd153, %rd154, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f336, %f337, %f338, %f339}, [%rd151];
	add.f32 	%f343, %f336, %f337;
	add.f32 	%f344, %f338, %f343;
	div.rn.f32 	%f345, %f344, 0f40400000;
	ld.const.f32 	%f346, [gy+12];
	fma.rn.f32 	%f716, %f345, %f346, %f716;

BB0_32:
	@%p5 bra 	BB0_34;

	mov.u64 	%rd385, diffuse_buffer;
	cvta.global.u64 	%rd384, %rd385;
	cvt.u64.u32	%rd160, %r12;
	cvt.u64.u32	%rd161, %r13;
	// inline asm
	call (%rd158), _rt_buffer_get_64, (%rd384, %r37, %r38, %rd160, %rd161, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f347, %f348, %f349, %f350}, [%rd158];
	add.f32 	%f354, %f347, %f348;
	add.f32 	%f355, %f349, %f354;
	div.rn.f32 	%f356, %f355, 0f40400000;
	ld.const.f32 	%f357, [gy+16];
	fma.rn.f32 	%f716, %f356, %f357, %f716;

BB0_34:
	@%p6 bra 	BB0_36;

	mov.u64 	%rd371, diffuse_buffer;
	cvta.global.u64 	%rd370, %rd371;
	cvt.u64.u32	%rd167, %r14;
	cvt.u64.u32	%rd168, %r15;
	// inline asm
	call (%rd165), _rt_buffer_get_64, (%rd370, %r37, %r38, %rd167, %rd168, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f358, %f359, %f360, %f361}, [%rd165];
	add.f32 	%f365, %f358, %f359;
	add.f32 	%f366, %f360, %f365;
	div.rn.f32 	%f367, %f366, 0f40400000;
	ld.const.f32 	%f368, [gy+20];
	fma.rn.f32 	%f716, %f367, %f368, %f716;

BB0_36:
	@%p7 bra 	BB0_38;

	mov.u64 	%rd373, diffuse_buffer;
	cvta.global.u64 	%rd372, %rd373;
	cvt.u64.u32	%rd174, %r16;
	cvt.u64.u32	%rd175, %r17;
	// inline asm
	call (%rd172), _rt_buffer_get_64, (%rd372, %r37, %r38, %rd174, %rd175, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f369, %f370, %f371, %f372}, [%rd172];
	add.f32 	%f376, %f369, %f370;
	add.f32 	%f377, %f371, %f376;
	div.rn.f32 	%f378, %f377, 0f40400000;
	ld.const.f32 	%f379, [gy+24];
	fma.rn.f32 	%f716, %f378, %f379, %f716;

BB0_38:
	@%p8 bra 	BB0_40;

	mov.u64 	%rd375, diffuse_buffer;
	cvta.global.u64 	%rd374, %rd375;
	cvt.u64.u32	%rd181, %r18;
	cvt.u64.u32	%rd182, %r19;
	// inline asm
	call (%rd179), _rt_buffer_get_64, (%rd374, %r37, %r38, %rd181, %rd182, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f380, %f381, %f382, %f383}, [%rd179];
	add.f32 	%f387, %f380, %f381;
	add.f32 	%f388, %f382, %f387;
	div.rn.f32 	%f389, %f388, 0f40400000;
	ld.const.f32 	%f390, [gy+28];
	fma.rn.f32 	%f716, %f389, %f390, %f716;

BB0_40:
	@%p9 bra 	BB0_42;

	mov.u64 	%rd377, diffuse_buffer;
	cvta.global.u64 	%rd376, %rd377;
	cvt.u64.u32	%rd188, %r20;
	cvt.u64.u32	%rd189, %r21;
	// inline asm
	call (%rd186), _rt_buffer_get_64, (%rd376, %r37, %r38, %rd188, %rd189, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f391, %f392, %f393, %f394}, [%rd186];
	add.f32 	%f398, %f391, %f392;
	add.f32 	%f399, %f393, %f398;
	div.rn.f32 	%f400, %f399, 0f40400000;
	ld.const.f32 	%f401, [gy+32];
	fma.rn.f32 	%f716, %f400, %f401, %f716;

BB0_42:
	div.rn.f32 	%f61, %f716, %f707;
	abs.f32 	%f62, %f61;
	setp.leu.f32	%p44, %f62, 0f3F800000;
	mov.f32 	%f724, %f62;
	@%p44 bra 	BB0_44;

	rcp.rn.f32 	%f724, %f62;

BB0_44:
	mov.u64 	%rd367, depth_buffer;
	cvta.global.u64 	%rd366, %rd367;
	mul.rn.f32 	%f403, %f724, %f724;
	mov.f32 	%f404, 0fC0B59883;
	mov.f32 	%f405, 0fBF52C7EA;
	fma.rn.f32 	%f406, %f403, %f405, %f404;
	mov.f32 	%f407, 0fC0D21907;
	fma.rn.f32 	%f408, %f406, %f403, %f407;
	mul.f32 	%f409, %f403, %f408;
	mul.f32 	%f410, %f724, %f409;
	add.f32 	%f411, %f403, 0f41355DC0;
	mov.f32 	%f412, 0f41E6BD60;
	fma.rn.f32 	%f413, %f411, %f403, %f412;
	mov.f32 	%f414, 0f419D92C8;
	fma.rn.f32 	%f415, %f413, %f403, %f414;
	rcp.rn.f32 	%f416, %f415;
	fma.rn.f32 	%f417, %f410, %f416, %f724;
	mov.f32 	%f418, 0f3FC90FDB;
	sub.f32 	%f419, %f418, %f417;
	setp.gt.f32	%p45, %f62, 0f3F800000;
	selp.f32	%f420, %f419, %f417, %p45;
	mov.b32 	 %r179, %f420;
	mov.b32 	 %r180, %f61;
	and.b32  	%r181, %r180, -2147483648;
	or.b32  	%r182, %r179, %r181;
	mov.b32 	 %f421, %r182;
	setp.gtu.f32	%p46, %f62, 0f7F800000;
	selp.f32	%f65, %f420, %f421, %p46;
	ld.global.v2.f32 	{%f422, %f423}, [gaze];
	cvt.rzi.u32.f32	%r183, %f422;
	cvt.rzi.u32.f32	%r184, %f423;
	ld.global.f32 	%f426, [bbox_min];
	ld.global.f32 	%f427, [bbox_max];
	sub.f32 	%f428, %f427, %f426;
	ld.global.f32 	%f429, [bbox_min+4];
	ld.global.f32 	%f430, [bbox_max+4];
	sub.f32 	%f431, %f430, %f429;
	ld.global.f32 	%f432, [bbox_min+8];
	ld.global.f32 	%f433, [bbox_max+8];
	sub.f32 	%f434, %f433, %f432;
	mul.f32 	%f435, %f431, %f431;
	fma.rn.f32 	%f436, %f428, %f428, %f435;
	fma.rn.f32 	%f437, %f434, %f434, %f436;
	sqrt.rn.f32 	%f438, %f437;
	mul.f32 	%f439, %f438, 0f3BA3D70A;
	cvt.u64.u32	%rd195, %r183;
	cvt.u64.u32	%rd196, %r184;
	// inline asm
	call (%rd193), _rt_buffer_get_64, (%rd366, %r37, %r38, %rd195, %rd196, %rd33, %rd33);
	// inline asm
	ld.f32 	%f440, [%rd193];
	// inline asm
	call (%rd199), _rt_buffer_get_64, (%rd366, %r37, %r38, %rd60, %rd61, %rd33, %rd33);
	// inline asm
	ld.f32 	%f441, [%rd199];
	sub.f32 	%f442, %f441, %f440;
	mul.f32 	%f443, %f442, %f442;
	mul.f32 	%f444, %f439, 0f3ECCCCCD;
	mul.f32 	%f445, %f444, %f444;
	mul.f32 	%f446, %f444, 0f40206C99;
	rcp.rn.f32 	%f447, %f446;
	neg.f32 	%f448, %f443;
	div.rn.f32 	%f449, %f448, %f445;
	mul.f32 	%f450, %f449, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f451, %f450;
	mov.f32 	%f452, 0fBF317200;
	fma.rn.f32 	%f453, %f451, %f452, %f449;
	mov.f32 	%f454, 0fB5BFBE8E;
	fma.rn.f32 	%f455, %f451, %f454, %f453;
	mul.f32 	%f456, %f455, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f457, %f456;
	add.f32 	%f458, %f451, 0f00000000;
	ex2.approx.f32 	%f459, %f458;
	mul.f32 	%f460, %f457, %f459;
	setp.lt.f32	%p47, %f449, 0fC2D20000;
	selp.f32	%f461, 0f00000000, %f460, %p47;
	setp.gt.f32	%p48, %f449, 0f42D20000;
	selp.f32	%f462, 0f7F800000, %f461, %p48;
	mul.f32 	%f463, %f447, %f462;
	mul.f32 	%f66, %f439, %f463;
	mov.u64 	%rd212, normal_buffer;
	cvta.global.u64 	%rd206, %rd212;
	// inline asm
	call (%rd205), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd60, %rd61, %rd33, %rd33);
	// inline asm
	ld.f32 	%f67, [%rd205+12];
	mov.f32 	%f726, 0f00000000;
	@%p1 bra 	BB0_46;

	cvt.u64.u32	%rd215, %r4;
	cvt.u64.u32	%rd216, %r5;
	// inline asm
	call (%rd213), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd215, %rd216, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f464, %f465, %f466, %f467}, [%rd213];
	add.f32 	%f471, %f464, %f465;
	add.f32 	%f472, %f466, %f471;
	div.rn.f32 	%f473, %f472, 0f40400000;
	ld.const.f32 	%f474, [gx];
	fma.rn.f32 	%f726, %f473, %f474, 0f00000000;

BB0_46:
	@%p2 bra 	BB0_48;

	cvt.u64.u32	%rd222, %r6;
	cvt.u64.u32	%rd223, %r7;
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd222, %rd223, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f475, %f476, %f477, %f478}, [%rd220];
	add.f32 	%f482, %f475, %f476;
	add.f32 	%f483, %f477, %f482;
	div.rn.f32 	%f484, %f483, 0f40400000;
	ld.const.f32 	%f485, [gx+4];
	fma.rn.f32 	%f726, %f484, %f485, %f726;

BB0_48:
	@%p3 bra 	BB0_50;

	cvt.u64.u32	%rd229, %r8;
	cvt.u64.u32	%rd230, %r9;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd229, %rd230, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f486, %f487, %f488, %f489}, [%rd227];
	add.f32 	%f493, %f486, %f487;
	add.f32 	%f494, %f488, %f493;
	div.rn.f32 	%f495, %f494, 0f40400000;
	ld.const.f32 	%f496, [gx+8];
	fma.rn.f32 	%f726, %f495, %f496, %f726;

BB0_50:
	@%p4 bra 	BB0_52;

	cvt.u64.u32	%rd236, %r10;
	cvt.u64.u32	%rd237, %r11;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd236, %rd237, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f497, %f498, %f499, %f500}, [%rd234];
	add.f32 	%f504, %f497, %f498;
	add.f32 	%f505, %f499, %f504;
	div.rn.f32 	%f506, %f505, 0f40400000;
	ld.const.f32 	%f507, [gx+12];
	fma.rn.f32 	%f726, %f506, %f507, %f726;

BB0_52:
	@%p5 bra 	BB0_54;

	cvt.u64.u32	%rd243, %r12;
	cvt.u64.u32	%rd244, %r13;
	// inline asm
	call (%rd241), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd243, %rd244, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f508, %f509, %f510, %f511}, [%rd241];
	add.f32 	%f515, %f508, %f509;
	add.f32 	%f516, %f510, %f515;
	div.rn.f32 	%f517, %f516, 0f40400000;
	ld.const.f32 	%f518, [gx+16];
	fma.rn.f32 	%f726, %f517, %f518, %f726;

BB0_54:
	@%p6 bra 	BB0_56;

	cvt.u64.u32	%rd250, %r14;
	cvt.u64.u32	%rd251, %r15;
	// inline asm
	call (%rd248), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd250, %rd251, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f519, %f520, %f521, %f522}, [%rd248];
	add.f32 	%f526, %f519, %f520;
	add.f32 	%f527, %f521, %f526;
	div.rn.f32 	%f528, %f527, 0f40400000;
	ld.const.f32 	%f529, [gx+20];
	fma.rn.f32 	%f726, %f528, %f529, %f726;

BB0_56:
	@%p7 bra 	BB0_58;

	cvt.u64.u32	%rd257, %r16;
	cvt.u64.u32	%rd258, %r17;
	// inline asm
	call (%rd255), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd257, %rd258, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f530, %f531, %f532, %f533}, [%rd255];
	add.f32 	%f537, %f530, %f531;
	add.f32 	%f538, %f532, %f537;
	div.rn.f32 	%f539, %f538, 0f40400000;
	ld.const.f32 	%f540, [gx+24];
	fma.rn.f32 	%f726, %f539, %f540, %f726;

BB0_58:
	@%p8 bra 	BB0_60;

	cvt.u64.u32	%rd264, %r18;
	cvt.u64.u32	%rd265, %r19;
	// inline asm
	call (%rd262), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd264, %rd265, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f541, %f542, %f543, %f544}, [%rd262];
	add.f32 	%f548, %f541, %f542;
	add.f32 	%f549, %f543, %f548;
	div.rn.f32 	%f550, %f549, 0f40400000;
	ld.const.f32 	%f551, [gx+28];
	fma.rn.f32 	%f726, %f550, %f551, %f726;

BB0_60:
	@%p9 bra 	BB0_62;

	cvt.u64.u32	%rd271, %r20;
	cvt.u64.u32	%rd272, %r21;
	// inline asm
	call (%rd269), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd271, %rd272, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f552, %f553, %f554, %f555}, [%rd269];
	add.f32 	%f559, %f552, %f553;
	add.f32 	%f560, %f554, %f559;
	div.rn.f32 	%f561, %f560, 0f40400000;
	ld.const.f32 	%f562, [gx+32];
	fma.rn.f32 	%f726, %f561, %f562, %f726;

BB0_62:
	mov.f32 	%f735, 0f00000000;
	@%p1 bra 	BB0_64;

	cvt.u64.u32	%rd278, %r4;
	cvt.u64.u32	%rd279, %r5;
	// inline asm
	call (%rd276), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd278, %rd279, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f564, %f565, %f566, %f567}, [%rd276];
	add.f32 	%f571, %f564, %f565;
	add.f32 	%f572, %f566, %f571;
	div.rn.f32 	%f573, %f572, 0f40400000;
	ld.const.f32 	%f574, [gy];
	fma.rn.f32 	%f735, %f573, %f574, 0f00000000;

BB0_64:
	@%p2 bra 	BB0_66;

	cvt.u64.u32	%rd285, %r6;
	cvt.u64.u32	%rd286, %r7;
	// inline asm
	call (%rd283), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd285, %rd286, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f575, %f576, %f577, %f578}, [%rd283];
	add.f32 	%f582, %f575, %f576;
	add.f32 	%f583, %f577, %f582;
	div.rn.f32 	%f584, %f583, 0f40400000;
	ld.const.f32 	%f585, [gy+4];
	fma.rn.f32 	%f735, %f584, %f585, %f735;

BB0_66:
	@%p3 bra 	BB0_68;

	cvt.u64.u32	%rd292, %r8;
	cvt.u64.u32	%rd293, %r9;
	// inline asm
	call (%rd290), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd292, %rd293, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f586, %f587, %f588, %f589}, [%rd290];
	add.f32 	%f593, %f586, %f587;
	add.f32 	%f594, %f588, %f593;
	div.rn.f32 	%f595, %f594, 0f40400000;
	ld.const.f32 	%f596, [gy+8];
	fma.rn.f32 	%f735, %f595, %f596, %f735;

BB0_68:
	@%p4 bra 	BB0_70;

	cvt.u64.u32	%rd299, %r10;
	cvt.u64.u32	%rd300, %r11;
	// inline asm
	call (%rd297), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd299, %rd300, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f597, %f598, %f599, %f600}, [%rd297];
	add.f32 	%f604, %f597, %f598;
	add.f32 	%f605, %f599, %f604;
	div.rn.f32 	%f606, %f605, 0f40400000;
	ld.const.f32 	%f607, [gy+12];
	fma.rn.f32 	%f735, %f606, %f607, %f735;

BB0_70:
	@%p5 bra 	BB0_72;

	cvt.u64.u32	%rd306, %r12;
	cvt.u64.u32	%rd307, %r13;
	// inline asm
	call (%rd304), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd306, %rd307, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f608, %f609, %f610, %f611}, [%rd304];
	add.f32 	%f615, %f608, %f609;
	add.f32 	%f616, %f610, %f615;
	div.rn.f32 	%f617, %f616, 0f40400000;
	ld.const.f32 	%f618, [gy+16];
	fma.rn.f32 	%f735, %f617, %f618, %f735;

BB0_72:
	@%p6 bra 	BB0_74;

	cvt.u64.u32	%rd313, %r14;
	cvt.u64.u32	%rd314, %r15;
	// inline asm
	call (%rd311), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd313, %rd314, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f619, %f620, %f621, %f622}, [%rd311];
	add.f32 	%f626, %f619, %f620;
	add.f32 	%f627, %f621, %f626;
	div.rn.f32 	%f628, %f627, 0f40400000;
	ld.const.f32 	%f629, [gy+20];
	fma.rn.f32 	%f735, %f628, %f629, %f735;

BB0_74:
	@%p7 bra 	BB0_76;

	cvt.u64.u32	%rd320, %r16;
	cvt.u64.u32	%rd321, %r17;
	// inline asm
	call (%rd318), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd320, %rd321, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f630, %f631, %f632, %f633}, [%rd318];
	add.f32 	%f637, %f630, %f631;
	add.f32 	%f638, %f632, %f637;
	div.rn.f32 	%f639, %f638, 0f40400000;
	ld.const.f32 	%f640, [gy+24];
	fma.rn.f32 	%f735, %f639, %f640, %f735;

BB0_76:
	@%p8 bra 	BB0_78;

	cvt.u64.u32	%rd327, %r18;
	cvt.u64.u32	%rd328, %r19;
	// inline asm
	call (%rd325), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd327, %rd328, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f641, %f642, %f643, %f644}, [%rd325];
	add.f32 	%f648, %f641, %f642;
	add.f32 	%f649, %f643, %f648;
	div.rn.f32 	%f650, %f649, 0f40400000;
	ld.const.f32 	%f651, [gy+28];
	fma.rn.f32 	%f735, %f650, %f651, %f735;

BB0_78:
	@%p9 bra 	BB0_80;

	cvt.u64.u32	%rd334, %r20;
	cvt.u64.u32	%rd335, %r21;
	// inline asm
	call (%rd332), _rt_buffer_get_64, (%rd206, %r37, %r38, %rd334, %rd335, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f652, %f653, %f654, %f655}, [%rd332];
	add.f32 	%f659, %f652, %f653;
	add.f32 	%f660, %f654, %f659;
	div.rn.f32 	%f661, %f660, 0f40400000;
	ld.const.f32 	%f662, [gy+32];
	fma.rn.f32 	%f735, %f661, %f662, %f735;

BB0_80:
	mov.f32 	%f702, 0fB5BFBE8E;
	mov.f32 	%f701, 0fBF317200;
	mul.f32 	%f663, %f735, %f735;
	fma.rn.f32 	%f664, %f726, %f726, %f663;
	sqrt.rn.f32 	%f665, %f664;
	ld.global.v2.u32 	{%r221, %r222}, [launch_index];
	cvt.rn.f32.u32	%f666, %r221;
	cvt.rn.f32.u32	%f667, %r222;
	sub.f32 	%f668, %f666, %f110;
	sub.f32 	%f669, %f667, %f111;
	mul.f32 	%f670, %f669, %f669;
	fma.rn.f32 	%f671, %f668, %f668, %f670;
	sqrt.rn.f32 	%f672, %f671;
	mul.f32 	%f673, %f672, 0f3F000000;
	setp.lt.f32	%p49, %f111, 0f00000000;
	setp.lt.f32	%p50, %f110, 0f00000000;
	and.pred  	%p51, %p50, %p49;
	div.rn.f32 	%f674, %f673, 0f41A00000;
	selp.f32	%f675, 0f00000000, %f674, %p51;
	mul.f32 	%f676, %f675, %f675;
	div.rn.f32 	%f677, %f676, 0fBE23D70B;
	mul.f32 	%f678, %f677, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f679, %f678;
	fma.rn.f32 	%f681, %f679, %f701, %f677;
	fma.rn.f32 	%f683, %f679, %f702, %f681;
	mul.f32 	%f684, %f683, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f685, %f684;
	add.f32 	%f686, %f679, 0f00000000;
	ex2.approx.f32 	%f687, %f686;
	mul.f32 	%f688, %f685, %f687;
	setp.lt.f32	%p52, %f677, 0fC2D20000;
	setp.gt.f32	%p53, %f677, 0f42D20000;
	fma.rn.f32 	%f689, %f688, 0fBF7F52B4, 0f3F800000;
	selp.f32	%f690, 0f3F800000, %f689, %p52;
	selp.f32	%f691, 0fFF800000, %f690, %p53;
	add.f32 	%f692, %f23, %f24;
	div.rn.f32 	%f693, %f22, 0f40400000;
	fma.rn.f32 	%f694, %f692, 0f3F000000, %f693;
	add.f32 	%f695, %f694, %f65;
	div.rn.f32 	%f696, %f695, 0f40400000;
	max.f32 	%f697, %f696, %f665;
	mul.f32 	%f698, %f66, %f697;
	max.f32 	%f699, %f698, %f691;
	mul.f32 	%f104, %f67, %f699;
	setp.ge.f32	%p54, %f21, 0f00000000;
	setp.lt.f32	%p55, %f21, 0f3D8F5C29;
	and.pred  	%p56, %p54, %p55;
	and.b32  	%r223, %r221, 3;
	and.b32  	%r224, %r222, 3;
	cvt.u64.u32	%rd339, %r224;
	mul.wide.u32 	%rd340, %r223, 4;
	mov.u64 	%rd341, mask_50;
	add.s64 	%rd342, %rd341, %rd340;
	add.s64 	%rd3, %rd342, %rd339;
	mov.u64 	%rd343, mask_25;
	add.s64 	%rd344, %rd343, %rd340;
	add.s64 	%rd4, %rd344, %rd339;
	mov.u16 	%rs15, 1;
	@%p56 bra 	BB0_85;

	setp.gt.f32	%p57, %f21, 0f3D8F5C29;
	setp.le.f32	%p58, %f21, 0f3DD70A3E;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	BB0_84;
	bra.uni 	BB0_82;

BB0_84:
	ld.const.u8 	%rs15, [%rd4];
	bra.uni 	BB0_85;

BB0_82:
	setp.gt.f32	%p60, %f21, 0f3DD70A3E;
	setp.le.f32	%p61, %f21, 0f3E0F5C29;
	and.pred  	%p62, %p60, %p61;
	mov.u16 	%rs15, 0;
	@!%p62 bra 	BB0_85;
	bra.uni 	BB0_83;

BB0_83:
	ld.const.u8 	%rs15, [%rd3];

BB0_85:
	setp.lt.f32	%p63, %f104, 0f3ECCCCCD;
	setp.gt.f32	%p64, %f104, 0f3C23D70A;
	and.pred  	%p65, %p64, %p63;
	@%p65 bra 	BB0_92;
	bra.uni 	BB0_86;

BB0_92:
	mov.u64 	%rd347, mask_75;
	add.s64 	%rd348, %rd347, %rd340;
	add.s64 	%rd349, %rd348, %rd339;
	ld.const.u8 	%rs12, [%rd349];
	or.b16  	%rs13, %rs12, %rs15;
	and.b16  	%rs14, %rs13, 255;
	setp.ne.s16	%p75, %rs14, 0;
	selp.u32	%r262, 1, 0, %p75;
	bra.uni 	BB0_93;

BB0_86:
	setp.lt.f32	%p66, %f104, 0f3F19999A;
	setp.ge.f32	%p67, %f104, 0f3ECCCCCD;
	and.pred  	%p68, %p67, %p66;
	@%p68 bra 	BB0_91;
	bra.uni 	BB0_87;

BB0_91:
	ld.const.u8 	%rs9, [%rd3];
	or.b16  	%rs10, %rs9, %rs15;
	and.b16  	%rs11, %rs10, 255;
	setp.ne.s16	%p74, %rs11, 0;
	selp.u32	%r262, 1, 0, %p74;
	bra.uni 	BB0_93;

BB0_87:
	setp.ltu.f32	%p69, %f104, 0f3F19999A;
	@%p69 bra 	BB0_89;
	bra.uni 	BB0_88;

BB0_89:
	mov.u32 	%r262, 1;
	setp.ge.f32	%p71, %f104, 0f3F4CCCCD;
	@%p71 bra 	BB0_93;

	cvt.u32.u16	%r226, %rs15;
	cvt.s32.s8 	%r227, %r226;
	or.b32  	%r228, %r221, %r222;
	and.b32  	%r229, %r228, 7;
	setp.eq.s32	%p72, %r229, 0;
	selp.u32	%r230, 1, 0, %p72;
	or.b32  	%r231, %r227, %r230;
	setp.ne.s32	%p73, %r231, 0;
	selp.u32	%r262, 1, 0, %p73;
	bra.uni 	BB0_93;

BB0_88:
	ld.const.u8 	%rs6, [%rd4];
	or.b16  	%rs7, %rs6, %rs15;
	and.b16  	%rs8, %rs7, 255;
	setp.ne.s16	%p70, %rs8, 0;
	selp.u32	%r262, 1, 0, %p70;

BB0_93:
	mov.u64 	%rd369, weight_buffer;
	cvta.global.u64 	%rd368, %rd369;
	mov.u64 	%rd365, thread_buffer;
	cvta.global.u64 	%rd364, %rd365;
	mov.u32 	%r246, 12;
	cvt.u64.u32	%rd353, %r222;
	cvt.u64.u32	%rd352, %r221;
	// inline asm
	call (%rd350), _rt_buffer_get_64, (%rd364, %r37, %r246, %rd352, %rd353, %rd33, %rd33);
	// inline asm
	ld.global.v2.u32 	{%r238, %r239}, [launch_index];
	st.u32 	[%rd350+8], %r262;
	st.u32 	[%rd350+4], %r239;
	st.u32 	[%rd350], %r238;
	ld.global.v2.u32 	{%r242, %r243}, [launch_index];
	cvt.u64.u32	%rd358, %r242;
	cvt.u64.u32	%rd359, %r243;
	// inline asm
	call (%rd356), _rt_buffer_get_64, (%rd368, %r37, %r38, %rd358, %rd359, %rd33, %rd33);
	// inline asm
	mov.f32 	%f700, 0f00000000;
	st.v4.f32 	[%rd356], {%f110, %f111, %f705, %f700};
	ret;
}


