#line 1 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"




























































#line 62 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 65 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 66 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_config.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

































































#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"






#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"









#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

















#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"













#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"







#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"














#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"






#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"







#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





















    
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    
    

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        


            
        #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
































#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    


#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    } 

    





#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

#pragma pack(pop)
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    



    





















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


















    

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    





#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"







#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
    
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    


#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
        
    

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



    
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    
        
    

#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    


#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    





#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    


#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"









    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {









    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    #line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    #line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













    


        
    #line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;


#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"











#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    











        
    #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    

#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

























 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const*,
      wchar_t const*,
      wchar_t const*,
            unsigned int,
            uintptr_t);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    






        
    #line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        
    #line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




















    
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        


            
        #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    #line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        



    #line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
              
        

#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    



#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t; 

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



    
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

        
        
        
        

        


        


        


        


        


        


        


        


        



        



        


        


        


        


        


        


        


        


        


        


        



        



        



        


        



        




        

        




        

        




        

        




        

        




        

        




        

        




        

        




        

    #line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))

#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"









    

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        

#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
            
        #line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
            
        #line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        

#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
            
        #line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"


#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"



#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"






#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

  


















































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
 #line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
























































#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma pack(push,8)





 
  


   
  #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
  
 


#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"














 
  
   

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  





#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 




























#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

	







		
		


			
		#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		




 
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"










































	
	






		


			
		#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	




		

#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			
		#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	

#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
		
	#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		
			#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")
		





#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"








	
		
	

#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 









 









 









 
































#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 
 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 #line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"














    
    
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"



#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
    

    

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#pragma comment(lib, "libcpmt" "" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 















 
  

#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  





#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

   


#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  #line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 

#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   


     
   #line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  #line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 


























  
   
  #line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

 
  
  
  




  
  
  

  







   
   
   
  #line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		





		







typedef long long _Longlong;
typedef unsigned long long _ULonglong;

		






		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class  _Lockit
	{	
public:
 

  
















#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
  #line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;

  











#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

class  _Init_locks
	{	
public:
 
  










#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
  #line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





		

 void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




 
 #pragma pack(pop)
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"

__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

 
namespace std {
using ::va_list;
}
 #line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"





#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"





























#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"



#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"

#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_config.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_config.h"
#line 79 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"








#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"




#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"













        





#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"








#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"


#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"






















#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"







#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;

    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;



#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"

__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"



} __pragma(pack(pop))
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"




 int* __cdecl _errno(void);


 errno_t __cdecl _set_errno(  int _Value);
 errno_t __cdecl _get_errno(  int* _Value);



    
        
    

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"


#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"
















 




































































#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"










enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    








    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    




    cudaErrorJitCompilerNotFound          =     81,

    






    cudaErrorCooperativeLaunchTooLarge    =     82,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   




   int preferredShmemCarveout;
};




enum __declspec(__device_builtin__) cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 
    cudaFuncAttributeMax
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97 
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct __declspec(__device_builtin__) cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
    int    computePreemptionSupported; 
    int    canUseHostPointerForRegisteredMem; 
    int    cooperativeLaunch;          
    int    cooperativeMultiDeviceLaunch; 
    size_t sharedMemPerBlockOptin;     
};




















































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;




enum __declspec(__device_builtin__) cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct __declspec(__device_builtin__) cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};


 

#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 87 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F= 2,  
	CUDA_C_16F= 6,  
	CUDA_R_32F= 0,  
	CUDA_C_32F= 4,  
	CUDA_R_64F= 1,  
	CUDA_C_64F= 5,  
	CUDA_R_8I = 3,  
	CUDA_C_8I = 7,  
	CUDA_R_8U = 8,  
	CUDA_C_8U = 9,  
	CUDA_R_32I= 10, 
	CUDA_C_32I= 11, 
	CUDA_R_32U= 12, 
	CUDA_C_32U= 13  
} cudaDataType; 


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;

#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\library_types.h"
#line 88 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"




































































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"














































































































#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"

#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"



































































































































#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"

#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_device_runtime_api.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"





#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"
    
    
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"










































#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"













#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"

#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"






#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"



#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"


extern "C" {
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);


















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);












































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);










































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);










































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);



























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);












































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);





































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);








































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);




















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
































extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);























extern __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);














































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);






























extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);


































extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);













































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 





















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);










































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);



































































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
















































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);


















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);


































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);

















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);






























































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );










































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 




































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);











































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);






















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);





#line 2110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);

























































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);




















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);






















extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);







































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);

 


































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);





































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);





























extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);




























extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);

























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);









































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 




























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);






















































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags  = 0);
















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);






















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value);























extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);























extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

 




















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);











































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 















































extern __declspec(__host__) cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetupArgument(const void *arg, size_t size, size_t offset);








































extern __declspec(__host__) cudaError_t __stdcall cudaLaunch(const void *func);


 



















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);



























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);






























extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);








































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);











































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);



























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);































































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
















































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);




















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);










































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);



















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);




































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);








































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);








































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);


























extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);






































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);



















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);




















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);








































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);






































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);






































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);












































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);








































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);








































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);





















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);



























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);






















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);





















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);































extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);






































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);



































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);






















































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);
























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);




































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 























































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 




































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);







































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);



















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 


























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);




































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);





























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);



































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);



































extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);


















































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);






















































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);

































extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);



































extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);




















extern __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);

























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 






































extern __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);




















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 

































































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);

















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);

















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 






































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
















extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 


























extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);


















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);























































































































































































































#line 7398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"








#line 7407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"


}

#line 7412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"



#line 7416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"

#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"










































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"


 

#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 91 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_runtime_api.h"

#line 92 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_functions.h"
#line 93 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

#line 95 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 96 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x);

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x);

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y);

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z);

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x);

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x);

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y);

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z);

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w);

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x);

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x);

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y);

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z);

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w);

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x);

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x);

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y);

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z);

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x);

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y);

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z);

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w);

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x);

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y);

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x);

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y);

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z);

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w);




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.hpp"

#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"

#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_functions.h"
#line 97 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
















#line 114 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\common_functions.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {



 extern int* __cdecl _errno(void);


 errno_t __cdecl _set_errno(  int _Value);
 errno_t __cdecl _get_errno(  int* _Value);



 unsigned long* __cdecl __doserrno(void);


 errno_t __cdecl _set_doserrno(  unsigned long _Value);
 errno_t __cdecl _get_doserrno(  unsigned long * _Value);










































    
    
    
    
    
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"



__pragma(pack(push, 8)) extern "C" {



 
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
 int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
 int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

    












#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    
     void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
     int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
     errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );
    
    
     errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );
    
    
     errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );
    
     
     wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



      wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
 size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
 wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
        



    #line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 

      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK.")) 
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



 
  
 wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


 errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 
  
 wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

  errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

   int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

   int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

   int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

   int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

  errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

  errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 

 size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

 size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
 int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
 int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"









    


#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

      
     wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
    

      
     int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );
    
      
     int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );
    
    
     
     wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );
    
    
     
     wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );
    
    
     
     wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );
    
    
     
     wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );
    
    
     
     wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );
    
      
     int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







     
     errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
     errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
     errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
     errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
     errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
     char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
 int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

char* __cdecl strcpy(
      char*       _Dest,
                                            char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 
  
 char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


 errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
  
 char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
 int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


 errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strlwr( char *_String);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


 errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 char* __cdecl strncat(
      char*       _Dest,
        char const* _Source,
                           size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
 size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 char* __cdecl _strnset(
      char*  _Dest,
                           int    _Val,
                           size_t _Count
    );


 errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

 char* __cdecl _strrev(
      char* _Str
    );


 errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

char* __cdecl _strset(
      char* _Dest,
           int   _Value
    );

 
 size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
 char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


 errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strupr( char *_String);
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


 errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

 size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

 size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"





    


#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

      
     char* __cdecl strdup(
          char const* _String
        );

    

#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

    
      
     int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
     int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
     char* __cdecl strlwr(
          char* _String
        );

      
     int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
     char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
     char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
     char* __cdecl strupr(
          char* _String
        );

#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 
 
  
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrdate_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrtime_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
















  
 int* __cdecl __daylight(void);




  
 long* __cdecl __dstbias(void);




  
 long* __cdecl __timezone(void);




    
 char** __cdecl __tzname(void);



  
 errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
 errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
 errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
 errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
 char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
     errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
 clock_t __cdecl clock(void);

 
 
  
 char* __cdecl _ctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
 
  
 char* __cdecl _ctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
 double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
 double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
 struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
 __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
 __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


 __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


 __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

 size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


 errno_t __cdecl _strdate_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

   char* __cdecl _strdate( char *_Buffer);
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"


 errno_t __cdecl _strtime_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

  char* __cdecl _strtime( char *_Buffer);
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 __time32_t __cdecl _time32(
      __time32_t* _Time
    );

 __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
 int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
 int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










     void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    











































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base); 
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

    #line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    

    
          void __cdecl tzset(void);
    #line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

extern "C"
{
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void)


#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"








#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
typedef double max_align_t;	
}

using ::std:: max_align_t;	
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator)
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );


void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {





     
     void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                        void*       _Context
        );

     void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*   _Context
        );

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



 
 void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
 void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*), 
                                                       void*         _Context
    );

 
 void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
 void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*         _Context
    );

 
 void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

















































































#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"





      
     void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

      
     void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {
































 

 errno_t __cdecl _itow_s(
                              int      _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

  wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 

 errno_t __cdecl _ltow_s(
                              long     _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

  wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"


 errno_t __cdecl _ultow_s(
                              unsigned long _Value,
      wchar_t*      _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

  wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 
 double __cdecl wcstod(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
 double __cdecl _wcstod_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
 long __cdecl wcstol(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 long __cdecl _wcstol_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
 long long __cdecl wcstoll(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 long long __cdecl _wcstoll_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
 unsigned long __cdecl wcstoul(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 unsigned long __cdecl _wcstoul_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
 unsigned long long __cdecl wcstoull(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 unsigned long long __cdecl _wcstoull_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
 long double __cdecl wcstold(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
 long double __cdecl _wcstold_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
 float __cdecl wcstof(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
 float __cdecl _wcstof_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
 double __cdecl _wtof(
      wchar_t const* _String
    );

 
 double __cdecl _wtof_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
 int __cdecl _wtoi(
      wchar_t const* _String
    );

 
 int __cdecl _wtoi_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
 long __cdecl _wtol(
      wchar_t const* _String
    );

 
 long __cdecl _wtol_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
 long long __cdecl _wtoll(
      wchar_t const* _String
    );

 
 long long __cdecl _wtoll_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );


 errno_t __cdecl _i64tow_s(
                              __int64  _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );


 wchar_t* __cdecl _i64tow(
                        __int64  _Value,
        wchar_t* _Buffer,
                        int      _Radix
    );


 errno_t __cdecl _ui64tow_s(
                              unsigned __int64 _Value,
      wchar_t*         _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


 wchar_t* __cdecl _ui64tow(
                        unsigned __int64 _Value,
        wchar_t*         _Buffer,
                        int              _Radix
    );

 
 __int64 __cdecl _wtoi64(
      wchar_t const* _String
    );

 
 __int64 __cdecl _wtoi64_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
 __int64 __cdecl _wcstoi64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 __int64 __cdecl _wcstoi64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
 unsigned __int64 __cdecl _wcstoui64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
 unsigned __int64 __cdecl _wcstoui64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );




 
 
 __declspec(allocator) wchar_t* __cdecl _wfullpath(
      wchar_t*       _Buffer,
                                wchar_t const* _Path,
                                  size_t         _BufferCount
    );




 errno_t __cdecl _wmakepath_s(
      wchar_t*       _Buffer,
                              size_t         _BufferCount,
                        wchar_t const* _Drive,
                        wchar_t const* _Dir,
                        wchar_t const* _Filename,
                        wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

  void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 void __cdecl _wperror(
      wchar_t const* _ErrMsg
    );


 void __cdecl _wsplitpath(
                        wchar_t const* _FullPath,
        wchar_t*       _Drive,
        wchar_t*       _Dir,
        wchar_t*       _Filename,
        wchar_t*       _Ext
    );

 errno_t __cdecl _wsplitpath_s(
                                  wchar_t const* _FullPath,
         wchar_t*       _Drive,
                                    size_t         _DriveCount,
           wchar_t*       _Dir,
                                    size_t         _DirCount,
      wchar_t*       _Filename,
                                    size_t         _FilenameCount,
           wchar_t*       _Ext,
                                    size_t         _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"





    
    

    
     errno_t __cdecl _wdupenv_s(
            wchar_t**      _Buffer,
                                                                            size_t*        _BufferCount,
                                                                               wchar_t const* _VarName
        );

    

      
     wchar_t* __cdecl _wgetenv(
          wchar_t const* _VarName
        );

     
    
     errno_t __cdecl _wgetenv_s(
                                     size_t*        _RequiredCount,
          wchar_t*       _Buffer,
                                      size_t         _BufferCount,
                                    wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

     
     int __cdecl _wputenv(
          wchar_t const* _EnvString
        );

    
     errno_t __cdecl _wputenv_s(
          wchar_t const* _Name,
          wchar_t const* _Value
        );
    
     errno_t __cdecl _wsearchenv_s(
                                wchar_t const* _Filename,
                                wchar_t const* _VarName,
          wchar_t*       _Buffer,
                                  size_t         _BufferCount
        );
    
    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    
      void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

     int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









 void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );












 __declspec(noreturn) void __cdecl exit(  int _Code);
 __declspec(noreturn) void __cdecl _exit(  int _Code);
 __declspec(noreturn) void __cdecl _Exit(  int _Code);
 __declspec(noreturn) void __cdecl quick_exit(  int _Code);
 __declspec(noreturn) void __cdecl abort(void);





 unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);



#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"






    
    
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*, 
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
     _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

     _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"












#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









  int __cdecl _set_error_mode(  int _Mode);



 int* __cdecl _errno(void);


 errno_t __cdecl _set_errno(  int _Value);
 errno_t __cdecl _get_errno(  int* _Value);

 unsigned long* __cdecl __doserrno(void);


 errno_t __cdecl _set_doserrno(  unsigned long _Value);
 errno_t __cdecl _get_doserrno(  unsigned long * _Value);


  char** __cdecl __sys_errlist(void);


  int * __cdecl __sys_nerr(void);


 void __cdecl perror(  char const* _ErrMsg);




  char**    __cdecl __p__pgmptr (void);
  wchar_t** __cdecl __p__wpgmptr(void);
  int*      __cdecl __p__fmode  (void);






    
    
    
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
 errno_t __cdecl _get_pgmptr (  char**    _Value);

 
 errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

 errno_t __cdecl _set_fmode  (               int       _Mode );

 errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

   div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
   ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540) 

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






 void __cdecl srand(  unsigned int _Seed);

   int __cdecl rand(void);



#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                      double    __cdecl atof   (  char const* _String);
    int       __cdecl atoi   (  char const* _String);
                      long      __cdecl atol   (  char const* _String);
                      long long __cdecl atoll  (  char const* _String);
                      __int64   __cdecl _atoi64(  char const* _String);

   double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
   int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
   long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
   long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
   __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

   int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
   int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
   int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
 int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
 int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
 int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
 float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
 float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
 double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
 long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

 errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

 char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

 errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


 char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

 errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  
 char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

 errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
  
 char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
 errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


 char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
        
    #line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


        
    #line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     
     int __cdecl ___mb_cur_max_func(void);

     
     int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



 
 int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

  
 int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
 size_t __cdecl _mbstrlen_l(
        char const* _String, 
      _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
 size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
 int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
 int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


 errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


 errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"





 int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


 int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
     errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh, 
                              _locale_t _Locale);


 errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




















 
 
 __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




 errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


 void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


 errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }










    

    
     
     errno_t __cdecl getenv_s(
                                     size_t*     _RequiredCount,
          char*       _Buffer,
                                      rsize_t     _BufferCount,
                                    char const* _VarName
        );
    
    #line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




     int*       __cdecl __p___argc (void);
     char***    __cdecl __p___argv (void);
     wchar_t*** __cdecl __p___wargv(void);

    




        
        
        
    #line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
     char***    __cdecl __p__environ (void);
     wchar_t*** __cdecl __p__wenviron(void);

    
        
    #line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
    





        
        
    #line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



    
    



       
     char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


#line 1198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
     errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
     int __cdecl _putenv(
          char const* _EnvString
        );

    
     errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

     errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

      void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
     void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
     void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
     void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
     char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
     char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
     char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );
    
     
     char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );
    
     
     char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
     void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
     char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

        

          
         int __cdecl putenv(
              char const* _EnvString
            );

    #line 1354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

 
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
 #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(0), _Last(0)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	constexpr const _Elem *begin() const noexcept
		{	
		return (_First);
		}

	constexpr const _Elem *end() const noexcept
		{	
		return (_Last);
		}

	constexpr size_t size() const noexcept
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
struct _Nil
	{	
	};

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	
template<bool _Val>
	struct _Cat_base
		: integral_constant<bool, _Val>
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

 
template<class _Ty,
	class _Uty>
	constexpr bool is_same_v = is_same<_Ty, _Uty>::value;
 #line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_integral_v = is_integral<_Ty>::value;
 #line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;
 #line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

 
template<class _Ty>
	constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;
 #line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};














}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

namespace std {
		
 
 
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 
 
 
 
 

 
 

  

  











#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
   
   
  #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		


		
 

 



































 
 

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static constexpr bool value = false;
	};

		

 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 
	static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
	const size_t _FNV_offset_basis = 14695981039346656037ULL;
	const size_t _FNV_prime = 1099511628211ULL;

 



#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
	{	
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static constexpr bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	
	};

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 #line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"




 





 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 








 #line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



 

#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


































































namespace std {
	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	typedef false_type _Bool_type;
	static constexpr bool _Weird = false;
	};












template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };












template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_function_v = is_function<_Ty>::value;
 #line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		





















template<class _Ty> inline
	constexpr _Ty *addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
	struct _Is_memfunptr
	{	
	typedef false_type _Bool_type;
	};













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
	struct _Add_reference
	{	
	typedef _Ty _Lvalue;
	typedef _Ty _Rvalue;
	};

template<class _Ty>
	struct _Add_reference<_Ty, false>
	{	
	typedef _Ty& _Lvalue;
	typedef _Ty&& _Rvalue;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Lvalue type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Rvalue type;
	};

	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird>
	struct _Add_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, false>
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

template<class _Ty>
	struct add_pointer
	{	
	typedef typename _Add_pointer<_Ty>::type type;
	};

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	typedef _Ty2 _Class_type;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct is_null_pointer
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union
		: _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class
		: _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From,
	class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_pod
		: _Cat_base<__is_pod(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_empty
		: _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic
		: _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract
		: _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_final
		: _Cat_base<__is_final(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout
		: _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type
		: _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial
		: _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: _Cat_base<__is_trivially_copyable(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_assignable
		: integral_constant<bool, __is_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: _Cat_base<__is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<__has_trivial_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: _Cat_base<__is_nothrow_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_destructible
		: _Cat_base<__is_nothrow_destructible(_Ty)>
	{	
	};

	
template<class _Ty,
	bool = is_integral<_Ty>::value>
	struct _Sign_base
	{	
	typedef typename remove_cv<_Ty>::type _Uty;
	typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
	typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
	};

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	typedef is_floating_point<_Ty> _Signed;
	typedef false_type _Unsigned;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static constexpr size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static constexpr size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base,
	class _Der>
	struct is_base_of
		: _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

	
template<class...>
	struct _Conjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_conjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_conjunction<true, _Lhs, _Traits...>
	{	
	typedef typename _Conjunction<_Traits...>::type type;
	};

template<>
	struct _Conjunction<>
	{	
	typedef true_type type;
	};

template<class _Trait>
	struct _Conjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Conjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct conjunction
		: _Conjunction<_Traits...>::type
	{	
		
		
	};

	
template<class...>
	struct _Disjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_disjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_disjunction<false, _Lhs, _Traits...>
	{	
	typedef typename _Disjunction<_Traits...>::type type;
	};

template<>
	struct _Disjunction<>
	{	
	typedef false_type type;
	};

template<class _Trait>
	struct _Disjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Disjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct disjunction
		: _Disjunction<_Traits...>::type
	{	
		
		
	};

	
template<class _Trait>
	struct negation
		: bool_constant<!_Trait::value>
	{	
	};


namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral<_Ty>::value,
		"integer_sequence<T, I...> requires T to be an integral type.");

	typedef integer_sequence<_Ty, _Vals...> type;
	typedef _Ty value_type;

	static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
 




































template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;
 #line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

	
template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
		&& is_copy_constructible<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

	
template<class...>
	struct _Param_tester
	{	
	typedef void type;
	};

	
template<class... _Types>	
	using void_t = typename _Param_tester<_Types...>::type;

	
struct _Invoker_pmf_object
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmf_pointer
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmd_object
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
		{	
		return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
		}
	};

struct _Invoker_pmd_pointer
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
		{	
		return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
		}
	};

struct _Invoker_functor
	{	
	template<class _Callable,
		class... _Types>
		static auto _Call(_Callable&& _Obj, _Types&&... _Args)
		-> decltype(::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable,
	class _Ty1,
	class _Decayed = typename decay<_Callable>::type,
	bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
	bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
	struct _Invoker1;

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
		: _If<is_base_of<
			typename _Is_memfunptr<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmf_object,
		_Invoker_pmf_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
		: _If<is_base_of<
			typename _Is_member_object_pointer<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmd_object,
		_Invoker_pmd_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable>
	struct _Invoker<_Callable>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class _Ty1,
	class... _Types2>
	struct _Invoker<_Callable, _Ty1, _Types2...>
		: _Invoker1<_Callable, _Ty1>
	{	
	};

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
	{	
	return (_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	bool = is_void<_Rx>::value>
	struct _Forced
	{	
	};

struct _Unforced
	{	
	};

template<class _Cv_void,
	class... _Valtys> inline
	void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
	{	
	::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
	}

template<class _Rx,
	class... _Valtys> inline
	_Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

template<class... _Valtys> inline
	auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
	-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

	
struct _Unique_tag_result_of
	{	
	};

template<class _Void,
	class... _Types>
	struct _Result_of
	{	
	};

template<class... _Types>
	struct _Result_of<
		void_t<
			_Unique_tag_result_of,	
			decltype(::std:: invoke(::std:: declval<_Types>()...))>,
		_Types...>
	{	
	typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
	};

template<class _Fty>
	struct result_of
	{	
	static_assert(_Always_false<_Fty>::value,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { };    template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type> >
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type> >
		: _Weak_result_type<_Ty>
	{	
	typedef typename _Ty::argument_type argument_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type> >
		: _Weak_argument_type<_Ty>
	{	
	typedef typename _Ty::first_argument_type first_argument_type;
	typedef typename _Ty::second_argument_type second_argument_type;
	};

template<class _Ty>
	struct _Weak_types
	{	
	typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
	typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
	typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty> >::type>::type type;
	};

	
template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
		"reference_wrapper<T> requires T to be an object type "
		"or a function type.");

	typedef _Ty type;

	reference_wrapper(_Ty& _Val) noexcept
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	_Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

	reference_wrapper(_Ty&&) = delete;

private:
	_Ty *_Ptr;
	};

	
template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	static constexpr bool _Is_refwrap = false;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	static constexpr bool _Is_refwrap = true;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
	};


namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		




#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty,
	class = void> inline
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

struct _Swappable_with_helper_unique_type {}; 
template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
		_Swappable_with_helper_unique_type,
		decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: conjunction<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
	{	
		
		

	static constexpr bool value = 
		noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
		&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));


#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	using type = bool_constant<value>;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: conjunction<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

































#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
	using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
	using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
	using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
	using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
	using result_of_t = typename result_of<_Ty>::type;

	
 
template<class _Ty>
	constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
	constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
	constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
	constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
	constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
	constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
	constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
	constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
	constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
	constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
	constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
	constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
	constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
	constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
	constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
	constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
	constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
	constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
	constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;






#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;






#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
	constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
	constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
	constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
	unsigned int _Ix = 0>
	constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
	class _Derived>
	constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
	class _To>
	constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
	constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
	constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
	constexpr bool negation_v = negation<_Trait>::value;
 #line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {

  


  



  




  


  #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

 bool __cdecl uncaught_exception() noexcept;
 int __cdecl uncaught_exceptions() noexcept;

}

 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





    


#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





     intptr_t __cdecl _get_heap_handle(void);

     
     int __cdecl _heapmin(void);

    
         int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    
           int __cdecl _heapchk(void);
         int __cdecl _resetstkoflw(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
     
    
    
    

    
        
    

#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
















    
    







#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




    
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








     __declspec(noreturn) void __cdecl abort();
     __declspec(noreturn) void __cdecl terminate() throw();

    

         terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

         terminate_handler __cdecl _get_terminate();

    #line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;


    
     __declspec(noreturn) void __cdecl unexpected() throw(...);

    

         unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) throw();

         unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

         _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

    class type_info;

     int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

     bool __cdecl __uncaught_exception();
     int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

 void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

 void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

} 

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

}

 




































































































































































#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"









#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

 void __cdecl __ExceptionPtrCreate(  void*);
 void __cdecl __ExceptionPtrDestroy(  void*);
 void __cdecl __ExceptionPtrCopy(  void*,   const void*);
 void __cdecl __ExceptionPtrAssign(  void*,   const void*);
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
 bool __cdecl __ExceptionPtrToBool(  const void*);
 void __cdecl __ExceptionPtrSwap(  void*,   void*);
 void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]]  void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() throw ()
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) throw ()
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) throw ()
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() throw ()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept = default;

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	::std:: exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	::std:: exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;
	typedef _With_nested<_Ty, _Uty> _Glued;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	typedef typename decay<_Ty>::type _Decayed;

	throw _Decayed(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;

	integral_constant<bool,
		is_class<_Uty>::value
		&& !is_base_of<nested_exception, _Uty>::value
		&& !is_final<_Uty>::value> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}

	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	integral_constant<bool,
		is_polymorphic<_Ty>::value
		&& (!is_base_of<nested_exception, _Ty>::value
			|| is_convertible<_Ty *, nested_exception *>::value)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






    namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();


    
       
    inline void* __cdecl operator new(size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


    
       
    inline void* __cdecl operator new[](size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"



#pragma warning(pop)
#pragma pack(pop)

} 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

 #pragma pack(push,8)
 #pragma warning(push,3)
 

  



namespace std {

		
 

typedef void (__cdecl * new_handler) ();
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

		
 new_handler __cdecl set_new_handler(  new_handler)
	noexcept;	

 new_handler __cdecl get_new_handler()
	noexcept;	
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"





#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"






#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*, void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"



#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
    


#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"























#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"




#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"


    


        #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
    #line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



















} __pragma(pack(pop))

#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 FILE* __cdecl __acrt_iob_func(unsigned);















 wint_t __cdecl fgetwc(
      FILE* _Stream
    );


 wint_t __cdecl _fgetwchar(void);


 wint_t __cdecl fputwc(
         wchar_t _Character,
      FILE*   _Stream);


 wint_t __cdecl _fputwchar(
      wchar_t _Character
    );

 
 wint_t __cdecl getwc(
      FILE* _Stream
    );

 
 wint_t __cdecl getwchar(void);



 
 wchar_t* __cdecl fgetws(
      wchar_t* _Buffer,
                              int      _BufferCount,
                           FILE*    _Stream
    );


 int __cdecl fputws(
       wchar_t const* _Buffer,
      FILE*          _Stream
    );


 
 wchar_t* __cdecl _getws_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(  wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


 wint_t __cdecl putwc(
         wchar_t _Character,
      FILE*   _Stream
    );


 wint_t __cdecl putwchar(
      wchar_t _Character
    );


 int __cdecl _putws(
      wchar_t const* _Buffer
    );


 wint_t __cdecl ungetwc(
         wint_t _Character,
      FILE*  _Stream
    );

 
 FILE * __cdecl _wfdopen(
        int            _FileHandle,
      wchar_t const* _Mode
    );

  
 FILE* __cdecl _wfopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode
    );


 errno_t __cdecl _wfopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode
    );

 

 FILE* __cdecl _wfreopen(
       wchar_t const* _FileName,
       wchar_t const* _Mode,
      FILE*          _OldStream
    );


 errno_t __cdecl _wfreopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode,
                        FILE*          _OldStream
    );

 
 FILE* __cdecl _wfsopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode,
        int            _ShFlag
    );

 void __cdecl _wperror(
      wchar_t const* _ErrorMessage
    );



     
     FILE* __cdecl _wpopen(
          wchar_t const* _Command,
          wchar_t const* _Mode
        );

#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 int __cdecl _wremove(
      wchar_t const* _FileName
    );




 
 __declspec(allocator) wchar_t* __cdecl _wtempnam(
      wchar_t const* _Directory,
      wchar_t const* _FilePrefix
    );



 

 errno_t __cdecl _wtmpnam_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

   wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









 wint_t __cdecl _fgetwc_nolock(
      FILE* _Stream
    );


 wint_t __cdecl _fputwc_nolock(
         wchar_t _Character, 
      FILE*   _Stream
    );


 wint_t __cdecl _getwc_nolock(
      FILE* _Stream
    );


 wint_t __cdecl _putwc_nolock(
         wchar_t _Character,
      FILE*   _Stream
    );


 wint_t __cdecl _ungetwc_nolock(
         wint_t _Character,
      FILE*  _Stream
    );





#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
















 int __cdecl __stdio_common_vfwprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


 int __cdecl __stdio_common_vfwprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


 int __cdecl __stdio_common_vfwprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl fwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl wprintf(
        wchar_t const* const _Format,
    ...)


#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wprintf_s(
            wchar_t const* const _Format,
        ...)


#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p(
        wchar_t const* const _Format,
    ...)


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"








 int __cdecl __stdio_common_vfwscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vfwscanf_l(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwscanf(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwscanf_s_l(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwscanf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__inline int __cdecl _vwscanf_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwscanf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwscanf_s_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwscanf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _fwscanf_l(
                                     FILE*          const _Stream,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl fwscanf(
                           FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwscanf_s_l(
                                       FILE*          const _Stream,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwscanf_s(
                                 FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _wscanf_l(
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl wscanf(
        wchar_t const* const _Format,
    ...)


#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wscanf_s_l(
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wscanf_s(
            wchar_t const* const _Format,
        ...)


#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









    





#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

 int __cdecl __stdio_common_vswprintf(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

 int __cdecl __stdio_common_vswprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

 int __cdecl __stdio_common_vsnwprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

 int __cdecl __stdio_common_vswprintf_p(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnwprintf_l(
           wchar_t*       const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
    )


#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4793)

 

__inline int __cdecl _vsnwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...);  __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 
 
__inline int __cdecl _vsnwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
                                             va_list        _ArgList
    )


#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __vswprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswprintf(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                            va_list              _ArgList
    )


#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl vswprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_l(_Format, 0, _ArgList);
}
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p(
        wchar_t const* const _Format, 
                                  va_list              _ArgList
    )


#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __swprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl swprintf(
               wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)


#pragma warning(disable:4793 4996)

 __inline   int __cdecl __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...);  __inline   int __cdecl __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...);  __inline   int __cdecl _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 

__inline int __cdecl _swprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl swprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
        ...)


#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwprintf_l(
        wchar_t*       const _Buffer,
                                          size_t         const _BufferCount,
         wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
    ...)


#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
    ...)


#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _scwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf(
        wchar_t const* const _Format,
    ...)


#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p(
        wchar_t const* const _Format,
    ...)


#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    #pragma warning(push)
    #pragma warning(disable: 4141 4412 4793 4996 6054)

    

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int swprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            #pragma warning(suppress: 28719)
            _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);       
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl vswprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            ) throw()
        {
            #pragma warning(suppress: 28719)
            return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int _swprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl _vswprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                    va_list              _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }

    #line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"






#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







 
 int __cdecl __stdio_common_vswscanf(
                                        unsigned __int64 _Options,
              wchar_t const*   _Buffer,
                                        size_t           _BufferCount,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );

 

__inline int __cdecl _vswscanf_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswscanf(
                             wchar_t const* _Buffer,
        wchar_t const* _Format,
                                  va_list        _ArgList
    )


#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswscanf_s_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl vswscanf_s(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vsnwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
                                           va_list              _ArgList
    )


#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
                                             va_list              _ArgList
    )


#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _swscanf_l(
                                      wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                    _locale_t            _Locale,
    ...)


#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
  
__inline int __cdecl swscanf(
                            wchar_t const* const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swscanf_s_l(
                                        wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl swscanf_s(
                                  wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)


#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);  
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf(
        wchar_t const* const _Buffer,
                                  size_t         const _BufferCount,
            wchar_t const* const _Format,
    ...)


#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s(
         wchar_t const* const _Buffer,
                                   size_t         const _BufferCount,
           wchar_t const* const _Format,
    ...)


#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







} __pragma(pack(pop))

#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"















    
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;




 errno_t __cdecl _get_stream_buffer_pointers(
           FILE*   _Stream,
      char*** _Base,
      char*** _Pointer,
      int**   _Count
    );









    
     errno_t __cdecl clearerr_s(
          FILE* _Stream
        );

    
     errno_t __cdecl fopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode
        );
    
    
     
     size_t __cdecl fread_s(
            void*  _Buffer,
                       size_t _BufferSize,
                                                                        size_t _ElementSize,
                                                                        size_t _ElementCount,
                                                                     FILE*  _Stream
        );
    
    
     errno_t __cdecl freopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode,
                            FILE*       _OldStream
        );

     
     char* __cdecl gets_s(
          char*   _Buffer,
                           rsize_t _Size
        );

    
     errno_t __cdecl tmpfile_s(
            FILE** _Stream
        );

     
    
     errno_t __cdecl tmpnam_s(
          char*   _Buffer,
                           rsize_t _Size
        );

#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 void __cdecl clearerr(
      FILE* _Stream
    );

 

 int __cdecl fclose(
      FILE* _Stream
    );


 int __cdecl _fcloseall(void);

 
 FILE* __cdecl _fdopen(
        int         _FileHandle,
      char const* _Mode
    );

 
 int __cdecl feof(
      FILE* _Stream
    );

 
 int __cdecl ferror(
      FILE* _Stream
    );


 int __cdecl fflush(
      FILE* _Stream
    );

 

 int __cdecl fgetc(
      FILE* _Stream
    );


 int __cdecl _fgetchar(void);

 

 int __cdecl fgetpos(
      FILE*   _Stream,
        fpos_t* _Position
    );

 

 char* __cdecl fgets(
      char* _Buffer,
                           int   _MaxCount,
                        FILE* _Stream
    );

 
 int __cdecl _fileno(
      FILE* _Stream
    );


 int __cdecl _flushall(void);

  
 FILE* __cdecl fopen(
      char const* _FileName,
      char const* _Mode
    );


 

 int __cdecl fputc(
         int   _Character,
      FILE* _Stream
    );


 int __cdecl _fputchar(
      int _Character
    );

 

 int __cdecl fputs(
       char const* _Buffer,
      FILE*       _Stream
    );


 size_t __cdecl fread(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );

 
  
 FILE* __cdecl freopen(
       char const* _FileName,
       char const* _Mode,
      FILE*       _Stream
    );

 
 FILE* __cdecl _fsopen(
      char const* _FileName,
      char const* _Mode,
        int         _ShFlag
    );

 

 int __cdecl fsetpos(
      FILE*         _Stream,
         fpos_t const* _Position
    );

 

 int __cdecl fseek(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );

 

 int __cdecl _fseeki64(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 
 long __cdecl ftell(
      FILE* _Stream
    );

 
 
 __int64 __cdecl _ftelli64(
      FILE* _Stream
    );


 size_t __cdecl fwrite(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );

 
 
 int __cdecl getc(
      FILE* _Stream
    );

 
 int __cdecl getchar(void);

 
 int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 int __cdecl _getw(
      FILE* _Stream
    );

 void __cdecl perror(
      char const* _ErrorMessage
    );



     
    
     int __cdecl _pclose(
          FILE* _Stream
        );

     
     FILE* __cdecl _popen(
          char const* _Command,
          char const* _Mode
        );

#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

 int __cdecl putc(
         int   _Character,
      FILE* _Stream
    );


 int __cdecl putchar(
      int _Character
    );


 int __cdecl puts(
      char const* _Buffer
    );

 

 int __cdecl _putw(
         int   _Word, 
      FILE* _Stream
    );



 int __cdecl remove(
      char const* _FileName
    );

 
 int __cdecl rename(
      char const* _OldFileName,
      char const* _NewFileName
    );

 int __cdecl _unlink(
      char const* _FileName
    );



    
     int __cdecl unlink(
          char const* _FileName
        );

#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



 void __cdecl rewind(
      FILE* _Stream
    );


 int __cdecl _rmtmp(void);


 void __cdecl setbuf(
                                                  FILE* _Stream,
        char* _Buffer
    );


 int __cdecl _setmaxstdio(
      int _Maximum
    );

 

 int __cdecl setvbuf(
                           FILE*  _Stream,
        char*  _Buffer,
                              int    _Mode,
                              size_t _Size
    );




#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 __declspec(allocator) char* __cdecl _tempnam(
      char const* _DirectoryName,
      char const* _FilePrefix
    );



#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
 FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

   char* __cdecl tmpnam(  char *_Buffer);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

 int __cdecl ungetc(
         int   _Character,
      FILE* _Stream
    );








 void __cdecl _lock_file(
      FILE* _Stream
    );

 void __cdecl _unlock_file(
      FILE* _Stream
    );

 

 int __cdecl _fclose_nolock(
      FILE* _Stream
    );

 

 int __cdecl _fflush_nolock(
      FILE* _Stream
    );

 

 int __cdecl _fgetc_nolock(
      FILE* _Stream
    );

 

 int __cdecl _fputc_nolock(
         int   _Character,
      FILE* _Stream
    );


 size_t __cdecl _fread_nolock(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );


 
 size_t __cdecl _fread_nolock_s(
      void*  _Buffer,
               size_t _BufferSize,
                                                                  size_t _ElementSize,
                                                                  size_t _ElementCount,
                                                               FILE*  _Stream
    );


 int __cdecl _fseek_nolock(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );


 int __cdecl _fseeki64_nolock(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 long __cdecl _ftell_nolock(
      FILE* _Stream
    );

 
 __int64 __cdecl _ftelli64_nolock(
      FILE* _Stream
    );


 size_t __cdecl _fwrite_nolock(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );


 int __cdecl _getc_nolock(
      FILE* _Stream
    );


 int __cdecl _putc_nolock(
         int   _Character,
      FILE* _Stream
    );


 int __cdecl _ungetc_nolock(
         int   _Character,
      FILE* _Stream
    );






















#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



 int* __cdecl __p__commode(void);




    
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






 int __cdecl __stdio_common_vfprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 int __cdecl __stdio_common_vfprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 int __cdecl __stdio_common_vfprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfprintf_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfprintf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_s_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vfprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vprintf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl fprintf(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 int __cdecl _set_printf_count_output(
      int _Value
    );

 int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl printf(
        char const* const _Format,
    ...)


#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl printf_s(
            char const* const _Format,
        ...)


#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p(
        char const* const _Format,
    ...)


#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







 int __cdecl __stdio_common_vfscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _Arglist
    );


__inline int __cdecl _vfscanf_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfscanf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfscanf_s_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"




    
    __inline int __cdecl vfscanf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vscanf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_s_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vscanf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _fscanf_l(
                                     FILE*       const _Stream,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl fscanf(
                           FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fscanf_s_l(
                                       FILE*       const _Stream,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fscanf_s(
                                 FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scanf_l(
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl scanf(
        char const* const _Format,
    ...)


#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scanf_s_l(
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl scanf_s(
            char const* const _Format,
        ...)


#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"








 
 int __cdecl __stdio_common_vsprintf(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 int __cdecl __stdio_common_vsprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 int __cdecl __stdio_common_vsnprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 int __cdecl __stdio_common_vsprintf_p(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
                                             va_list           _ArgList
    )


#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl vsnprintf(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _vsprintf_l(
        char*       const _Buffer,
                      char const* const _Format,
                    _locale_t   const _Locale,
                           va_list           _ArgList
    )


#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl vsprintf(
               char*       const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(  char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list          _ArgList
    )


#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsnprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
                                   size_t      const _MaxCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_l(_Format, 0, _ArgList);
}
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sprintf_l(
                         char*       const _Buffer,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl sprintf(
               char*       const _Buffer,
        char const* const _Format,
    ...)


#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4996)
   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...);    int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)

 

__inline int __cdecl _sprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl sprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
        ...)


#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _snprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl snprintf(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
    ...)


#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...);     int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
    ...)


#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf(
        char const* const _Format,
    ...)


#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf_p(
        char const* const _Format,
    ...)


#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






 int __cdecl __stdio_common_vsscanf(
                                        unsigned __int64 _Options,
              char const*      _Buffer,
                                        size_t           _BufferCount,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vsscanf_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vsscanf(
                             char const* const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsscanf_s_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    #pragma warning(push)
    #pragma warning(disable:6530)

    
    __inline int __cdecl vsscanf_s(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 2222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
   
    #pragma warning(pop)

#line 2233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sscanf_l(
                                      char const* const _Buffer,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl sscanf(
                            char const* const _Buffer,
        char const* const _Format,
    ...)


#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _sscanf_s_l(
                                        char const* const _Buffer,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl sscanf_s(
                                  char const* const _Buffer,
            char const* const _Format,
        ...)


#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = vsscanf_s(_Buffer, _Format, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 2316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable:6530)

 
__inline int __cdecl _snscanf_l(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snscanf(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                  char const* const _Format,
    ...)


#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__inline int __cdecl _snscanf_s_l(
          char const* const _Buffer,
                                          size_t      const _BufferCount,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _snscanf_s(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                char const* const _Format,
    ...)


#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(pop)



#line 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










    

    


#line 2436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    
     char* __cdecl tempnam(
          char const* _Directory,
          char const* _FilePrefix
        );

    

#line 2446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

       int   __cdecl fcloseall(void);
               FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
        int   __cdecl fgetchar(void);
               int   __cdecl fileno(  FILE* _Stream);
        int   __cdecl flushall(void);
        int   __cdecl fputchar(  int _Ch);
                 int   __cdecl getw(  FILE* _Stream);
            int   __cdecl putw(  int _Ch,   FILE* _Stream);
                int   __cdecl rmtmp(void);

#line 2458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



} __pragma(pack(pop))

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
extern "C"
{
extern


#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
            


#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl printf(const char*, ...);
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



extern


#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl fprintf(FILE*, const char*, ...);
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

extern  __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl malloc(size_t) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl free(void*) ;

}


#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











     void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

extern "C"
{






#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"


#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"








#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"


#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  void __cdecl _wassert(
  const wchar_t *, const wchar_t *, unsigned);
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"
}



















#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

















#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"



#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"









#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
























































#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"







extern "C"
{




















































#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"





#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int) ;


#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;


#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(unsigned long long int, unsigned long long int);



#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fminf(float x, float y);
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmin(double x, double y);
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(unsigned long long int, unsigned long long int);



#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaxf(float x, float y);
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmax(double, double);
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;


#line 443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;



#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;


#line 592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);



#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




















































#line 788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log2(double x);
#line 790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"






















#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl exp2(double x);
#line 815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"






















#line 838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl exp2f(float x);
#line 840 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;



#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










































#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl expm1(double x);
#line 936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










































#line 979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl expm1f(float x);
#line 981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




















































#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log2f(float x);
#line 1036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;






























































































#line 1253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log1p(double x);
#line 1255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"






























































































#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log1pf(float x);
#line 1352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl floor(double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;



































#line 1590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl acosh(double x);
#line 1592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



































#line 1628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl acoshf(float x);
#line 1630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 1644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl asinh(double x);
#line 1646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 1660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl asinhf(float x);
#line 1662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































#line 1714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl atanh(double x);
#line 1716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































#line 1768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl atanhf(float x);
#line 1770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ldexp(double x, int exp) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;




















































#line 1935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl logb(double x);
#line 1937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




















































#line 1990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl logbf(float x);
#line 1992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



























#line 2020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogb(double x);
#line 2022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



























#line 2050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogbf(float x);
#line 2052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"









































































#line 2126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbn(double x, int n);
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"









































































#line 2202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalbnf(float x, int n);
#line 2204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"









































































#line 2278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbln(double x, long int n);
#line 2280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"









































































#line 2354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalblnf(float x, long int n);
#line 2356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl frexp(double x, int *nptr) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;














#line 2521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl round(double x);
#line 2523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














#line 2538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl roundf(float x);
#line 2540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















#line 2556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lround(double x);
#line 2558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















#line 2574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lroundf(float x);
#line 2576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















#line 2592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llround(double x);
#line 2594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















#line 2610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llroundf(float x);
#line 2612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

































#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl rint(double x);
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 2649 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"












#line 2662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl rintf(float x);
#line 2664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 2678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrint(double x);
#line 2680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 2694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrintf(float x);
#line 2696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 2710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrint(double x);
#line 2712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 2726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrintf(float x);
#line 2728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















































#line 2779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nearbyint(double x);
#line 2781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















































#line 2832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nearbyintf(float x);
#line 2834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ceil(double x) ;












#line 2906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl trunc(double x);
#line 2908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"












#line 2921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl truncf(float x);
#line 2923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"























#line 2947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fdim(double x, double y);
#line 2949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"























#line 2973 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fdimf(float x, float y);
#line 2975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;









































#line 3136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double __cdecl hypot(double x, double y);
#line 3138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 3141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 3145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;



#line 3196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"







































static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl hypotf(float x, float y);


#line 3239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 3243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;











































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm3d(double a, double b, double c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rnorm3d(double a, double b, double c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm4d(double a, double b, double c, double d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm4d(double a, double b, double c, double d) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double norm(int dim, double const * t) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm(int dim, double const * t) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnormf(int dim, float const * a) ;











































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float normf(int dim, float const * a) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm3df(float a, float b, float c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm3df(float a, float b, float c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm4df(float a, float b, float c, float d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm4df(float a, float b, float c, float d) ;



#line 3887 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































































#line 3971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cbrt(double x);
#line 3973 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































































#line 4057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl cbrtf(float x);
#line 4059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 4062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);



#line 4449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;






















































































#line 4959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remainder(double x, double y);
#line 4961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"























































































#line 5049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remainderf(float x, float y);
#line 5051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































#line 5103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remquo(double x, double y, int *quo);
#line 5105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















































#line 5157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remquof(float x, float y, int *quo);
#line 5159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j0(double x) ;


#line 5200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;



#line 5243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j1(double x) ;


#line 5303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;



#line 5365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl jn(int n, double x) ;


#line 5407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;



#line 5451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y0(double x) ;


#line 5502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;



#line 5555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y1(double x) ;


#line 5606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;



#line 5659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl yn(int n, double x) ;


#line 5711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;



#line 5871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















































































#line 5951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erf(double x);
#line 5953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















































































#line 6033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erff(float x);
#line 6035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 6038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double y);
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float y);



#line 6157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



































#line 6193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erfc(double x);
#line 6195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



































#line 6231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erfcf(float x);
#line 6233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"





























































































































#line 6359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl lgamma(double x);
#line 6361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 6364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double y);























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float y);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);



#line 6833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


































































































































#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl lgammaf(float x);
#line 6966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










































































































#line 7073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl tgamma(double x);
#line 7075 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










































































































#line 7182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl tgammaf(float x);
#line 7184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










#line 7195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl copysign(double x, double y);
#line 7197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"










#line 7208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl copysignf(float x, float y);
#line 7210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


































#line 7245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nextafter(double x, double y);
#line 7247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


































#line 7282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nextafterf(float x, float y);
#line 7284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 7298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nan(const char *tagp);
#line 7300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













#line 7314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nanf(const char *tagp);
#line 7316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 7319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;








#line 7330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 7336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;



#line 7342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



























































































































































#line 7498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fma(double x, double y, double z);
#line 7500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



























































































































































#line 7656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaf(float x, float y, float z);
#line 7658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 7661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 7671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 7675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl acosf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl asinf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atanf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atan2f(float, float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl cosf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl coshf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinhf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanhf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl expf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl logf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl log10f(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl modff(float, float*) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl powf(float, float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sqrtf(float) ;         
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl ceilf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl floorf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl fmodf(float, float) ;










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

}


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"












__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
    #line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

typedef float float_t;
typedef double double_t;













    
        extern double const _HUGE;
    

#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


    
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


















































































void __cdecl _fperrraise(  int _Except);

   short __cdecl _dclass(  double _X);
   short __cdecl _ldclass(  long double _X);
   short __cdecl _fdclass(  float _X);

   int __cdecl _dsign(  double _X);
   int __cdecl _ldsign(  long double _X);
   int __cdecl _fdsign(  float _X);

   int __cdecl _dpcomp(  double _X,   double _Y);
   int __cdecl _ldpcomp(  long double _X,   long double _Y);
   int __cdecl _fdpcomp(  float _X,   float _Y);

   short __cdecl _dtest(  double* _Px);
   short __cdecl _ldtest(  long double* _Px);
   short __cdecl _fdtest(  float* _Px);

 short __cdecl _d_int(  double* _Px,   short _Xexp);
 short __cdecl _ld_int(  long double* _Px,   short _Xexp);
 short __cdecl _fd_int(  float* _Px,   short _Xexp);

 short __cdecl _dscale(  double* _Px,   long _Lexp);
 short __cdecl _ldscale(  long double* _Px,   long _Lexp);
 short __cdecl _fdscale(  float* _Px,   long _Lexp);

 short __cdecl _dunscale(  short* _Pex,   double* _Px);
 short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
 short __cdecl _fdunscale(  short* _Pex,   float* _Px);

   short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
   short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
   short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

   short __cdecl _dnorm(  unsigned short* _Ps);
   short __cdecl _fdnorm(  unsigned short* _Ps);

   double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
   long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
   float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

   double __cdecl _dlog(  double _X,   int _Baseflag);
   long double __cdecl _ldlog(  long double _X,   int _Baseflag);
   float __cdecl _fdlog(  float _X,   int _Baseflag);

   double __cdecl _dsin(  double _X,   unsigned int _Qoff);
   long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
   float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





  int       __cdecl abs(  int _X);
  long      __cdecl labs(  long _X);
  long long __cdecl llabs(  long long _X);

  double __cdecl acos(  double _X);
  double __cdecl asin(  double _X);
  double __cdecl atan(  double _X);
  double __cdecl atan2(  double _Y,   double _X);

  double __cdecl cos(  double _X);
  double __cdecl cosh(  double _X);
  double __cdecl exp(  double _X);
   double __cdecl fabs(  double _X);
  double __cdecl fmod(  double _X,   double _Y);
  double __cdecl log(  double _X);
  double __cdecl log10(  double _X);
  double __cdecl pow(  double _X,   double _Y);
  double __cdecl sin(  double _X);
  double __cdecl sinh(  double _X);
   double __cdecl sqrt(  double _X);
  double __cdecl tan(  double _X);
  double __cdecl tanh(  double _X);

   double    __cdecl acosh(  double _X);
   double    __cdecl asinh(  double _X);
   double    __cdecl atanh(  double _X);
    double    __cdecl atof(  char const* _String);
    double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
   double    __cdecl _cabs(  struct _complex _Complex_value);
   double    __cdecl cbrt(  double _X);
   double    __cdecl ceil(  double _X);
   double    __cdecl _chgsign(  double _X);
   double    __cdecl copysign(  double _Number,   double _Sign);
   double    __cdecl _copysign(  double _Number,   double _Sign);
   double    __cdecl erf(  double _X);
   double    __cdecl erfc(  double _X);
   double    __cdecl exp2(  double _X);
   double    __cdecl expm1(  double _X);
   double    __cdecl fdim(  double _X,   double _Y);
   double    __cdecl floor(  double _X);
   double    __cdecl fma(  double _X,   double _Y,   double _Z);
   double    __cdecl fmax(  double _X,   double _Y);
   double    __cdecl fmin(  double _X,   double _Y);
   double    __cdecl frexp(  double _X,   int* _Y);
   double    __cdecl hypot(  double _X,   double _Y);
   double    __cdecl _hypot(  double _X,   double _Y);
   int       __cdecl ilogb(  double _X);
   double    __cdecl ldexp(  double _X,   int _Y);
   double    __cdecl lgamma(  double _X);
   long long __cdecl llrint(  double _X);
   long long __cdecl llround(  double _X);
   double    __cdecl log1p(  double _X);
   double    __cdecl log2(  double _X);
   double    __cdecl logb(  double _X);
   long      __cdecl lrint(  double _X);
   long      __cdecl lround(  double _X);

int __cdecl _matherr(  struct _exception* _Except);

   double __cdecl modf(  double _X,   double* _Y);
   double __cdecl nan(  char const*);
   double __cdecl nearbyint(  double _X);
   double __cdecl nextafter(  double _X,   double _Y);
   double __cdecl nexttoward(  double _X,   long double _Y);
   double __cdecl remainder(  double _X,   double _Y);
   double __cdecl remquo(  double _X,   double _Y,   int* _Z);
   double __cdecl rint(  double _X);
   double __cdecl round(  double _X);
   double __cdecl scalbln(  double _X,   long _Y);
   double __cdecl scalbn(  double _X,   int _Y);
   double __cdecl tgamma(  double _X);
   double __cdecl trunc(  double _X);
   double __cdecl _j0(  double _X );
   double __cdecl _j1(  double _X );
   double __cdecl _jn(int _X,   double _Y);
   double __cdecl _y0(  double _X);
   double __cdecl _y1(  double _X);
   double __cdecl _yn(  int _X,   double _Y);

   float     __cdecl acoshf(  float _X);
   float     __cdecl asinhf(  float _X);
   float     __cdecl atanhf(  float _X);
   float     __cdecl cbrtf(  float _X);
   float     __cdecl _chgsignf(  float _X);
   float     __cdecl copysignf(  float _Number,   float _Sign);
   float     __cdecl _copysignf(  float _Number,   float _Sign);
   float     __cdecl erff(  float _X);
   float     __cdecl erfcf(  float _X);
   float     __cdecl expm1f(  float _X);
   float     __cdecl exp2f(  float _X);
   float     __cdecl fdimf(  float _X,   float _Y);
   float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
   float     __cdecl fmaxf(  float _X,   float _Y);
   float     __cdecl fminf(  float _X,   float _Y);
   float     __cdecl _hypotf(  float _X,   float _Y);
   int       __cdecl ilogbf(  float _X);
   float     __cdecl lgammaf(  float _X);
   long long __cdecl llrintf(  float _X);
   long long __cdecl llroundf(  float _X);
   float     __cdecl log1pf(  float _X);
   float     __cdecl log2f(  float _X);
   float     __cdecl logbf(  float _X);
   long      __cdecl lrintf(  float _X);
   long      __cdecl lroundf(  float _X);
   float     __cdecl nanf(  char const*);
   float     __cdecl nearbyintf(  float _X);
   float     __cdecl nextafterf(  float _X,   float _Y);
   float     __cdecl nexttowardf(  float _X,   long double _Y);
   float     __cdecl remainderf(  float _X,   float _Y);
   float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
   float     __cdecl rintf(  float _X);
   float     __cdecl roundf(  float _X);
   float     __cdecl scalblnf(  float _X,   long _Y);
   float     __cdecl scalbnf(  float _X,   int _Y);
   float     __cdecl tgammaf(  float _X);
   float     __cdecl truncf(  float _X);





#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

       float __cdecl _logbf(  float _X);
       float __cdecl _nextafterf(  float _X,   float _Y);
       int   __cdecl _finitef(  float _X);
       int   __cdecl _isnanf(  float _X);
       int   __cdecl _fpclassf(  float _X);

       int   __cdecl _set_FMA3_enable(  int _Flag);
       int   __cdecl _get_FMA3_enable(void);






#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





       float __cdecl acosf(  float _X);
       float __cdecl asinf(  float _X);
       float __cdecl atan2f(  float _Y,   float _X);
       float __cdecl atanf(  float _X);
       float __cdecl ceilf(  float _X);
       float __cdecl cosf(  float _X);
       float __cdecl coshf(  float _X);
       float __cdecl expf(  float _X);











































#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl fabsf(  float _X)
    {
        return (float)fabs(_X);
    }

#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



       float __cdecl floorf(  float _X);
       float __cdecl fmodf(  float _X,   float _Y);













#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

  __inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

  __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

  __inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}



       float  __cdecl log10f(  float _X);
       float  __cdecl logf(  float _X);
       float  __cdecl modff(  float _X,   float *_Y);
       float  __cdecl powf(  float _X,   float _Y);
       float  __cdecl sinf(  float _X);
       float  __cdecl sinhf(  float _X);
       float  __cdecl sqrtf(  float _X);
       float  __cdecl tanf(  float _X);
       float  __cdecl tanhf(  float _X);



















































#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

   long double __cdecl acoshl(  long double _X);

  __inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

   long double __cdecl asinhl(  long double _X);

  __inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

  __inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

   long double __cdecl atanhl(  long double _X);

  __inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

   long double __cdecl cbrtl(  long double _X);

  __inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

  __inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

   long double __cdecl copysignl(  long double _Number,   long double _Sign);

  __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

  __inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

  __inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

   long double __cdecl erfl(  long double _X);
   long double __cdecl erfcl(  long double _X);

  __inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

   long double __cdecl exp2l(  long double _X);
   long double __cdecl expm1l(  long double _X);

  __inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

   long double __cdecl fdiml(  long double _X,   long double _Y);

  __inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

   long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
   long double __cdecl fmaxl(  long double _X,   long double _Y);
   long double __cdecl fminl(  long double _X,   long double _Y);

  __inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

  __inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

   int __cdecl ilogbl(  long double _X);

  __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

   long double __cdecl lgammal(  long double _X);
   long long __cdecl llrintl(  long double _X);
   long long __cdecl llroundl(  long double _X);

  __inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

  __inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

   long double __cdecl log1pl(  long double _X);
   long double __cdecl log2l(  long double _X);
   long double __cdecl logbl(  long double _X);
   long __cdecl lrintl(  long double _X);
   long __cdecl lroundl(  long double _X);

  __inline long double __cdecl modfl(  long double _X,   long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

   long double __cdecl nanl(  char const*);
   long double __cdecl nearbyintl(  long double _X);
   long double __cdecl nextafterl(  long double _X,   long double _Y);
   long double __cdecl nexttowardl(  long double _X,   long double _Y);

  __inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

   long double __cdecl remainderl(  long double _X,   long double _Y);
   long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
   long double __cdecl rintl(  long double _X);
   long double __cdecl roundl(  long double _X);
   long double __cdecl scalblnl(  long double _X,   long _Y);
   long double __cdecl scalbnl(  long double _X,   int _Y);

  __inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

  __inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

  __inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

  __inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

  __inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

   long double __cdecl tgammal(  long double _X);
   long double __cdecl truncl(  long double _X);





#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

            double __cdecl j0(  double _X);
            double __cdecl j1(  double _X);
            double __cdecl jn(  int _X,   double _Y);
            double __cdecl y0(  double _X);
            double __cdecl y1(  double _X);
            double __cdecl yn(  int _X,   double _Y);
    #line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



#pragma warning(pop)
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


} __pragma(pack(pop))

#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"























#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 8832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#pragma once









 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 

  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

 #line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"






 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"


 
#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}








































template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
		&& ::std:: is_arithmetic<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"    double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"    double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"    double __cdecl atan2(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"    double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"    double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"    double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"    double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"    double __cdecl fabs(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C"    double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"    double __cdecl fmod(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"    double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"    double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"    double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"    double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"    double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"    double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

		









		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3> inline
	typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
	return (_Fma((type)_Left, (type)_Middle, (type)_Right));
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (_Remquo((type)_Left, (type)_Right, _Pquo));
	}

extern "C"    double __cdecl acosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C"    double __cdecl asinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C"    double __cdecl atanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C"    double __cdecl cbrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C"    double __cdecl copysign(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C"    double __cdecl erf(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C"    double __cdecl erfc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C"    double __cdecl expm1(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C"    double __cdecl exp2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C"    double __cdecl fdim(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C"    double __cdecl fmax(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C"    double __cdecl fmin(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C"    double __cdecl hypot(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C"    int __cdecl ilogb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C"    double __cdecl lgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C"    long long __cdecl llrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C"    long long __cdecl llround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C"    double __cdecl log1p(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C"    double __cdecl log2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C"    double __cdecl logb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C"    long __cdecl lrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C"    long __cdecl lround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C"    double __cdecl nearbyint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C"    double __cdecl nextafter(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C"    double __cdecl nexttoward(  double,   long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C"    double __cdecl remainder(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C"    double __cdecl rint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C"    double __cdecl round(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C"    double __cdecl scalbln(  double,   long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C"    double __cdecl scalbn(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C"    double __cdecl tgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C"    double __cdecl trunc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
 #line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"





#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 
namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
 #line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"





#line 8836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 8838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 8839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

























#line 8865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




































































































































































































#line 9062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  float  __cdecl _hypotf(float x, float y);



#line 9069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




#line 9074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(long double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _ldsign(long double);

#line 9078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















#line 9098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"





#line 9104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _dsign(double);


#line 9123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"





#line 9149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _fdsign(float);


#line 9168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 9172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a);
#line 9174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















#line 9193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a);

#line 9210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















#line 9230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a);

#line 9248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 9252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a);
#line 9254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

















#line 9272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a);

#line 9288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















#line 9307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a);

#line 9324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 9328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a);
#line 9330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



















#line 9350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a);

#line 9368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















#line 9387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a);

#line 9404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"




#line 9409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int) throw();
#line 9412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 9414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"









#line 9424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 9427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"











#line 9439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"











































#line 9485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int) throw();


#line 9489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float) throw();






















#line 9519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl pow(double, int) throw();
#line 9523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
#line 9524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float) throw();
#line 9542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"












#line 9555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


#line 9558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 9562 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 9564 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"













































































































































































































#line 9770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl logb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) int   __cdecl ilogb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbn(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbln(float, long int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl exp2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl expm1(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log1p(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl acosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl asinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl atanh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl hypot(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm3d(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm4d(float, float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl cbrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erf(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erfc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl lgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl tgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl copysign(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl nextafter(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remainder(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remquo(float, float, int *) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl round(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl trunc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl rint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl nearbyint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fdim(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fma(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmax(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmin(float, float) throw();
#line 9806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float exp10(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rsqrt(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rcbrt(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float sinpi(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float cospi(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincospi(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincos(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j0(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j1(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float jn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y0(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y1(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float yn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i0(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i1(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfinv(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcinv(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdfinv(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdf(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcx(float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(double a, float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(float a, double b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int min(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int min(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float min(float a, float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(double a, double b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(float a, double b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(double a, float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int max(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int max(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float max(float a, float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(double a, double b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(float a, double b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(double a, float b);









#line 9920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"


















































































































































































































































































#line 10195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"


































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"

























































#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"











































































































































































































































#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
















#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a)
{

  return (__isinfl(a) != 0);


#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a)
{

  return (__isinf(a) != 0);


#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a)
{

  return (__isinff(a) != 0);


#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a)
{

  return (__isnanl(a) != 0);


#line 442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a)
{

  return (__isnan(a) != 0);


#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a)
{

  return (__isnanf(a) != 0);


#line 474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a)
{

  return (__finitel(a) != 0);


#line 490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a)
{

  return (__finite(a) != 0);


#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"






#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a)
{

  return (__finitef(a) != 0);


#line 522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
}
#line 524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"

#line 526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"



#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"

#line 532 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"




































































































































































































#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) float exp10(float a)
{
  return exp10f(a);
}

static inline __declspec(__host__) __declspec(__device__) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float sinpi(float a)
{
  return sinpif(a);
}

static inline __declspec(__host__) __declspec(__device__) float cospi(float a)
{
  return cospif(a);
}

static inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) float j0(float a)
{
  return j0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float j1(float a)
{
  return j1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float y0(float a)
{
  return y0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float y1(float a)
{
  return y1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float yn(int n, float a)
{ 
  return ynf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdf(float a)
{
  return normcdff(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(float a, double b)
{
  return copysign((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int min(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 907 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int max(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 1008 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 1027 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, float b)
{
  return fmax(a, (double)b);
}


























































#line 1131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"









#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"

#line 3336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.hpp"


#line 10199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 10201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 10203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\math_functions.h"

#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/common_functions.h"

#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\common_functions.h"
#line 116 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"







template<class T, int dim = 1>
struct __declspec(__device_builtin_surface_type__) surface : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __declspec(__host__) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
};

template<int dim>
struct  __declspec(__device_builtin_surface_type__)  surface<void, dim> : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
};

#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"

#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
#line 117 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"







template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __declspec(__device_builtin_texture_type__) texture : public textureReference
{

  __declspec(__host__) texture(int                         norm  = 0,
                   enum cudaTextureFilterMode  fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = cudaCreateChannelDesc<T>();
    sRGB           = 0;
  }

  __declspec(__host__) texture(int                          norm,
                   enum cudaTextureFilterMode   fMode,
                   enum cudaTextureAddressMode  aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = desc;
    sRGB           = 0;
  }
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
};

#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"

#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
#line 118 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_functions.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"







extern "C"
{









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int_as_float(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float_as_int(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint_as_float(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float_as_uint(float x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __syncthreads(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __prof_trigger(int);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence_block(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __trap(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __brkpt(int c = 0);






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  fdividef(float x, float y);










































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;













__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;

















































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;

























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;



























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;











































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;










































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_ru(float);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clz(int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffs(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clzll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __hadd(int, int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __rhadd(int, int);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int, unsigned int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int, unsigned int);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __double2int_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __double2ll_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm0(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm1(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm2(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm3(void);







 

















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mulhi(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) long long int mul64hi(long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float_as_int(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int_as_float(int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float_as_uint(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint_as_float(unsigned int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float saturate(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mul24(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int umul24(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);




#line 3251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"








#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"








static __inline __declspec(__device__) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline __declspec(__device__) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline __declspec(__device__) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline __declspec(__device__) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline __declspec(__device__) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline __declspec(__device__) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline __declspec(__device__) float saturate(float a)
{
  return __saturatef(a);
}

static __inline __declspec(__device__) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline __declspec(__device__) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline __declspec(__device__) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf  ? __float2int_ru(a) :
         mode == cudaRoundMinInf  ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline __declspec(__device__) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf  ? __float2uint_ru(a) :
         mode == cudaRoundMinInf  ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline __declspec(__device__) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline __declspec(__device__) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}




#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"







#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_functions.hpp"

#line 3260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 3261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"


extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAdd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicExch(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) float        __fAtomicExch(float *address, float val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMin(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMax(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAnd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicOr(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicXor(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicCAS(int *address, int compare, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);
}
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"







static __inline __declspec(__device__) int atomicAdd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicSub(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicExch(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) float atomicExch(float *address, float val) ;

static __inline __declspec(__device__) int atomicMin(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicMax(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicAnd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicOr(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicXor(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val) ;

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"







#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"




#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"

#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"

extern "C"
{

extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__any""() is deprecated in favor of ""__any""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__all""() is deprecated in favor of ""__all""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __all(int cond);
}








static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline __declspec(__device__) __declspec(deprecated("__any""() is deprecated in favor of ""__any""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) bool any(bool cond) ;

static __inline __declspec(__device__) __declspec(deprecated("__all""() is deprecated in favor of ""__all""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) bool all(bool cond) ;




#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline __declspec(__device__) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline __declspec(__device__) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline __declspec(__device__) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline __declspec(__device__) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline __declspec(__device__) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline __declspec(__device__) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline __declspec(__device__) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline __declspec(__device__) bool all(bool cond)
{
  return (bool)__all((int)cond);
}

#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.hpp"

#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"

#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_atomic_functions.h"
#line 3263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"

extern "C"
{








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);
}







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);



#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\host_defines.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}



#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"

#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.hpp"

#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"
#line 1170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"

#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\device_double_functions.h"

#line 3264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"



extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) float __fAtomicAdd(float *address, float val);
}
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"







static __inline __declspec(__device__) float atomicAdd(float *address, float val) ;

#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"







static __inline __declspec(__device__) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}

#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"



#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.hpp"

#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"

#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_atomic_functions.h"
#line 3265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"































































#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"

#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"






































































#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"

#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.hpp"

#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"

#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"
#line 3266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_atomic_functions.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"



































































































































#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_atomic_functions.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_atomic_functions.h"
#line 3267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"





















































































































































































































































































































































































































































































#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"

#line 531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"















































































































































































































































































































































































































































































#line 522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"

#line 524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"



#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.hpp"

#line 537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"
#line 538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"

#line 540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_60_atomic_functions.h"

#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"





#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"







#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"




#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"

#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__ballot""() is deprecated in favor of ""__ballot""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);






extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rn(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rz(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_ru(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rd(float, float, float);











extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);


}






static __inline __declspec(__device__) __declspec(deprecated("__ballot""() is deprecated in favor of ""__ballot""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int ballot(bool pred) ;

static __inline __declspec(__device__) int syncthreads_count(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_and(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_or(bool pred) ;






static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr) ;

#line 1500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"







static __inline __declspec(__device__) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline __declspec(__device__) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));


#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"

    return ret;
}

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"



#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.hpp"

#line 1506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"
#line 1507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"
#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_20_intrinsics.h"

#line 3269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"





#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"












#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"







#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"




#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline unsigned  __fns(unsigned mask, unsigned base, int offset) ;
static __declspec(__device__) __inline void  __barrier_sync(unsigned id) ;
static __declspec(__device__) __inline void  __barrier_sync_count(unsigned id, unsigned cnt) ;
static __declspec(__device__) __inline void  __syncwarp(unsigned mask=0xFFFFFFFF) ;
static __declspec(__device__) __inline int __all_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline int __any_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline int __uni_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline unsigned __ballot_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline unsigned __activemask() ;







static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl(int var, int srcLane, int width=32) ;
static __declspec(__device__) __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl(unsigned int var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_up(int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_down(int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_xor(int var, int laneMask, int width=32) ;
static __declspec(__device__) __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl(float var, int srcLane, int width=32) ;
static __declspec(__device__) __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_up(float var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_down(float var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_xor(float var, int laneMask, int width=32) ;
static __declspec(__device__) __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width=32) ;


static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl(long long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl(unsigned long long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_up(long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_down(long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_xor(long long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl(double var, int srcLane, int width=32) ;
static __declspec(__device__) __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_up(double var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_down(double var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_xor(double var, int laneMask, int width=32) ;
static __declspec(__device__) __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width=32) ;



static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl(long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl(unsigned long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_up(long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_down(long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_xor(long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width=32) ;







#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"



extern "C"
{
}











#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"

static __declspec(__device__) __inline
unsigned __fns(unsigned mask, unsigned base, int offset) {
  extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __nvvm_fns(unsigned int mask, unsigned int base, int offset);
  return __nvvm_fns(mask, base, offset);
}

static __declspec(__device__) __inline 
void  __barrier_sync(unsigned id) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_barrier_sync(unsigned id);
  return __nvvm_barrier_sync(id);
}

static __declspec(__device__) __inline 
void  __barrier_sync_count(unsigned id, unsigned cnt) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_barrier_sync_cnt(unsigned id, unsigned cnt);
  return __nvvm_barrier_sync_cnt(id, cnt);
}

static __declspec(__device__) __inline 
void  __syncwarp(unsigned mask) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_bar_warp_sync(unsigned mask);
  return __nvvm_bar_warp_sync(mask);
}

static __declspec(__device__) __inline 
int __all_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_all_sync(unsigned int mask, int pred); 
  return __nvvm_vote_all_sync(mask, pred);
}

static __declspec(__device__) __inline 
int __any_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_any_sync(unsigned int mask, int pred); 
  return __nvvm_vote_any_sync(mask, pred);
}

static __declspec(__device__) __inline 
int __uni_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_uni_sync(unsigned int mask, int pred); 
  return __nvvm_vote_uni_sync(mask, pred);
}

static __declspec(__device__) __inline 
unsigned __ballot_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __nvvm_vote_ballot_sync(unsigned int mask, int pred); 
  return __nvvm_vote_ballot_sync(mask, pred);
}

static __declspec(__device__) __inline
unsigned __activemask() {
    unsigned ret;
    int predicate = 1;
    asm volatile ("{ .reg .pred p; setp.ne.u32 p, %1, 0; vote.ballot.b32 %0, p; } " : "=r"(ret) : "r"(predicate));
    return ret;
}






static __declspec(__device__) __inline int __shfl(int var, int srcLane, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, var, srcLane, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl(unsigned int var, int srcLane, int width) {
	return (unsigned int) __shfl((int)var, srcLane, width);
}

static __declspec(__device__) __inline unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width) {
        return (unsigned int) __shfl_sync(mask, (int)var, srcLane, width);
}

static __declspec(__device__) __inline int __shfl_up(int var, unsigned int delta, int width) {
	int ret;
	int c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = (32-width) << 8;
        ret = __nvvm_shfl_up_sync(mask, var, delta, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {
	return (unsigned int) __shfl_up((int)var, delta, width);
}

static __declspec(__device__) __inline unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_up_sync(mask, (int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_down(int var, unsigned int delta, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, var, delta, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {
	return (unsigned int) __shfl_down((int)var, delta, width);
}

static __declspec(__device__) __inline unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_down_sync(mask, (int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_xor(int var, int laneMask, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, var, laneMask, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {
	return (unsigned int) __shfl_xor((int)var, laneMask, width);
}

static __declspec(__device__) __inline unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width) {
	return (unsigned int) __shfl_xor_sync(mask, (int)var, laneMask, width);
}

static __declspec(__device__) __inline float __shfl(float var, int srcLane, int width) {
	float ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
        int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, __float_as_int(var), srcLane, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_up(float var, unsigned int delta, int width) {
	float ret;
        int c;
	c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = (32-width) << 8;
        ret = __nvvm_shfl_up_sync(mask, __float_as_int(var), delta, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_down(float var, unsigned int delta, int width) {
	float ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, __float_as_int(var), delta, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_xor(float var, int laneMask, int width) {
	float ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, __float_as_int(var), laneMask, c);
	return __int_as_float(ret);
}


static __declspec(__device__) __inline long long __shfl(long long var, int srcLane, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl(hi, srcLane, width);
	lo = __shfl(lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_sync(mask, hi, srcLane, width);
	lo = __shfl_sync(mask, lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl(unsigned long long var, int srcLane, int width) {
	return (unsigned long long) __shfl((long long) var, srcLane, width);
}

static __declspec(__device__) __inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width) {
        return (unsigned long long) __shfl_sync(mask, (long long) var, srcLane, width);
}

static __declspec(__device__) __inline long long __shfl_up(long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_up(hi, delta, width);
	lo = __shfl_up(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_up_sync(mask, hi, delta, width);
	lo = __shfl_up_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {
	return (unsigned long long) __shfl_up((long long) var, delta, width);
}

static __declspec(__device__) __inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_up_sync(mask, (long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_down(long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_down(hi, delta, width);
	lo = __shfl_down(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_down_sync(mask, hi, delta, width);
	lo = __shfl_down_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {
	return (unsigned long long) __shfl_down((long long) var, delta, width);
}

static __declspec(__device__) __inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_down_sync(mask, (long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_xor(long long var, int laneMask, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_xor(hi, laneMask, width);
	lo = __shfl_xor(lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_xor_sync(mask, hi, laneMask, width);
	lo = __shfl_xor_sync(mask, lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {
	return (unsigned long long) __shfl_xor((long long) var, laneMask, width);
}

static __declspec(__device__) __inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width) {
        return (unsigned long long) __shfl_xor_sync(mask, (long long) var, laneMask, width);
}

static __declspec(__device__) __inline double __shfl(double var, int srcLane, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl(hi, srcLane, width);
	lo = __shfl(lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_sync(mask, hi, srcLane, width);
	lo = __shfl_sync(mask, lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}


static __declspec(__device__) __inline double __shfl_up(double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_up(hi, delta, width);
	lo = __shfl_up(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_up_sync(mask, hi, delta, width);
	lo = __shfl_up_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_down(double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_down(hi, delta, width);
	lo = __shfl_down(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_down_sync(mask, hi, delta, width);
	lo = __shfl_down_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_xor(double var, int laneMask, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_xor(hi, laneMask, width);
	lo = __shfl_xor(lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_xor_sync(mask, hi, laneMask, width);
	lo = __shfl_xor_sync(mask, lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}



static __declspec(__device__) __inline long __shfl(long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl((long long) var, srcLane, width) :
		__shfl((int) var, srcLane, width);
}

static __declspec(__device__) __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (long long) var, srcLane, width) :
		__shfl_sync(mask, (int) var, srcLane, width);
}

static __declspec(__device__) __inline unsigned long __shfl(unsigned long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl((unsigned long long) var, srcLane, width) :
		__shfl((unsigned int) var, srcLane, width);
}

static __declspec(__device__) __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (unsigned long long) var, srcLane, width) :
		__shfl_sync(mask, (unsigned int) var, srcLane, width);
}

static __declspec(__device__) __inline long __shfl_up(long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up((long long) var, delta, width) :
		__shfl_up((int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up_sync(mask, (long long) var, delta, width) :
		__shfl_up_sync(mask, (int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up((unsigned long long) var, delta, width) :
		__shfl_up((unsigned int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up_sync(mask, (unsigned long long) var, delta, width) :
		__shfl_up_sync(mask, (unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_down(long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down((long long) var, delta, width) :
		__shfl_down((int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down_sync(mask, (long long) var, delta, width) :
		__shfl_down_sync(mask, (int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down((unsigned long long) var, delta, width) :
		__shfl_down((unsigned int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down_sync(mask, (unsigned long long) var, delta, width) :
		__shfl_down_sync(mask, (unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_xor(long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor((long long) var, laneMask, width) :
		__shfl_xor((int) var, laneMask, width);
}

static __declspec(__device__) __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor_sync(mask, (long long) var, laneMask, width) :
		__shfl_xor_sync(mask, (int) var, laneMask, width);
}

static __declspec(__device__) __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor((unsigned long long) var, laneMask, width) :
		__shfl_xor((unsigned int) var, laneMask, width);
}

static __declspec(__device__) __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor_sync(mask, (unsigned long long) var, laneMask, width) :
		__shfl_xor_sync(mask, (unsigned int) var, laneMask, width);
}




#line 592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"

#line 594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"

#line 596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"



#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.hpp"

#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"

#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_30_intrinsics.h"
#line 3270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"


























































































































































































#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"

#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"
































































































































































































































































#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"

#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"



#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.hpp"


#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"

#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"
#line 3271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_intrinsics.h"














































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"





























































































































































































































































#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_intrinsics.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_35_intrinsics.h"

#line 3272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"
























































#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"


































































































#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"

#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.hpp"

#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"

#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\sm_61_intrinsics.h"
#line 3273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"











































#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"

#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"




































































































#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"

#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"



#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.hpp"

#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"

#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt\\sm_70_rt.h"
#line 3274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"









































































































#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"


template <typename T> struct __nv_surf_trait {  typedef void * cast_type; };

template<> struct __nv_surf_trait<char> {  typedef char * cast_type; };
template<> struct __nv_surf_trait<signed char> {  typedef signed char * cast_type; };
template<> struct __nv_surf_trait<unsigned char> {  typedef unsigned char * cast_type; };
template<> struct __nv_surf_trait<char1> {  typedef char1 * cast_type; };
template<> struct __nv_surf_trait<uchar1> {  typedef uchar1 * cast_type; };
template<> struct __nv_surf_trait<char2> {  typedef char2 * cast_type; };
template<> struct __nv_surf_trait<uchar2> {  typedef uchar2 * cast_type; };
template<> struct __nv_surf_trait<char4> {  typedef char4 * cast_type; };
template<> struct __nv_surf_trait<uchar4> {  typedef uchar4 * cast_type; };
template<> struct __nv_surf_trait<short> {  typedef short * cast_type; };
template<> struct __nv_surf_trait<unsigned short> {  typedef unsigned short * cast_type; };
template<> struct __nv_surf_trait<short1> {  typedef short1 * cast_type; };
template<> struct __nv_surf_trait<ushort1> {  typedef ushort1 * cast_type; };
template<> struct __nv_surf_trait<short2> {  typedef short2 * cast_type; };
template<> struct __nv_surf_trait<ushort2> {  typedef ushort2 * cast_type; };
template<> struct __nv_surf_trait<short4> {  typedef short4 * cast_type; };
template<> struct __nv_surf_trait<ushort4> {  typedef ushort4 * cast_type; };
template<> struct __nv_surf_trait<int> {  typedef int * cast_type; };
template<> struct __nv_surf_trait<unsigned int> {  typedef unsigned int * cast_type; };
template<> struct __nv_surf_trait<int1> {  typedef int1 * cast_type; };
template<> struct __nv_surf_trait<uint1> {  typedef uint1 * cast_type; };
template<> struct __nv_surf_trait<int2> {  typedef int2 * cast_type; };
template<> struct __nv_surf_trait<uint2> {  typedef uint2 * cast_type; };
template<> struct __nv_surf_trait<int4> {  typedef int4 * cast_type; };
template<> struct __nv_surf_trait<uint4> {  typedef uint4 * cast_type; };
template<> struct __nv_surf_trait<long long> {  typedef long long * cast_type; };
template<> struct __nv_surf_trait<unsigned long long> {  typedef unsigned long long * cast_type; };
template<> struct __nv_surf_trait<longlong1> {  typedef longlong1 * cast_type; };
template<> struct __nv_surf_trait<ulonglong1> {  typedef ulonglong1 * cast_type; };
template<> struct __nv_surf_trait<longlong2> {  typedef longlong2 * cast_type; };
template<> struct __nv_surf_trait<ulonglong2> {  typedef ulonglong2 * cast_type; };

template<> struct __nv_surf_trait<long> {  typedef int * cast_type; };
template<> struct __nv_surf_trait<unsigned long> {  typedef unsigned int * cast_type; };
template<> struct __nv_surf_trait<long1> {  typedef int1 * cast_type; };
template<> struct __nv_surf_trait<ulong1> {  typedef uint1 * cast_type; };
template<> struct __nv_surf_trait<long2> {  typedef int2 * cast_type; };
template<> struct __nv_surf_trait<ulong2> {  typedef uint2 * cast_type; };
template<> struct __nv_surf_trait<long4> {  typedef uint4 * cast_type; };
template<> struct __nv_surf_trait<ulong4> {  typedef int4 * cast_type; };
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
template<> struct __nv_surf_trait<float> {  typedef float * cast_type; };
template<> struct __nv_surf_trait<float1> {  typedef float1 * cast_type; };
template<> struct __nv_surf_trait<float2> {  typedef float2 * cast_type; };
template<> struct __nv_surf_trait<float4> {  typedef float4 * cast_type; };
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"

template <typename T>
static __declspec(__device__)  __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dread_v2", (void *)res, s, surf, x, mode);
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, mode);
  return temp;
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}
  
template<class T>
static __declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dread_v2", (void *)res, s, surf, x, y, mode);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, mode);
  return temp;
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dread_v2", (void *)res, s, surf, x, y, z, mode);
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf3Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, z, mode);
  return temp;
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}



template <typename T>
static __declspec(__device__)  __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredread_v2", (void *)res, s, surf, x,  layer, mode);
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, layer, mode);
  return temp;
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x,  int y, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredread_v2", (void *)res, s, surf, x, y, layer, mode);
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layer, mode);
  return temp;
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x,  int y, int  face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapread_v2", (void *)res, s, surf, x, y, face, mode);
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;

  __nv_tex_surf_handler("__surfCubemapread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, face, mode);
  return temp;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x,  int y, int  layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (void *)res, s, surf, x, y, layerFace, mode);
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline  T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layerFace, mode);
  return temp;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (void *)&val, s, surf, x, mode);
#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x,  mode);
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}



template<class T>
static __declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (void *)&val,  s, surf, x, y, mode);
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y,  mode);
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (void *)&val,  s, surf, x, y, z,mode);
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, z,  mode);
#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (void *)&val,  s, surf, x, layer,mode);
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val,  (int)sizeof(T), surf, x, layer, mode);
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (void *)&val, s, surf, x, y, layer,mode);
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val,  (int)sizeof(T), surf, x, y, layer, mode);
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}


template<class T>
static __declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (void *)&val, s, surf, x, y, face, mode);
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, face,  mode);
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}



template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (void *)&val, s, surf, x, y, layerFace,  mode);
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, layerFace,  mode);
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
}

#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_functions.h"
#line 3275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"





























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"















































































































#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\cuda_texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"


template <typename T>
struct __nv_tex_rmet_ret { };

template<> struct __nv_tex_rmet_ret<char> { typedef char type; };
template<> struct __nv_tex_rmet_ret<signed char> { typedef signed char type; };
template<> struct __nv_tex_rmet_ret<unsigned char> { typedef unsigned char type; };
template<> struct __nv_tex_rmet_ret<char1> { typedef char1 type; };
template<> struct __nv_tex_rmet_ret<uchar1> { typedef uchar1 type; };
template<> struct __nv_tex_rmet_ret<char2> { typedef char2 type; };
template<> struct __nv_tex_rmet_ret<uchar2> { typedef uchar2 type; };
template<> struct __nv_tex_rmet_ret<char4> { typedef char4 type; };
template<> struct __nv_tex_rmet_ret<uchar4> { typedef uchar4 type; };

template<> struct __nv_tex_rmet_ret<short> { typedef short type; };
template<> struct __nv_tex_rmet_ret<unsigned short> { typedef unsigned short type; };
template<> struct __nv_tex_rmet_ret<short1> { typedef short1 type; };
template<> struct __nv_tex_rmet_ret<ushort1> { typedef ushort1 type; };
template<> struct __nv_tex_rmet_ret<short2> { typedef short2 type; };
template<> struct __nv_tex_rmet_ret<ushort2> { typedef ushort2 type; };
template<> struct __nv_tex_rmet_ret<short4> { typedef short4 type; };
template<> struct __nv_tex_rmet_ret<ushort4> { typedef ushort4 type; };

template<> struct __nv_tex_rmet_ret<int> { typedef int type; };
template<> struct __nv_tex_rmet_ret<unsigned int> { typedef unsigned int type; };
template<> struct __nv_tex_rmet_ret<int1> { typedef int1 type; };
template<> struct __nv_tex_rmet_ret<uint1> { typedef uint1 type; };
template<> struct __nv_tex_rmet_ret<int2> { typedef int2 type; };
template<> struct __nv_tex_rmet_ret<uint2> { typedef uint2 type; };
template<> struct __nv_tex_rmet_ret<int4> { typedef int4 type; };
template<> struct __nv_tex_rmet_ret<uint4> { typedef uint4 type; };


template<> struct __nv_tex_rmet_ret<long> { typedef long type; };
template<> struct __nv_tex_rmet_ret<unsigned long> { typedef unsigned long type; };
template<> struct __nv_tex_rmet_ret<long1> { typedef long1 type; };
template<> struct __nv_tex_rmet_ret<ulong1> { typedef ulong1 type; };
template<> struct __nv_tex_rmet_ret<long2> { typedef long2 type; };
template<> struct __nv_tex_rmet_ret<ulong2> { typedef ulong2 type; };
template<> struct __nv_tex_rmet_ret<long4> { typedef long4 type; };
template<> struct __nv_tex_rmet_ret<ulong4> { typedef ulong4 type; };
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret<float> { typedef float type; };
template<> struct __nv_tex_rmet_ret<float1> { typedef float1 type; };
template<> struct __nv_tex_rmet_ret<float2> { typedef float2 type; };
template<> struct __nv_tex_rmet_ret<float4> { typedef float4 type; };


template <typename T> struct __nv_tex_rmet_cast { typedef T* type;  };

template<> struct __nv_tex_rmet_cast<long> { typedef int *type; };
template<> struct __nv_tex_rmet_cast<unsigned long> { typedef unsigned int *type; };
template<> struct __nv_tex_rmet_cast<long1> { typedef int1 *type; };
template<> struct __nv_tex_rmet_cast<ulong1> { typedef uint1 *type; };
template<> struct __nv_tex_rmet_cast<long2> { typedef int2 *type; };
template<> struct __nv_tex_rmet_cast<ulong2> { typedef uint2 *type; };
template<> struct __nv_tex_rmet_cast<long4> { typedef int4 *type; };
template<> struct __nv_tex_rmet_cast<ulong4> { typedef uint4 *type; };
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"

template <typename T>
static __forceinline __declspec(__device__)  typename __nv_tex_rmet_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeElementType> t, int x)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1Dfetch_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x);
  return temp;
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
struct __nv_tex_rmnf_ret { };

template <> struct __nv_tex_rmnf_ret<char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<signed char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<char1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<uchar1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<short1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<ushort1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<char2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<uchar2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<short2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<ushort2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<char4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<uchar4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<short4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeNormalizedFloat> t, int x) 
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1Dfetch_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeElementType> t, float x)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x);
  return temp;
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1D_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeElementType> t, float x, float y)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;

  __nv_tex_surf_handler("__tex2D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y);
  return temp;
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2D_rmnf_v2", &type_dummy, &retval, t, x, y);
  return retval;
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, layer);
  return temp;
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayered_rmnf_v2", &type_dummy, &retval, t, x, layer);
  return retval;
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, layer);
  return temp;
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayered_rmnf_v2", &type_dummy, &retval, t, x, y, layer);
  return retval;
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3D_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemap_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemap_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
struct __nv_tex2dgather_ret { };
template <> struct __nv_tex2dgather_ret<char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<signed char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char1> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char2> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char3> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char4> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<unsigned char> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar1> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar2> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar3> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar4> { typedef uchar4 type; };

template <> struct __nv_tex2dgather_ret<short> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short1> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short2> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short3> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short4> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<unsigned short> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort1> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort2> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort3> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort4> { typedef ushort4 type; };

template <> struct __nv_tex2dgather_ret<int> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int1> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int2> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int3> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int4> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<unsigned int> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint1> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint2> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint3> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint4> { typedef uint4 type; };

template <> struct __nv_tex2dgather_ret<float> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float1> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float2> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float3> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float4> { typedef float4 type; };

template <typename T>
static __declspec(__device__) __forceinline typename __nv_tex2dgather_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, int comp=0)
{ 

  T type_dummy;
  typename __nv_tex2dgather_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2Dgather_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;
#line 357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template<typename T> struct __nv_tex2dgather_rmnf_ret { };
template<> struct __nv_tex2dgather_rmnf_ret<char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __declspec(__device__) __forceinline  typename __nv_tex2dgather_rmnf_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{  

  T type_dummy;
  typename __nv_tex2dgather_rmnf_ret<T>::type  retval;
  __nv_tex_surf_handler("__tex2Dgather_rmnf_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeElementType> t, float x, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, level);
  return temp;
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLod_rmnf_v2", &type_dummy, &retval, t, x, level);
  return retval;
#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, level);
  return temp;
#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLod_rmnf_v2", &type_dummy, &retval, t, x, y, level);
  return retval;
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, level);
  return temp;
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, layer, level);
  return retval;
#line 459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, level);
  return temp;
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, layer, level);
  return retval;
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;
#line 492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;
#line 514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;
#line 525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayered_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer);
  return temp;
#line 537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayered_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer);
  return retval;
#line 548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, level);
  return temp;
#line 560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer, level);
  return retval;
#line 571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapGrad_rmnf_v2", &type_dummy, &retval, t,  x, y, z, &dPdx, &dPdy);
  return retval;
#line 594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, &dPdx, &dPdy);
  return temp;
#line 606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, layer, &dPdx, &dPdy);
  return retval;
#line 617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, dPdx, dPdy);
  return temp;
#line 629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DGrad_rmnf_v2", &type_dummy, &retval,t, x,dPdx, dPdy);
  return retval;
#line 640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}



template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, &dPdx, &dPdy);
  return temp;
#line 652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, &dPdx, &dPdy);
  return retval;
#line 663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, dPdx, dPdy);
  return temp;
#line 674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, layer, dPdx, dPdy);
  return retval;
#line 685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, &dPdx, &dPdy);
  return temp;
#line 696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, layer, &dPdx, &dPdy);
  return retval;
#line 707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}


template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;
#line 718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

template <typename T>
static __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, &dPdx, &dPdy);
  return retval;
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"
}

#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"

#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_fetch_functions.h"

#line 3276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"


template <typename T> struct __nv_itex_trait {   };
template<> struct __nv_itex_trait<char> { typedef void type; };
template<> struct __nv_itex_trait<signed char> { typedef void type; };
template<> struct __nv_itex_trait<char1> { typedef void type; };
template<> struct __nv_itex_trait<char2> { typedef void type; };
template<> struct __nv_itex_trait<char4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned char> { typedef void type; };
template<> struct __nv_itex_trait<uchar1> { typedef void type; };
template<> struct __nv_itex_trait<uchar2> { typedef void type; };
template<> struct __nv_itex_trait<uchar4> { typedef void type; };
template<> struct __nv_itex_trait<short> { typedef void type; };
template<> struct __nv_itex_trait<short1> { typedef void type; };
template<> struct __nv_itex_trait<short2> { typedef void type; };
template<> struct __nv_itex_trait<short4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned short> { typedef void type; };
template<> struct __nv_itex_trait<ushort1> { typedef void type; };
template<> struct __nv_itex_trait<ushort2> { typedef void type; };
template<> struct __nv_itex_trait<ushort4> { typedef void type; };
template<> struct __nv_itex_trait<int> { typedef void type; };
template<> struct __nv_itex_trait<int1> { typedef void type; };
template<> struct __nv_itex_trait<int2> { typedef void type; };
template<> struct __nv_itex_trait<int4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned int> { typedef void type; };
template<> struct __nv_itex_trait<uint1> { typedef void type; };
template<> struct __nv_itex_trait<uint2> { typedef void type; };
template<> struct __nv_itex_trait<uint4> { typedef void type; };

template<> struct __nv_itex_trait<long> { typedef void type; };
template<> struct __nv_itex_trait<long1> { typedef void type; };
template<> struct __nv_itex_trait<long2> { typedef void type; };
template<> struct __nv_itex_trait<long4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned long> { typedef void type; };
template<> struct __nv_itex_trait<ulong1> { typedef void type; };
template<> struct __nv_itex_trait<ulong2> { typedef void type; };
template<> struct __nv_itex_trait<ulong4> { typedef void type; };
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait<float> { typedef void type; };
template<> struct __nv_itex_trait<float1> { typedef void type; };
template<> struct __nv_itex_trait<float2> { typedef void type; };
template<> struct __nv_itex_trait<float4> { typedef void type; };



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x)
{

   __nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x);
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{

  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1D(T *ptr, cudaTextureObject_t obj, float x)
{

   __nv_tex_surf_handler("__itex1D", ptr, obj, x);
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <class T>
static __declspec(__device__)  T tex1D(cudaTextureObject_t texObject, float x)
{

  T ret;
  tex1D(&ret, texObject, x);
  return ret;
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y)
{

   __nv_tex_surf_handler("__itex2D", ptr, obj, x, y);
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2D(cudaTextureObject_t texObject, float x, float y)
{

  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

   __nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z);
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer)
{

   __nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer);
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{

  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer)
{

  __nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer);
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{

  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

  __nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z);
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <class T>
static __declspec(__device__)  T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer)
{ 

  __nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer);
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{

  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0)
{

  __nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp);
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{

  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level)
{

  __nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level);
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{

  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level)
{

  __nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level);
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{

  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 

  __nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level);
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level)
{ 

  __nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level);
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{

  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level)
{ 

  __nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level);
#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{

  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 

  __nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level);
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  __nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level)
{ 

  __nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level);
#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{

  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy)
{

  __nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy);
#line 429 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{

  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy)
{ 

  __nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy);
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"

}

template <class T>
static __declspec(__device__)  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
#line 459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  __nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
#line 468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy)
{ 

  __nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy);
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{

  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  __nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy);
#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
#line 516 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  __nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy);
#line 525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy);
  return ret;
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
}

#line 538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
#line 539 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_indirect_functions.h"
#line 3277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"

template<typename T> struct __nv_isurf_trait { };
template<> struct __nv_isurf_trait<char> { typedef void type; };
template<> struct __nv_isurf_trait<signed char> { typedef void type; };
template<> struct __nv_isurf_trait<char1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };
template<> struct __nv_isurf_trait<uchar1> { typedef void type; };
template<> struct __nv_isurf_trait<short> { typedef void type; };
template<> struct __nv_isurf_trait<short1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };
template<> struct __nv_isurf_trait<ushort1> { typedef void type; };
template<> struct __nv_isurf_trait<int> { typedef void type; };
template<> struct __nv_isurf_trait<int1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };
template<> struct __nv_isurf_trait<uint1> { typedef void type; };
template<> struct __nv_isurf_trait<long long> { typedef void type; };
template<> struct __nv_isurf_trait<longlong1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };
template<> struct __nv_isurf_trait<float> { typedef void type; };
template<> struct __nv_isurf_trait<float1> { typedef void type; };

template<> struct __nv_isurf_trait<char2> { typedef void type; };
template<> struct __nv_isurf_trait<uchar2> { typedef void type; };
template<> struct __nv_isurf_trait<short2> { typedef void type; };
template<> struct __nv_isurf_trait<ushort2> { typedef void type; };
template<> struct __nv_isurf_trait<int2> { typedef void type; };
template<> struct __nv_isurf_trait<uint2> { typedef void type; };
template<> struct __nv_isurf_trait<longlong2> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };
template<> struct __nv_isurf_trait<float2> { typedef void type; };

template<> struct __nv_isurf_trait<char4> { typedef void type; };
template<> struct __nv_isurf_trait<uchar4> { typedef void type; };
template<> struct __nv_isurf_trait<short4> { typedef void type; };
template<> struct __nv_isurf_trait<ushort4> { typedef void type; };
template<> struct __nv_isurf_trait<int4> { typedef void type; };
template<> struct __nv_isurf_trait<uint4> { typedef void type; };
template<> struct __nv_isurf_trait<float4> { typedef void type; };


template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode);
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode);
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode);
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode);
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode);
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode);
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, x, y, face, boundaryMode);
   return ret;
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode);
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{ 

  __nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode);
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode);
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode);
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode);
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode);
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode);
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode);
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"
}

#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"

#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\surface_indirect_functions.h"


#line 3278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"

#line 3280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/device_functions.h"

#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_functions.h"
#line 119 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\vector_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"


#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"

#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"


extern "C" {
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"






#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\device_launch_parameters.h"
#line 120 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"





#line 126 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"


#line 129 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

#line 131 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"






















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchCooperativeKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}


























template<class T>
static __inline __declspec(__host__) cudaError_t cudaSetupArgument(
  T      arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
























































static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}



































































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}






































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}




































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}


































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}






















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}






















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}


































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
        size_t                            size = 0xffffffff
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}

































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
        size_t                            size = 0xffffffff
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}













































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}












































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}




























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}




























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t                  levelArray;
  cudaError_t                  err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
  
  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}






















template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}



























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaGetTextureAlignmentOffset(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}












































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}




























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int   *numBlocks,
    T      func,
    int    blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}










































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int         *numBlocks,
    T            func,
    int          blockSize,
    size_t       dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __declspec(__host__)  __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __declspec(__host__)  size_t operator()(int)
  {
      return n;
  }
};














































template<typename UnaryFunction, class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0,
    unsigned int   flags = 0)
{
    cudaError_t status;

    
    int                       device;
    struct cudaFuncAttributes attr;

    
    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;

    
    int maxBlockSize = 0;
    int numBlocks    = 0;
    int maxOccupancy = 0;

    
    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;

    
    
    

    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }

    
    
    

    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }
    
    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;

    
    
    

    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity    = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
        
        
        
        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }
        
        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks    = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }

        
        
        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }

    
    
    

    
    
    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
































template<typename UnaryFunction, class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}



































template<class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int    *minGridSize,
    int    *blockSize,
    T       func,
    size_t  dynamicSMemSize = 0,
    int     blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}

















































template<class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int    *minGridSize,
    int    *blockSize,
    T      func,
    size_t dynamicSMemSize = 0,
    int    blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}








































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}






























template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}


































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetAttribute(
  T                         *entry,
  enum cudaFuncAttribute    attr,
  int                       value
)
{
  return ::cudaFuncSetAttribute((const void*)entry, attr, value);
}





















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim>       &surf,
  cudaArray_const_t                   array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}




















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t             array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}

#line 2025 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

 

#line 2029 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"






#line 2036 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#pragma warning(pop)
#line 2038 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"
#line 2039 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

#line 2041 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\cuda_runtime.h"

#line 1 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"




























#line 1 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optix_cuda.h"



































#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_math.h"




























#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"




































#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_types.h"
#line 38 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_functions.h"
















































































































































































#line 178 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_functions.h"
#line 39 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"







  
  typedef unsigned int uint;
  typedef unsigned short ushort;

#line 51 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"

#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"



































 
 


















#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\../optix.h"




















 
 


























#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"




















 
 




















#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"




















 
 










#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\host_defines.h"
#line 34 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"
#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"



























#line 29 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"












#line 42 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"

namespace optix {

#line 46 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"



#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_types.h"








































































































































































































































































































































































































































#line 426 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_types.h"
#line 50 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"




} 
#line 56 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"









namespace optix {
using ::char1; using ::char2; using ::char3; using ::char4;
using ::uchar1; using ::uchar2; using ::uchar3; using ::uchar4;
using ::short1; using ::short2; using ::short3; using ::short4;
using ::ushort1; using ::ushort2; using ::ushort3; using ::ushort4;
using ::int1; using ::int2; using ::int3; using ::int4;
using ::uint1; using ::uint2; using ::uint3; using ::uint4;
using ::long1; using ::long2; using ::long3; using ::long4;
using ::ulong1; using ::ulong2; using ::ulong3; using ::ulong4;
using ::float1; using ::float2; using ::float3; using ::float4;
using ::longlong1; using ::longlong2; using ::longlong3; using ::longlong4;
using ::ulonglong1; using ::ulonglong2; using ::ulonglong3; using ::ulonglong4;
using ::double1; using ::double2; using ::double3; using ::double4;
using ::dim3;
} 



#line 84 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"

#line 86 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optixu/optixu_vector_types.h"

#line 35 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"
#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"




















 























#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\host_defines.h"

















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"























































































































































































































#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v9.1\\include\\crt/host_defines.h"
#line 51 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\host_defines.h"
#line 46 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"



#line 50 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"









extern "C" {
#line 61 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"


typedef enum
{
  RT_FORMAT_UNKNOWN              = 0x100, 
  RT_FORMAT_FLOAT,                        
  RT_FORMAT_FLOAT2,                       
  RT_FORMAT_FLOAT3,                       
  RT_FORMAT_FLOAT4,                       
  RT_FORMAT_BYTE,                         
  RT_FORMAT_BYTE2,                        
  RT_FORMAT_BYTE3,                        
  RT_FORMAT_BYTE4,                        
  RT_FORMAT_UNSIGNED_BYTE,                
  RT_FORMAT_UNSIGNED_BYTE2,               
  RT_FORMAT_UNSIGNED_BYTE3,               
  RT_FORMAT_UNSIGNED_BYTE4,               
  RT_FORMAT_SHORT,                        
  RT_FORMAT_SHORT2,                       
  RT_FORMAT_SHORT3,                       
  RT_FORMAT_SHORT4,                       
  RT_FORMAT_UNSIGNED_SHORT,               
  RT_FORMAT_UNSIGNED_SHORT2,              
  RT_FORMAT_UNSIGNED_SHORT3,              
  RT_FORMAT_UNSIGNED_SHORT4,              
  RT_FORMAT_INT,                          
  RT_FORMAT_INT2,                         
  RT_FORMAT_INT3,                         
  RT_FORMAT_INT4,                         
  RT_FORMAT_UNSIGNED_INT,                 
  RT_FORMAT_UNSIGNED_INT2,                
  RT_FORMAT_UNSIGNED_INT3,                
  RT_FORMAT_UNSIGNED_INT4,                
  RT_FORMAT_USER,                         
  RT_FORMAT_BUFFER_ID,                    
  RT_FORMAT_PROGRAM_ID,                   
  RT_FORMAT_HALF,                         
  RT_FORMAT_HALF2,                        
  RT_FORMAT_HALF3,                        
  RT_FORMAT_HALF4                         
} RTformat;


typedef enum
{
  RT_OBJECTTYPE_UNKNOWN          = 0x200,   
  RT_OBJECTTYPE_GROUP,                      
  RT_OBJECTTYPE_GEOMETRY_GROUP,             
  RT_OBJECTTYPE_TRANSFORM,                  
  RT_OBJECTTYPE_SELECTOR,                   
  RT_OBJECTTYPE_GEOMETRY_INSTANCE,          
  RT_OBJECTTYPE_BUFFER,                     
  RT_OBJECTTYPE_TEXTURE_SAMPLER,            
  RT_OBJECTTYPE_OBJECT,                     
  

  RT_OBJECTTYPE_MATRIX_FLOAT2x2,            
  RT_OBJECTTYPE_MATRIX_FLOAT2x3,            
  RT_OBJECTTYPE_MATRIX_FLOAT2x4,            
  RT_OBJECTTYPE_MATRIX_FLOAT3x2,            
  RT_OBJECTTYPE_MATRIX_FLOAT3x3,            
  RT_OBJECTTYPE_MATRIX_FLOAT3x4,            
  RT_OBJECTTYPE_MATRIX_FLOAT4x2,            
  RT_OBJECTTYPE_MATRIX_FLOAT4x3,            
  RT_OBJECTTYPE_MATRIX_FLOAT4x4,            

  RT_OBJECTTYPE_FLOAT,                      
  RT_OBJECTTYPE_FLOAT2,                     
  RT_OBJECTTYPE_FLOAT3,                     
  RT_OBJECTTYPE_FLOAT4,                     
  RT_OBJECTTYPE_INT,                        
  RT_OBJECTTYPE_INT2,                       
  RT_OBJECTTYPE_INT3,                         
  RT_OBJECTTYPE_INT4,                         
  RT_OBJECTTYPE_UNSIGNED_INT,                 
  RT_OBJECTTYPE_UNSIGNED_INT2,              
  RT_OBJECTTYPE_UNSIGNED_INT3,              
  RT_OBJECTTYPE_UNSIGNED_INT4,              
  RT_OBJECTTYPE_USER,                       

  RT_OBJECTTYPE_PROGRAM,                    
  RT_OBJECTTYPE_COMMANDLIST,                
  RT_OBJECTTYPE_POSTPROCESSINGSTAGE         
  
} RTobjecttype;



typedef enum
{
  RT_WRAP_REPEAT,           
  RT_WRAP_CLAMP_TO_EDGE,    
  RT_WRAP_MIRROR,           
  RT_WRAP_CLAMP_TO_BORDER   
} RTwrapmode;


typedef enum
{
  RT_FILTER_NEAREST,      
  RT_FILTER_LINEAR,       
  RT_FILTER_NONE          
} RTfiltermode;


typedef enum
{
  RT_TEXTURE_READ_ELEMENT_TYPE = 0,           
  RT_TEXTURE_READ_NORMALIZED_FLOAT = 1,       
  RT_TEXTURE_READ_ELEMENT_TYPE_SRGB = 2,      
  RT_TEXTURE_READ_NORMALIZED_FLOAT_SRGB = 3   
} RTtexturereadmode;


typedef enum
{
  RT_TARGET_GL_TEXTURE_2D,            
  RT_TARGET_GL_TEXTURE_RECTANGLE,     
  RT_TARGET_GL_TEXTURE_3D,            
  RT_TARGET_GL_RENDER_BUFFER,         
  RT_TARGET_GL_TEXTURE_1D,            
  RT_TARGET_GL_TEXTURE_1D_ARRAY,      
  RT_TARGET_GL_TEXTURE_2D_ARRAY,      
  RT_TARGET_GL_TEXTURE_CUBE_MAP,      
  RT_TARGET_GL_TEXTURE_CUBE_MAP_ARRAY 
} RTgltarget;


typedef enum
{
  RT_TEXTURE_INDEX_NORMALIZED_COORDINATES,    
  RT_TEXTURE_INDEX_ARRAY_INDEX                
} RTtextureindexmode;


typedef enum
{
  RT_BUFFER_INPUT                = 0x1,                               
  RT_BUFFER_OUTPUT               = 0x2,                               
  RT_BUFFER_INPUT_OUTPUT         = RT_BUFFER_INPUT | RT_BUFFER_OUTPUT,
  RT_BUFFER_PROGRESSIVE_STREAM   = 0x10,                              
} RTbuffertype;


typedef enum
{
  RT_BUFFER_GPU_LOCAL            = 0x4,  
  RT_BUFFER_COPY_ON_DIRTY        = 0x8,  
  RT_BUFFER_DISCARD_HOST_MEMORY  = 0x20, 
  RT_BUFFER_LAYERED              = 0x200000, 
  RT_BUFFER_CUBEMAP              = 0x400000, 
} RTbufferflag;


typedef enum
{
  RT_BUFFER_MAP_READ            = 0x1,   
  RT_BUFFER_MAP_READ_WRITE      = 0x2, 
  RT_BUFFER_MAP_WRITE           = 0x4, 
  RT_BUFFER_MAP_WRITE_DISCARD   = 0x8  
} RTbuffermapflag;


typedef enum
{
  RT_EXCEPTION_PROGRAM_ID_INVALID           = 0x3EE,    
  RT_EXCEPTION_TEXTURE_ID_INVALID           = 0x3EF,    
  RT_EXCEPTION_BUFFER_ID_INVALID            = 0x3FA,    
  RT_EXCEPTION_INDEX_OUT_OF_BOUNDS          = 0x3FB,    
  RT_EXCEPTION_STACK_OVERFLOW               = 0x3FC,    
  RT_EXCEPTION_BUFFER_INDEX_OUT_OF_BOUNDS   = 0x3FD,      
  RT_EXCEPTION_INVALID_RAY                  = 0x3FE,    
  RT_EXCEPTION_INTERNAL_ERROR               = 0x3FF,    
  RT_EXCEPTION_USER                         = 0x400,    

  RT_EXCEPTION_ALL                          = 0x7FFFFFFF  
} RTexception;


typedef enum
{
  RT_SUCCESS                           = 0,       

  RT_TIMEOUT_CALLBACK                  = 0x100,   

  RT_ERROR_INVALID_CONTEXT             = 0x500,   
  RT_ERROR_INVALID_VALUE               = 0x501,   
  RT_ERROR_MEMORY_ALLOCATION_FAILED    = 0x502,   
  RT_ERROR_TYPE_MISMATCH               = 0x503,   
  RT_ERROR_VARIABLE_NOT_FOUND          = 0x504,   
  RT_ERROR_VARIABLE_REDECLARED         = 0x505,   
  RT_ERROR_ILLEGAL_SYMBOL              = 0x506,   
  RT_ERROR_INVALID_SOURCE              = 0x507,   
  RT_ERROR_VERSION_MISMATCH            = 0x508,   

  RT_ERROR_OBJECT_CREATION_FAILED      = 0x600,   
  RT_ERROR_NO_DEVICE                   = 0x601,   
  RT_ERROR_INVALID_DEVICE              = 0x602,   
  RT_ERROR_INVALID_IMAGE               = 0x603,   
  RT_ERROR_FILE_NOT_FOUND              = 0x604,   
  RT_ERROR_ALREADY_MAPPED              = 0x605,   
  RT_ERROR_INVALID_DRIVER_VERSION      = 0x606,   
  RT_ERROR_CONTEXT_CREATION_FAILED     = 0x607,   

  RT_ERROR_RESOURCE_NOT_REGISTERED     = 0x608,   
  RT_ERROR_RESOURCE_ALREADY_REGISTERED = 0x609,   

  RT_ERROR_LAUNCH_FAILED               = 0x900,   

  RT_ERROR_NOT_SUPPORTED               = 0xA00,   

  RT_ERROR_CONNECTION_FAILED           = 0xB00,   
  RT_ERROR_AUTHENTICATION_FAILED       = 0xB01,   
  RT_ERROR_CONNECTION_ALREADY_EXISTS   = 0xB02,   
  RT_ERROR_NETWORK_LOAD_FAILED         = 0xB03,   
  RT_ERROR_NETWORK_INIT_FAILED         = 0xB04,   
  RT_ERROR_CLUSTER_NOT_RUNNING         = 0xB06,   
  RT_ERROR_CLUSTER_ALREADY_RUNNING     = 0xB07,   
  RT_ERROR_INSUFFICIENT_FREE_NODES     = 0xB08,   

  RT_ERROR_INVALID_GLOBAL_ATTRIBUTE    = 0xC00,   

  RT_ERROR_UNKNOWN                     = ~0       
} RTresult;


typedef enum
{
  RT_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK,      
  RT_DEVICE_ATTRIBUTE_CLOCK_RATE,                 
  RT_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,       
  RT_DEVICE_ATTRIBUTE_EXECUTION_TIMEOUT_ENABLED,  
  RT_DEVICE_ATTRIBUTE_MAX_HARDWARE_TEXTURE_COUNT, 
  RT_DEVICE_ATTRIBUTE_NAME,                       
  RT_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY,         
  RT_DEVICE_ATTRIBUTE_TOTAL_MEMORY,               
  RT_DEVICE_ATTRIBUTE_TCC_DRIVER,                 
  RT_DEVICE_ATTRIBUTE_CUDA_DEVICE_ORDINAL,        
  RT_DEVICE_ATTRIBUTE_PCI_BUS_ID                  
} RTdeviceattribute;


typedef enum
{
  RT_REMOTEDEVICE_ATTRIBUTE_CLUSTER_URL,          
  RT_REMOTEDEVICE_ATTRIBUTE_HEAD_NODE_URL,        
  RT_REMOTEDEVICE_ATTRIBUTE_NUM_CONFIGURATIONS,   
  RT_REMOTEDEVICE_ATTRIBUTE_STATUS,               
  RT_REMOTEDEVICE_ATTRIBUTE_NUM_TOTAL_NODES,      
  RT_REMOTEDEVICE_ATTRIBUTE_NUM_FREE_NODES,       
  RT_REMOTEDEVICE_ATTRIBUTE_NUM_RESERVED_NODES,   
  RT_REMOTEDEVICE_ATTRIBUTE_NAME,                 
  RT_REMOTEDEVICE_ATTRIBUTE_NUM_GPUS,             
  RT_REMOTEDEVICE_ATTRIBUTE_GPU_TOTAL_MEMORY,     
  RT_REMOTEDEVICE_ATTRIBUTE_CONFIGURATIONS=0x040000000  
} RTremotedeviceattribute;

typedef enum
{
  RT_REMOTEDEVICE_STATUS_READY,                   
  RT_REMOTEDEVICE_STATUS_CONNECTED,               
  RT_REMOTEDEVICE_STATUS_RESERVED,                

  RT_REMOTEDEVICE_STATUS_DISCONNECTED = ~0        
} RTremotedevicestatus;


typedef enum
{
  RT_GLOBAL_ATTRIBUTE_DISPLAY_DRIVER_VERSION_MAJOR=1,                
  RT_GLOBAL_ATTRIBUTE_DISPLAY_DRIVER_VERSION_MINOR,                  
  RT_GLOBAL_ATTRIBUTE_EXPERIMENTAL_EXECUTION_STRATEGY = 0x10000000   
} RTglobalattribute;


typedef enum
{
  RT_CONTEXT_ATTRIBUTE_MAX_TEXTURE_COUNT,                    
  RT_CONTEXT_ATTRIBUTE_CPU_NUM_THREADS,                      
  RT_CONTEXT_ATTRIBUTE_USED_HOST_MEMORY,                     
  RT_CONTEXT_ATTRIBUTE_GPU_PAGING_ACTIVE,                    
  RT_CONTEXT_ATTRIBUTE_GPU_PAGING_FORCED_OFF,                
  RT_CONTEXT_ATTRIBUTE_DISK_CACHE_ENABLED,                   
  RT_CONTEXT_ATTRIBUTE_PREFER_FAST_RECOMPILES,               
  RT_CONTEXT_ATTRIBUTE_AVAILABLE_DEVICE_MEMORY = 0x10000000  
} RTcontextattribute;


typedef enum
{
  RT_BUFFER_ATTRIBUTE_STREAM_FORMAT,                          
  RT_BUFFER_ATTRIBUTE_STREAM_BITRATE,                         
  RT_BUFFER_ATTRIBUTE_STREAM_FPS,                             
  RT_BUFFER_ATTRIBUTE_STREAM_GAMMA                            
} RTbufferattribute;


typedef enum
{
  RT_MOTIONBORDERMODE_CLAMP,                      
  RT_MOTIONBORDERMODE_VANISH                      
} RTmotionbordermode;


typedef enum
{
  RT_MOTIONKEYTYPE_NONE = 0,                     
  RT_MOTIONKEYTYPE_MATRIX_FLOAT12,               
  RT_MOTIONKEYTYPE_SRT_FLOAT16                   
} RTmotionkeytype;


typedef enum { 
  RT_BUFFER_ID_NULL       = 0  
} RTbufferidnull;
typedef enum {
  RT_PROGRAM_ID_NULL      = 0  
} RTprogramidnull;
typedef enum {
  RT_TEXTURE_ID_NULL      = 0  
} RTtextureidnull;
typedef enum {
  RT_COMMAND_LIST_ID_NULL = 0  
} RTcommandlistidnull;
typedef enum {
  RT_POSTPROCESSING_STAGE_ID_NULL = 0 
} RTpostprocessingstagenull;



} 
#line 393 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"

#line 395 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_declarations.h"
#line 36 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"


namespace optix {
#line 40 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"
















































































struct Ray {


  
  __inline __declspec(__host__) __declspec(__device__)
  Ray(){}

  
  __inline __declspec(__host__) __declspec(__device__)
  Ray( const Ray &r)
    :origin(r.origin),direction(r.direction),ray_type(r.ray_type),tmin(r.tmin),tmax(r.tmax){}

  
  __inline __declspec(__host__) __declspec(__device__)
  Ray( float3 origin_, float3 direction_, unsigned int ray_type_, float tmin_, float tmax_ = 1.e27f )
    :origin(origin_),direction(direction_),ray_type(ray_type_),tmin(tmin_),tmax(tmax_){}
#line 137 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"

  
  float3 origin;
  
  float3 direction;
  
  unsigned int ray_type;
  
  float tmin;
  
  float tmax;
};

static __inline __declspec(__host__) __declspec(__device__)
Ray make_Ray( float3 origin, float3 direction, unsigned int ray_type, float tmin, float tmax )
{
  Ray ray;
  ray.origin = origin;
  ray.direction = direction;
  ray.ray_type = ray_type;
  ray.tmin = tmin;
  ray.tmax = tmax;
  return ray;
}


} 
#line 165 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"

#line 167 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_datatypes.h"
#line 44 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"

#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"

























#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_defines.h"




















 
 











enum RTtransformkind {
  RT_WORLD_TO_OBJECT = 0xf00, 
  RT_OBJECT_TO_WORLD          
};


enum RTtransformflags {
  RT_INTERNAL_INVERSE_TRANSPOSE = 0x1000 
};

namespace rti_internal_typeinfo {
  enum rtiTypeKind {
    _OPTIX_VARIABLE = 0x796152
  };
  struct rti_typeinfo {
    unsigned int kind;
    unsigned int size;
  };
}

namespace rti_internal_typeinfo {

  enum rtiTypeEnum {
    _OPTIX_TYPE_ENUM_UNKNOWN = 0x1337,
    _OPTIX_TYPE_ENUM_PROGRAM_ID,
    _OPTIX_TYPE_ENUM_PROGRAM_AS_ID
  };
  
  template<typename T>
  struct rti_typeenum
  {
    static const int m_typeenum = _OPTIX_TYPE_ENUM_UNKNOWN;
  };
}

namespace optix {
  

  enum rtiTexLookupKind {   
    TEX_LOOKUP_1D = 1,
    TEX_LOOKUP_2D = 2,
    TEX_LOOKUP_3D = 3,
    TEX_LOOKUP_A1 = 4,
    TEX_LOOKUP_A2 = 5,
    TEX_LOOKUP_CUBE = 6,
    TEX_LOOKUP_ACUBE = 7
  };
}
  












#line 96 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_defines.h"

namespace optix {
  typedef size_t optix_size_t;
}

#line 102 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\optix_defines.h"
#line 27 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"


























#line 28 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"











#line 40 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"


namespace optix {
#line 44 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"
  


  typedef struct {
    size_t x;
  } size_t1;

  
  typedef struct __declspec(align(16)) size_t2 {

    __declspec(__host__) __declspec(__device__) size_t2() { }
    __declspec(__host__) __declspec(__device__) explicit size_t2( size_t s ) { x = y = s; }
    __declspec(__host__) __declspec(__device__) size_t2( uint2 u ) { x = u.x; y = u.y; }
#line 58 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"
    size_t x,y;
  } size_t2;

  typedef struct size_t3 {

    __declspec(__host__) __declspec(__device__) size_t3() { }
    __declspec(__host__) __declspec(__device__) explicit size_t3( size_t s ) { x = y = z = s; }
    __declspec(__host__) __declspec(__device__) size_t3( uint3 u ) { x = u.x; y = u.y; z = u.z; }
#line 67 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"
    size_t x,y,z;
  } size_t3;

  
  typedef struct __declspec(align(16)) size_t4 {

    __declspec(__host__) __declspec(__device__) size_t4() { }
    __declspec(__host__) __declspec(__device__) explicit size_t4( size_t s ) { x = y = z = w = s; }
    __declspec(__host__) __declspec(__device__) size_t4( uint4 u ) { x = u.x; y = u.y; z = u.z; w = u.w; }
#line 77 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"
    size_t x,y,z,w;
  } size_t4;

  inline __declspec(__host__) __declspec(__device__) size_t2 make_size_t2( size_t x, size_t y ) {
    size_t2 ret;
    ret.x = x;
    ret.y = y;
    return ret;
  }
  inline __declspec(__host__) __declspec(__device__) size_t3 make_size_t3( size_t x, size_t y, size_t z ) {
    size_t3 ret;
    ret.x = x;
    ret.y = y;
    ret.z = z;
    return ret;
  }
  inline __declspec(__host__) __declspec(__device__) size_t4 make_size_t4( size_t x, size_t y, size_t z, size_t w ) {
    size_t4 ret;
    ret.x = x;
    ret.y = y;
    ret.z = z;
    ret.w = w;
    return ret;
  }
  

  
  inline __declspec(__host__) __declspec(__device__) size_t4 make_size_t4(unsigned int s)
  {
      return make_size_t4(s, s, s, s);
  }
  inline __declspec(__host__) __declspec(__device__) size_t3 make_size_t3(unsigned int s)
  {
      return make_size_t3(s, s, s);
  }
  inline __declspec(__host__) __declspec(__device__) size_t2 make_size_t2(unsigned int s)
  {
      return make_size_t2(s, s);
  }
  inline __declspec(__host__) __declspec(__device__) size_t3 make_size_t3(size_t4 st)
  {
      return make_size_t3(st.x, st.y, st.z);
  }
  inline __declspec(__host__) __declspec(__device__) size_t2 make_size_t2(size_t4 st)
  {
      return make_size_t2(st.x, st.y);
  }
  inline __declspec(__host__) __declspec(__device__) size_t make_size_t(size_t4 v0)
  {
      return (size_t) v0.x;
  }

  inline __declspec(__host__) __declspec(__device__) size_t4 make_size_t4(uint4 s)
  {
      return make_size_t4(s.x, s.y, s.z, s.w);
  }
  
  inline __declspec(__host__) __declspec(__device__) float2 make_float2(size_t2 st)
  {
    float2 ret;
    ret.x = (float)st.x;
    ret.y = (float)st.y;
    return ret;
  }
#line 142 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"










#line 153 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"


}
#line 157 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"



#line 161 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal\\../optix_sizet.h"
#line 28 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"


 
 
 
 
 
 
 

 
 
 
 

  

typedef FILE FILE;

 
namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"





#line 31 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
#line 32 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"

struct rtObject;

namespace optix {


  __forceinline __declspec(__device__) void
  rt_undefined_use(int)
  {
  }


#line 45 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"


  __forceinline __declspec(__device__) void
  rt_undefined_use64(unsigned long long)
  {
  }


#line 54 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"

  static __forceinline __declspec(__device__)  uint3 rt_texture_get_size_id(int tex)
  {
    unsigned int u0, u1, u2;

    asm volatile("call (%0, %1, %2), _rt_texture_get_size_id, (%3);" :
                 "=r"(u0), "=r"(u1), "=r"(u2) : "r"(tex) : );

    rt_undefined_use((int)u0);
    rt_undefined_use((int)u1);
    rt_undefined_use((int)u2);

    return make_uint3(u0, u1, u2);
  }
   
   static __forceinline __declspec(__device__) float4 rt_texture_get_gather_id(int tex, float x, float y, int comp)
  {
    float f0, f1, f2, f3;
    int dim = 2;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_gather_id, (%4, %5, %6, %7, %8);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "r"(comp) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }
   
  static __forceinline __declspec(__device__) float4 rt_texture_get_base_id(int tex, int dim, float x, float y, float z, int layer)
  {
    float f0, f1, f2, f3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_base_id, (%4, %5, %6, %7, %8, %9);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "r"(layer) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }

  static __forceinline __declspec(__device__) float4
    rt_texture_get_level_id(int tex, int dim, float x, float y, float z, int layer, float level)
  {
    float f0, f1, f2, f3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_level_id, (%4, %5, %6, %7, %8, %9, %10);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "r"(layer), "f"(level) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }
   
  static __forceinline __declspec(__device__) float4 rt_texture_get_grad_id(int tex, int dim, float x, float y, float z, int layer,
                                                  float dPdx_x, float dPdx_y, float dPdx_z, float dPdy_x, float dPdy_y, float dPdy_z)
  {
    float f0, f1, f2, f3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_grad_id, (%4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "r"(layer), "f"(dPdx_x), "f"(dPdx_y), "f"(dPdx_z), "f"(dPdy_x), "f"(dPdy_y), "f"(dPdy_z) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }

  static __forceinline __declspec(__device__) float4 rt_texture_get_f_id(int tex, int dim, float x, float y, float z, float w)
  {
    float f0, f1, f2, f3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_f_id, (%4, %5, %6, %7, %8, %9);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "f"(w) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }

  static __forceinline __declspec(__device__) int4 rt_texture_get_i_id(int tex, int dim, float x, float y, float z, float w)
  {
    int i0, i1, i2, i3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_i_id, (%4, %5, %6, %7, %8, %9);" :
                 "=r"(i0), "=r"(i1), "=r"(i2), "=r"(i3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "f"(w) :
                 );

    rt_undefined_use((int)i0);
    rt_undefined_use((int)i1);
    rt_undefined_use((int)i2);
    rt_undefined_use((int)i3);

    return make_int4(i0, i1, i2, i3);
  }

  static __forceinline __declspec(__device__) uint4 rt_texture_get_u_id(int tex, int dim, float x, float y, float z, float w)
  {
    unsigned int u0, u1, u2, u3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_u_id, (%4, %5, %6, %7, %8, %9);" :
                 "=r"(u0), "=r"(u1), "=r"(u2), "=r"(u3) :
                 "r"(tex), "r"(dim), "f"(x), "f"(y), "f"(z), "f"(w) :
                 );

    rt_undefined_use((int)u0);
    rt_undefined_use((int)u1);
    rt_undefined_use((int)u2);
    rt_undefined_use((int)u3);

    return make_uint4(u0, u1, u2, u3);
  }

  static __forceinline __declspec(__device__) float4 rt_texture_get_fetch_id(int tex, int dim, int x, int y, int z, int w)
  {
    float f0, f1, f2, f3;

    asm volatile("call (%0, %1, %2, %3), _rt_texture_get_fetch_id, (%4, %5, %6, %7, %8, %9);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(tex), "r"(dim), "r"(x), "r"(y), "r"(z), "r"(w) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);

    return make_float4(f0, f1, f2, f3);
  }

  static __forceinline __declspec(__device__) void* rt_buffer_get(void* buffer, unsigned int dim, unsigned int element_size,
                                               size_t i0_in, size_t i1_in, size_t i2_in, size_t i3_in)
  {
    optix::optix_size_t i0, i1, i2, i3;
    i0 = i0_in;
    i1 = i1_in;
    i2 = i2_in;
    i3 = i3_in;
    void* tmp;
    asm volatile("call (%0), _rt_buffer_get" "_64" ", (%1, %2, %3, %4, %5, %6, %7);" :
                 "=" "l"(tmp) :
                 "l"(buffer), "r"(dim), "r"(element_size),
                 "l"(i0), "l"(i1), "l"(i2), "l"(i3) :
                 );


    rt_undefined_use64((unsigned long long)tmp);


#line 228 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
    return tmp;
  }

  static __forceinline __declspec(__device__) void* rt_buffer_get_id(int id, unsigned int dim, unsigned int element_size,
                                                  size_t i0_in, size_t i1_in, size_t i2_in, size_t i3_in)
  {
    optix::optix_size_t i0, i1, i2, i3;
    i0 = i0_in;
    i1 = i1_in;
    i2 = i2_in;
    i3 = i3_in;
    void* tmp;
    asm volatile("call (%0), _rt_buffer_get_id" "_64" ", (%1, %2, %3, %4, %5, %6, %7);" :
                 "=" "l"(tmp) :
                 "r"(id), "r"(dim), "r"(element_size),
                 "l"(i0), "l"(i1), "l"(i2), "l"(i3) :
                 );


    rt_undefined_use64((unsigned long long)tmp);


#line 251 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
    return tmp;
  }

  static __forceinline __declspec(__device__) size_t4 rt_buffer_get_size(const void* buffer, unsigned int dim, unsigned int element_size)
  {
    optix::optix_size_t d0, d1, d2, d3;
    asm volatile("call (%0, %1, %2, %3), _rt_buffer_get_size" "_64" ", (%4, %5, %6);" :
                 "=" "l"(d0), "=" "l"(d1), "=" "l"(d2), "=" "l"(d3) :
                 "l"(buffer), "r"(dim), "r"(element_size) :
                 );

    return make_size_t4(d0, d1, d2, d3);
  }

  static __forceinline __declspec(__device__) size_t4 rt_buffer_get_size_id(int id, unsigned int dim, unsigned int element_size)
  {
    optix::optix_size_t d0, d1, d2, d3;
    asm volatile("call (%0, %1, %2, %3), _rt_buffer_get_id_size" "_64" ", (%4, %5, %6);" :
                 "=" "l"(d0), "=" "l"(d1), "=" "l"(d2), "=" "l"(d3) :
                 "r"(id), "r"(dim), "r"(element_size) :
                 );

    return make_size_t4(d0, d1, d2, d3);
  }

  static __forceinline __declspec(__device__) void* rt_callable_program_from_id(int id)
  {
    void* tmp;
    asm volatile("call (%0), _rt_callable_program_from_id" "_64" ", (%1);" :
                 "=" "l"(tmp) :
                 "r"(id):
                 );


    rt_undefined_use64((unsigned long long)tmp);


#line 289 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
    return tmp;
  }

  static __forceinline __declspec(__device__) void rt_trace(unsigned int group, float3 origin, float3 direction, unsigned int ray_type,
                                                  float tmin, float tmax, void* prd, unsigned int prd_size)
  {
    float ox = origin.x, oy = origin.y, oz = origin.z;
    float dx = direction.x, dy = direction.y, dz = direction.z;

    rt_undefined_use64((unsigned long long)prd);


#line 302 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
    asm volatile("call _rt_trace" "_64" ", (%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11);" :
                  :
                 "r"(group), "f"(ox), "f"(oy), "f"(oz), "f"(dx), "f"(dy), "f"(dz),
                 "r"(ray_type), "f"(tmin), "f"(tmax), "l"(prd), "r"(prd_size) :
                 );
  }

  static __forceinline __declspec(__device__) void rt_trace_with_time(unsigned int group, float3 origin, float3 direction, unsigned int ray_type,
                                                            float tmin, float tmax, float time, void* prd, unsigned int prd_size)
  {
    float ox = origin.x, oy = origin.y, oz = origin.z;
    float dx = direction.x, dy = direction.y, dz = direction.z;

    rt_undefined_use64((unsigned long long)prd);


#line 319 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
    asm volatile("call _rt_trace_with_time" "_64" ", (%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12);" :
                  :
                 "r"(group), "f"(ox), "f"(oy), "f"(oz), "f"(dx), "f"(dy), "f"(dz),
                 "r"(ray_type), "f"(tmin), "f"(tmax), "f"(time), "l"(prd), "r"(prd_size) :
                 );
  }

  static __forceinline __declspec(__device__) bool rt_potential_intersection(float t)
  {
    int ret;
    asm volatile("call (%0), _rt_potential_intersection, (%1);" :
                 "=r"(ret) :
                 "f"(t):
                 );

    return ret;
  }

  static __forceinline __declspec(__device__) bool rt_report_intersection(unsigned int matlIndex)
  {
    int ret;
    asm volatile("call (%0), _rt_report_intersection, (%1);" :
                 "=r"(ret) :
                 "r"(matlIndex) :
                 );

    return ret;
  }

  static __forceinline __declspec(__device__) void rt_ignore_intersection()
  {
    asm volatile("call _rt_ignore_intersection, ();");
  }

  static __forceinline __declspec(__device__) void rt_terminate_ray()
  {
    asm volatile("call _rt_terminate_ray, ();");
  }

  static __forceinline __declspec(__device__) void rt_intersect_child(unsigned int index)
  {
    asm volatile("call _rt_intersect_child, (%0);" :
                  :
                 "r"(index) :
                 );
  }

  static __forceinline __declspec(__device__) float3 rt_transform_point( RTtransformkind kind, const float3& p )
  {

    float f0, f1, f2, f3;
    asm volatile("call (%0, %1, %2, %3), _rt_transform_tuple, (%4, %5, %6, %7, %8);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(kind), "f"(p.x), "f"(p.y), "f"(p.z), "f"(1.0f) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);
    return make_float3( f0/f3, f1/f3, f2/f3 );

  }

  static __forceinline __declspec(__device__) float3 rt_transform_vector( RTtransformkind kind, const float3& v )
  {
    float f0, f1, f2, f3;
    asm volatile("call (%0, %1, %2, %3), _rt_transform_tuple, (%4, %5, %6, %7, %8);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(kind), "f"(v.x), "f"(v.y), "f"(v.z), "f"(0.0f) :
                 );

    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);
    f3 = f3;
    return make_float3( f0, f1, f2 );
  }

  static __forceinline __declspec(__device__) float3 rt_transform_normal( RTtransformkind kind, const float3& n )
  {
    float f0, f1, f2, f3;
    asm volatile("call (%0, %1, %2, %3), _rt_transform_tuple, (%4, %5, %6, %7, %8);" :
                 "=f"(f0), "=f"(f1), "=f"(f2), "=f"(f3) :
                 "r"(kind | RT_INTERNAL_INVERSE_TRANSPOSE ), "f"(n.x), "f"(n.y), "f"(n.z), "f"(0.0f) :
                 );
 
    rt_undefined_use((int)f0);
    rt_undefined_use((int)f1);
    rt_undefined_use((int)f2);
    rt_undefined_use((int)f3);
    f3 = f3;
    return make_float3( f0, f1, f2 );
  }

  static __forceinline __declspec(__device__) void rt_get_transform( RTtransformkind kind, float matrix[16] )
  {
    asm volatile("call (%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15), _rt_get_transform, (%16);" :
                 "=f"(matrix[ 0]), "=f"(matrix[ 1]), "=f"(matrix[ 2]), "=f"(matrix[ 3]),
                 "=f"(matrix[ 4]), "=f"(matrix[ 5]), "=f"(matrix[ 6]), "=f"(matrix[ 7]),
                 "=f"(matrix[ 8]), "=f"(matrix[ 9]), "=f"(matrix[10]), "=f"(matrix[11]),
                 "=f"(matrix[12]), "=f"(matrix[13]), "=f"(matrix[14]), "=f"(matrix[15]) :
                 "r"( kind ) :
                 );
  }

  static __forceinline __declspec(__device__) void rt_throw( unsigned int code )
  {
    asm volatile("call _rt_throw, (%0);" :
                  :
                 "r"(code) :
                 );
  }

  static __forceinline __declspec(__device__) unsigned int rt_get_exception_code()
  {
    unsigned int result;
    asm volatile("call (%0), _rt_get_exception_code, ();" :
                 "=r"(result) :
                 );

    return result;
  }

  



  static __forceinline __declspec(__device__) int rt_print_active()
  {
    int ret;
    asm volatile("call (%0), _rt_print_active, ();" :
                 "=r"(ret) :
                 :
                 );
    return ret;
  }
  
  




} 

#line 466 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\internal/optix_internal.h"
#line 46 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"





namespace optix {

  template<typename T, int Dim> struct VectorTypes {};
  template<> struct VectorTypes<int, 1> {
    typedef int Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_int(s); }
  };
  template<> struct VectorTypes<int, 2> {
    typedef int2 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_int2(s); }
  };
  template<> struct VectorTypes<int, 3> {
    typedef int3 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_int3(s); }
  };
  template<> struct VectorTypes<int, 4> {
    typedef int4 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_int4(s); }
  };
  template<> struct VectorTypes<unsigned int, 1> {
    typedef unsigned int Type;
    static __declspec(__device__) __forceinline
      Type make(unsigned int s) { return s; }
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return (unsigned int)s.x; }
  };
  template<> struct VectorTypes<unsigned int, 2> {
    typedef uint2 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_uint2(s); }
  };
  template<> struct VectorTypes<unsigned int, 3> {
    typedef uint3 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_uint3(s); }
  };
  template<> struct VectorTypes<unsigned int, 4> {
    typedef uint4 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_uint4(s); }
  };
  template<> struct VectorTypes<float, 1> {
    typedef float Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_float(s); }
  };
  template<> struct VectorTypes<float, 2> {
    typedef float2 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_float2(s); }
  };
  template<> struct VectorTypes<float, 3> {
    typedef float3 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_float3(s); }
  };
  template<> struct VectorTypes<float, 4> {
    typedef float4 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_float4(s); }
  };


  template<> struct VectorTypes<size_t, 1> {
    typedef size_t Type;
    static __declspec(__device__) __forceinline
      Type make(unsigned int s) { return s; }
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return (unsigned int)s.x; }
  };
  template<> struct VectorTypes<size_t, 2> {
    typedef size_t2 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_size_t2(s); }
  };
  template<> struct VectorTypes<size_t, 3> {
    typedef size_t3 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_size_t3(s); }
  };
  template<> struct VectorTypes<size_t, 4> {
    typedef size_t4 Type;
    template<class S> static __declspec(__device__) __forceinline
      Type make(S s) { return make_size_t4(s); }
  };
#line 141 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"
}





































struct rtObject {
protected:
  unsigned int handle;
  

  void never_call() { handle = 0; }
};



















































































































































template<typename T> struct rtCallableProgramSizeofWrapper { static const size_t value = sizeof(T); }; 
template<> struct rtCallableProgramSizeofWrapper<void> { static const size_t value = 0; };













































#line 381 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"







namespace optix {
  template<typename T, int Dim> struct bufferId;
  
  template<typename T, int Dim = 1> struct buffer {
    typedef VectorTypes<size_t, Dim> WrapperType;
    typedef typename VectorTypes<size_t, Dim>::Type IndexType;

    __declspec(__device__) __forceinline IndexType size() const {
      return WrapperType::make(rt_buffer_get_size(this, Dim, sizeof(T)));
    }
    __declspec(__device__) __forceinline T& operator[](IndexType i) {
      size_t4 c = make_index(i);
      return *(T*)create(type<T>(), rt_buffer_get(this, Dim, sizeof(T), c.x, c.y, c.z, c.w));
    }
  protected:
    __inline __declspec(__device__) static size_t4 make_index(size_t v0) { return make_size_t4(v0, 0, 0, 0); }
    __inline __declspec(__device__) static size_t4 make_index(size_t2 v0) { return make_size_t4(v0.x, v0.y, 0, 0); }
    __inline __declspec(__device__) static size_t4 make_index(size_t3 v0) { return make_size_t4(v0.x, v0.y, v0.z, 0); }
    __inline __declspec(__device__) static size_t4 make_index(size_t4 v0) { return make_size_t4(v0.x, v0.y, v0.z, v0.w); }

    
    
    
    template<typename T2> struct type { };

    
    template<typename T2> __declspec(__device__) __forceinline static void* create(type<T2>, void* v) { return v; }
    
    
    template<typename T2, int Dim2>
    __declspec(__device__) __forceinline static void* create(type<bufferId<T2,Dim2> >, void* v) 
    {
      
      
      
      
      bufferId<T,Dim> b(*reinterpret_cast<int*>(v));
      void* result = &b;
      return result;
    }
  };

  
  template<typename T, int Dim = 1> struct bufferId : public buffer<T,Dim> {
    typedef typename buffer<T,Dim>::WrapperType WrapperType;
    typedef typename buffer<T,Dim>::IndexType IndexType;
    
    
    __declspec(__device__) __forceinline bufferId() {}
    
    __declspec(__device__) __forceinline bufferId(RTbufferidnull nullid) { m_id = (int)nullid; }
    
    __declspec(__device__) __forceinline explicit bufferId(int id) : m_id(id) {}
      
    
    __declspec(__device__) __forceinline bufferId& operator= (RTbufferidnull nullid) { m_id = nullid; return *this; }

    
    
    __declspec(__device__) __forceinline IndexType size() const {
      return WrapperType::make(rt_buffer_get_size_id(m_id, Dim, sizeof(T)));
    }
    __declspec(__device__) __forceinline T& operator[](IndexType i) const {
      size_t4 c = make_index(i);
      return *(T*)create(typename buffer<T,Dim>::template type<T>(),
                         rt_buffer_get_id(m_id, Dim, sizeof(T), c.x, c.y, c.z, c.w));
    }

    __declspec(__device__) __forceinline int getId() const { return m_id; }

    __declspec(__device__) __forceinline operator bool() const { return m_id; }
 
  private:
    
    int m_id;
  };
}















































































































namespace optix {

  typedef int rtTextureId;

  

























































































































  inline __declspec(__device__) int4 float4AsInt4( float4 f4 ) {
    return make_int4(__float_as_int(f4.x), __float_as_int(f4.y), __float_as_int(f4.z), __float_as_int(f4.w));
  }
    
  inline __declspec(__device__) uint4 float4AsUInt4( float4 f4 ) {
    return make_uint4(__float_as_int(f4.x), __float_as_int(f4.y), __float_as_int(f4.z), __float_as_int(f4.w));
  }

  













































  

  inline __declspec(__device__) uint3 rtTexSize(rtTextureId id)
  {
    return optix::rt_texture_get_size_id(id);
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1D(rtTextureId id, float x);
  template<> inline __declspec(__device__) float4 rtTex1D(rtTextureId id, float x)
  {
    return optix::rt_texture_get_f_id(id, 1, x, 0, 0, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex1D(rtTextureId id, float x)
  {
    return optix::rt_texture_get_i_id(id, 1, x, 0, 0, 0);
  }
  template<> inline __declspec(__device__) uint4 rtTex1D(rtTextureId id, float x)
  {
    return optix::rt_texture_get_u_id(id, 1, x, 0, 0, 0);
  }
  template<> inline __declspec(__device__) unsigned char rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1D (rtTextureId id, float x) { float4 tmp = rtTex1D <float4> (id, x); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1D (rtTextureId id, float x) { float4 tmp = rtTex1D <float4> (id, x); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1D (rtTextureId id, float x) { uint4 tmp = rtTex1D <uint4> (id, x); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1D (rtTextureId id, float x) { int4 tmp = rtTex1D <int4> (id, x); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1D(T* retVal, rtTextureId id, float x)
  {
    T tmp = rtTex1D<T>(id, x);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1DFetch(rtTextureId id, int x);
  template<> inline __declspec(__device__) float4 rtTex1DFetch(rtTextureId id, int x)
  {
    return optix::rt_texture_get_fetch_id(id, 1, x, 0, 0, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex1DFetch(rtTextureId id, int x)
  {
    return float4AsInt4(optix::rt_texture_get_fetch_id(id, 1, x, 0, 0, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DFetch(rtTextureId id, int x)
  {
    return float4AsUInt4(optix::rt_texture_get_fetch_id(id, 1, x, 0, 0, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DFetch (rtTextureId id, int x) { float4 tmp = rtTex1DFetch <float4> (id, x); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DFetch (rtTextureId id, int x) { float4 tmp = rtTex1DFetch <float4> (id, x); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DFetch (rtTextureId id, int x) { uint4 tmp = rtTex1DFetch <uint4> (id, x); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DFetch (rtTextureId id, int x) { int4 tmp = rtTex1DFetch <int4> (id, x); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DFetch(T* retVal, rtTextureId id, int x)
  {
    T tmp = rtTex1DFetch<T>(id, x);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2D(rtTextureId id, float x, float y);
  template<>
  inline __declspec(__device__) float4 rtTex2D(rtTextureId id, float x, float y)
  {
    return optix::rt_texture_get_f_id(id, 2, x, y, 0, 0);
  }
  template<>
  inline __declspec(__device__) int4 rtTex2D(rtTextureId id, float x, float y)
  {
    return optix::rt_texture_get_i_id(id, 2, x, y, 0, 0);
  }
  template<>
  inline __declspec(__device__) uint4 rtTex2D(rtTextureId id, float x, float y)
  {
    return optix::rt_texture_get_u_id(id, 2, x, y, 0, 0);
  }
  template<> inline __declspec(__device__) unsigned char rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2D (rtTextureId id, float x, float y) { float4 tmp = rtTex2D <float4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2D (rtTextureId id, float x, float y) { float4 tmp = rtTex2D <float4> (id, x, y); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2D (rtTextureId id, float x, float y) { uint4 tmp = rtTex2D <uint4> (id, x, y); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2D (rtTextureId id, float x, float y) { int4 tmp = rtTex2D <int4> (id, x, y); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2D(T* retVal, rtTextureId id, float x, float y)
  {
    T tmp = rtTex2D<T>(id, x, y);
    *retVal = tmp;
  }
  
  template<typename T>
  inline __declspec(__device__) T rtTex2DFetch(rtTextureId id, int x, int y);
  template<> inline __declspec(__device__) float4 rtTex2DFetch(rtTextureId id, int x, int y)
  {
    return optix::rt_texture_get_fetch_id(id, 2, x, y, 0, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex2DFetch(rtTextureId id, int x, int y)
  {
    return float4AsInt4(optix::rt_texture_get_fetch_id(id, 2, x, y, 0, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DFetch(rtTextureId id, int x, int y)
  {
    return float4AsUInt4(optix::rt_texture_get_fetch_id(id, 2, x, y, 0, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DFetch (rtTextureId id, int x, int y) { float4 tmp = rtTex2DFetch <float4> (id, x, y); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DFetch (rtTextureId id, int x, int y) { float4 tmp = rtTex2DFetch <float4> (id, x, y); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DFetch (rtTextureId id, int x, int y) { uint4 tmp = rtTex2DFetch <uint4> (id, x, y); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DFetch (rtTextureId id, int x, int y) { int4 tmp = rtTex2DFetch <int4> (id, x, y); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DFetch(T* retVal, rtTextureId id, int x, int y)
  {
    T tmp = rtTex2DFetch<T>(id, x, y);
    *retVal = tmp;
  }
  
  template<typename T>
  inline __declspec(__device__) T rtTex3D(rtTextureId id, float x, float y, float z);
  template<> inline __declspec(__device__) float4 rtTex3D(rtTextureId id, float x, float y, float z)
  {
    return optix::rt_texture_get_f_id(id, 3, x, y, z, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex3D(rtTextureId id, float x, float y, float z)
  {
    return optix::rt_texture_get_i_id(id, 3, x, y, z, 0);
  }
  template<> inline __declspec(__device__) uint4 rtTex3D(rtTextureId id, float x, float y, float z)
  {
    return optix::rt_texture_get_u_id(id, 3, x, y, z, 0);
  }
  template<> inline __declspec(__device__) unsigned char rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex3D (rtTextureId id, float x, float y, float z) { float4 tmp = rtTex3D <float4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex3D (rtTextureId id, float x, float y, float z) { float4 tmp = rtTex3D <float4> (id, x, y, z); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex3D (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTex3D <uint4> (id, x, y, z); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex3D (rtTextureId id, float x, float y, float z) { int4 tmp = rtTex3D <int4> (id, x, y, z); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex3D(T* retVal, rtTextureId id, float x, float y, float z)
  {
    T tmp = rtTex3D<T>(id, x, y, z);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex3DFetch(rtTextureId id, int x, int y, int z);
  template<> inline __declspec(__device__) float4 rtTex3DFetch(rtTextureId id, int x, int y, int z)
  {
    return optix::rt_texture_get_fetch_id(id, 3, x, y, z, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex3DFetch(rtTextureId id, int x, int y, int z)
  {
    return float4AsInt4(optix::rt_texture_get_fetch_id(id, 3, x, y, z, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex3DFetch(rtTextureId id, int x, int y, int z)
  {
    return float4AsUInt4(optix::rt_texture_get_fetch_id(id, 3, x, y, z, 0));
  }    
  template<> inline __declspec(__device__) unsigned char rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex3DFetch (rtTextureId id, int x, int y, int z) { float4 tmp = rtTex3DFetch <float4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex3DFetch (rtTextureId id, int x, int y, int z) { float4 tmp = rtTex3DFetch <float4> (id, x, y, z); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex3DFetch (rtTextureId id, int x, int y, int z) { uint4 tmp = rtTex3DFetch <uint4> (id, x, y, z); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex3DFetch (rtTextureId id, int x, int y, int z) { int4 tmp = rtTex3DFetch <int4> (id, x, y, z); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex3DFetch(T* retVal, rtTextureId id, int x, int y, int z)
  {
    T tmp = rtTex3DFetch<T>(id, x, y, z);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DGather(rtTextureId id, float x, float y, int comp = 0);
  template<> inline __declspec(__device__) float4 rtTex2DGather(rtTextureId id, float x, float y, int comp)
  {
    return optix::rt_texture_get_gather_id(id, x, y, comp);
  }
  template<> inline __declspec(__device__) int4 rtTex2DGather(rtTextureId id, float x, float y, int comp)
  {
    return float4AsInt4(optix::rt_texture_get_gather_id(id, x, y, comp));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DGather(rtTextureId id, float x, float y, int comp)
  {
    return float4AsUInt4(optix::rt_texture_get_gather_id(id, x, y, comp));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DGather (rtTextureId id, float x, float y, int comp) { float4 tmp = rtTex2DGather <float4> (id, x, y, comp); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DGather (rtTextureId id, float x, float y, int comp) { float4 tmp = rtTex2DGather <float4> (id, x, y, comp); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DGather (rtTextureId id, float x, float y, int comp) { uint4 tmp = rtTex2DGather <uint4> (id, x, y, comp); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DGather (rtTextureId id, float x, float y, int comp) { int4 tmp = rtTex2DGather <int4> (id, x, y, comp); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DGather(T* retVal, rtTextureId id, float x, float y, int comp = 0)
  {
    T tmp = rtTex2DGather<T>(id, x, y, comp);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1DGrad(rtTextureId id, float x, float dPdx, float dPdy);
  template<> inline __declspec(__device__) float4 rtTex1DGrad(rtTextureId id, float x, float dPdx, float dPdy)
  {
    return optix::rt_texture_get_grad_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, dPdx, 0, 0, dPdy, 0, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex1DGrad(rtTextureId id, float x, float dPdx, float dPdy)
  {
    return float4AsInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, dPdx, 0, 0, dPdy, 0, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DGrad(rtTextureId id, float x, float dPdx, float dPdy)
  {
    return float4AsUInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, dPdx, 0, 0, dPdy, 0, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { float4 tmp = rtTex1DGrad <float4> (id, x, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { float4 tmp = rtTex1DGrad <float4> (id, x, dPdx, dPdy); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { uint4 tmp = rtTex1DGrad <uint4> (id, x, dPdx, dPdy); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DGrad (rtTextureId id, float x, float dPdx, float dPdy) { int4 tmp = rtTex1DGrad <int4> (id, x, dPdx, dPdy); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DGrad(T* retVal, rtTextureId id, float x, float dPdx, float dPdy)
  {
    T tmp = rtTex1DGrad<T>(id, x, dPdx, dPdy);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DGrad(rtTextureId id, float x, float y, float2 dPdx, float2 dPdy);
  template<> inline __declspec(__device__) float4 rtTex2DGrad(rtTextureId id, float x, float y, float2 dPdx, float2 dPdy)
  {
    return optix::rt_texture_get_grad_id(id, TEX_LOOKUP_2D, x, y, 0, 0, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex2DGrad(rtTextureId id, float x, float y, float2 dPdx, float2 dPdy)
  {
    return float4AsInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_2D, x, y, 0, 0, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DGrad(rtTextureId id, float x, float y, float2 dPdx, float2 dPdy)
  {
    return float4AsUInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_2D, x, y, 0, 0, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { float4 tmp = rtTex2DGrad <float4> (id, x, y, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { float4 tmp = rtTex2DGrad <float4> (id, x, y, dPdx, dPdy); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DGrad <uint4> (id, x, y, dPdx, dPdy); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DGrad (rtTextureId id, float x, float y, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DGrad <int4> (id, x, y, dPdx, dPdy); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DGrad(T* retVal, rtTextureId id, float x, float y, float2 dPdx, float2 dPdy)
  {
    T tmp = rtTex2DGrad<T>(id, x, y, dPdx, dPdy);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex3DGrad(rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy);
  template<> inline __declspec(__device__) float4 rtTex3DGrad(rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy)
  {
    return optix::rt_texture_get_grad_id(id, TEX_LOOKUP_3D, x, y, z, 0, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z);
  }
  template<> inline __declspec(__device__) int4 rtTex3DGrad(rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy)
  {
    return float4AsInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_3D, x, y, z, 0, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z));
  }
  template<> inline __declspec(__device__) uint4 rtTex3DGrad(rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy)
  {
    return float4AsUInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_3D, x, y, z, 0, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z));
  }
  template<> inline __declspec(__device__) unsigned char rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { float4 tmp = rtTex3DGrad <float4> (id, x, y, z, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { float4 tmp = rtTex3DGrad <float4> (id, x, y, z, dPdx, dPdy); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { uint4 tmp = rtTex3DGrad <uint4> (id, x, y, z, dPdx, dPdy); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex3DGrad (rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy) { int4 tmp = rtTex3DGrad <int4> (id, x, y, z, dPdx, dPdy); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex3DGrad(T* retVal, rtTextureId id, float x, float y, float z, float4 dPdx, float4 dPdy)
  {
    T tmp = rtTex3DGrad<T>(id, x, y, z, dPdx, dPdy);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1DLayeredGrad(rtTextureId id, float x, int layer, float dPdx, float dPdy);
  template<> inline __declspec(__device__) float4 rtTex1DLayeredGrad(rtTextureId id, float x, int layer, float dPdx, float dPdy)
  {
    return optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, dPdx, 0, 0, dPdy, 0, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex1DLayeredGrad(rtTextureId id, float x, int layer, float dPdx, float dPdy)
  {
    return float4AsInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, dPdx, 0, 0, dPdy, 0, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DLayeredGrad(rtTextureId id, float x, int layer, float dPdx, float dPdy)
  {
    return float4AsUInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, dPdx, 0, 0, dPdy, 0, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { float4 tmp = rtTex1DLayeredGrad <float4> (id, x, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { float4 tmp = rtTex1DLayeredGrad <float4> (id, x, layer, dPdx, dPdy); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { uint4 tmp = rtTex1DLayeredGrad <uint4> (id, x, layer, dPdx, dPdy); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DLayeredGrad (rtTextureId id, float x, int layer, float dPdx, float dPdy) { int4 tmp = rtTex1DLayeredGrad <int4> (id, x, layer, dPdx, dPdy); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DLayeredGrad(T* retVal, rtTextureId id, float x, int layer, float dPdx, float dPdy)
  {
    T tmp = rtTex1DLayeredGrad<T>(id, x, layer, dPdx, dPdy);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DLayeredGrad(rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy);
  template<> inline __declspec(__device__) float4 rtTex2DLayeredGrad(rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy)
  {
    return optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A2, x, y, 0, layer, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0);
  }
  template<> inline __declspec(__device__) int4 rtTex2DLayeredGrad(rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy)
  {
    return float4AsInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A2, x, y, 0, layer, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DLayeredGrad(rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy)
  {
    return float4AsUInt4(optix::rt_texture_get_grad_id(id, TEX_LOOKUP_A2, x, y, 0, layer, dPdx.x, dPdx.y, 0, dPdy.x, dPdy.y, 0));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { float4 tmp = rtTex2DLayeredGrad <float4> (id, x, y, layer, dPdx, dPdy); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { float4 tmp = rtTex2DLayeredGrad <float4> (id, x, y, layer, dPdx, dPdy); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { uint4 tmp = rtTex2DLayeredGrad <uint4> (id, x, y, layer, dPdx, dPdy); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DLayeredGrad (rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy) { int4 tmp = rtTex2DLayeredGrad <int4> (id, x, y, layer, dPdx, dPdy); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DLayeredGrad(T* retVal, rtTextureId id, float x, float y, int layer, float2 dPdx, float2 dPdy)
  {
    T tmp = rtTex2DLayeredGrad<T>(id, x, y, layer, dPdx, dPdy);
    *retVal = tmp;
  }
 
  template<typename T>
  inline __declspec(__device__) T rtTex1DLod(rtTextureId id, float x, float level);
  template<> inline __declspec(__device__) float4 rtTex1DLod(rtTextureId id, float x, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, level );
  }
  template<> inline __declspec(__device__) int4 rtTex1DLod(rtTextureId id, float x, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DLod(rtTextureId id, float x, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_1D, x, 0, 0, 0, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DLod (rtTextureId id, float x, float level) { float4 tmp = rtTex1DLod <float4> (id, x, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DLod (rtTextureId id, float x, float level) { float4 tmp = rtTex1DLod <float4> (id, x, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DLod (rtTextureId id, float x, float level) { uint4 tmp = rtTex1DLod <uint4> (id, x, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DLod (rtTextureId id, float x, float level) { int4 tmp = rtTex1DLod <int4> (id, x, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DLod(T* retVal, rtTextureId id, float x, float level)
  {
    T tmp = rtTex1DLod<T>(id, x, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DLod(rtTextureId id, float x, float y, float level);
  template<> inline __declspec(__device__) float4 rtTex2DLod(rtTextureId id, float x, float y, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_2D, x, y, 0, 0, level );
  }
  template<> inline __declspec(__device__) int4 rtTex2DLod(rtTextureId id, float x, float y, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_2D, x, y, 0, 0, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DLod(rtTextureId id, float x, float y, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_2D, x, y, 0, 0, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DLod (rtTextureId id, float x, float y, float level) { float4 tmp = rtTex2DLod <float4> (id, x, y, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DLod (rtTextureId id, float x, float y, float level) { float4 tmp = rtTex2DLod <float4> (id, x, y, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DLod (rtTextureId id, float x, float y, float level) { uint4 tmp = rtTex2DLod <uint4> (id, x, y, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DLod (rtTextureId id, float x, float y, float level) { int4 tmp = rtTex2DLod <int4> (id, x, y, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DLod(T* retVal, rtTextureId id, float x, float y, float level)
  {
    T tmp = rtTex2DLod<T>(id, x, y, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex3DLod(rtTextureId id, float x, float y, float z, float level);
  template<> inline __declspec(__device__) float4 rtTex3DLod(rtTextureId id, float x, float y, float z, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_3D, x, y, z, 0, level );
  }
  template<> inline __declspec(__device__) int4 rtTex3DLod(rtTextureId id, float x, float y, float z, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_3D, x, y, z, 0, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTex3DLod(rtTextureId id, float x, float y, float z, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_3D, x, y, z, 0, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { float4 tmp = rtTex3DLod <float4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { float4 tmp = rtTex3DLod <float4> (id, x, y, z, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTex3DLod <uint4> (id, x, y, z, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex3DLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTex3DLod <int4> (id, x, y, z, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex3DLod(T* retVal, rtTextureId id, float x, float y, float z, float level)
  {
    T tmp = rtTex3DLod<T>(id, x, y, z, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1DLayeredLod(rtTextureId id, float x, int layer, float level);
  template<> inline __declspec(__device__) float4 rtTex1DLayeredLod(rtTextureId id, float x, int layer, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, level );
  }
  template<> inline __declspec(__device__) int4 rtTex1DLayeredLod(rtTextureId id, float x, int layer, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DLayeredLod(rtTextureId id, float x, int layer, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_A1, x, 0, 0, layer, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { float4 tmp = rtTex1DLayeredLod <float4> (id, x, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { float4 tmp = rtTex1DLayeredLod <float4> (id, x, layer, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { uint4 tmp = rtTex1DLayeredLod <uint4> (id, x, layer, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DLayeredLod (rtTextureId id, float x, int layer, float level) { int4 tmp = rtTex1DLayeredLod <int4> (id, x, layer, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DLayeredLod(T* retVal, rtTextureId id, float x, int layer, float level)
  {
    T tmp = rtTex1DLayeredLod<T>(id, x, layer, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DLayeredLod(rtTextureId id, float x, float y, int layer, float level);
  template<> inline __declspec(__device__) float4 rtTex2DLayeredLod(rtTextureId id, float x, float y, int layer, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_A2, x, y, 0, layer, level );
  }
  template<> inline __declspec(__device__) int4 rtTex2DLayeredLod(rtTextureId id, float x, float y, int layer, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_A2, x, y, 0, layer, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DLayeredLod(rtTextureId id, float x, float y, int layer, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_A2, x, y, 0, layer, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { float4 tmp = rtTex2DLayeredLod <float4> (id, x, y, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { float4 tmp = rtTex2DLayeredLod <float4> (id, x, y, layer, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { uint4 tmp = rtTex2DLayeredLod <uint4> (id, x, y, layer, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DLayeredLod (rtTextureId id, float x, float y, int layer, float level) { int4 tmp = rtTex2DLayeredLod <int4> (id, x, y, layer, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DLayeredLod(T* retVal, rtTextureId id, float x, float y, int layer, float level)
  {
    T tmp = rtTex2DLayeredLod<T>(id, x, y, layer, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex1DLayered(rtTextureId id, float x, int layer);
  template<> inline __declspec(__device__) float4 rtTex1DLayered(rtTextureId id, float x, int layer)
  {
    return optix::rt_texture_get_base_id(id, TEX_LOOKUP_A1, x, 0, 0, layer );
  }
  template<> inline __declspec(__device__) int4 rtTex1DLayered(rtTextureId id, float x, int layer)
  {
    return float4AsInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_A1, x, 0, 0, layer ));
  }
  template<> inline __declspec(__device__) uint4 rtTex1DLayered(rtTextureId id, float x, int layer)
  {
    return float4AsUInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_A1, x, 0, 0, layer ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex1DLayered (rtTextureId id, float x, int layer) { float4 tmp = rtTex1DLayered <float4> (id, x, layer); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex1DLayered (rtTextureId id, float x, int layer) { float4 tmp = rtTex1DLayered <float4> (id, x, layer); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex1DLayered (rtTextureId id, float x, int layer) { uint4 tmp = rtTex1DLayered <uint4> (id, x, layer); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex1DLayered (rtTextureId id, float x, int layer) { int4 tmp = rtTex1DLayered <int4> (id, x, layer); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex1DLayered(T* retVal, rtTextureId id, float x, int layer)
  {
    T tmp = rtTex1DLayered<T>(id, x, layer);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTex2DLayered(rtTextureId id, float x, float y, int layer);
  template<> inline __declspec(__device__) float4 rtTex2DLayered(rtTextureId id, float x, float y, int layer)
  {
    return optix::rt_texture_get_base_id(id, TEX_LOOKUP_A2, x, y, 0, layer );
  }
  template<> inline __declspec(__device__) int4 rtTex2DLayered(rtTextureId id, float x, float y, int layer)
  {
    return float4AsInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_A2, x, y, 0, layer ));
  }
  template<> inline __declspec(__device__) uint4 rtTex2DLayered(rtTextureId id, float x, float y, int layer)
  {
    return float4AsUInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_A2, x, y, 0, layer ));
  }
  template<> inline __declspec(__device__) unsigned char rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTex2DLayered (rtTextureId id, float x, float y, int layer) { float4 tmp = rtTex2DLayered <float4> (id, x, y, layer); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { float4 tmp = rtTex2DLayered <float4> (id, x, y, layer); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { uint4 tmp = rtTex2DLayered <uint4> (id, x, y, layer); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTex2DLayered (rtTextureId id, float x, float y, int layer) { int4 tmp = rtTex2DLayered <int4> (id, x, y, layer); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTex2DLayered(T* retVal, rtTextureId id, float x, float y, int layer)
  {
    T tmp = rtTex2DLayered<T>(id, x, y, layer);
    *retVal = tmp;
  }
   
  template<typename T>
  inline __declspec(__device__) T rtTexCubemap(rtTextureId id, float x, float y, float z);
  template<> inline __declspec(__device__) float4 rtTexCubemap(rtTextureId id, float x, float y, float z)
  {
    return optix::rt_texture_get_base_id(id, TEX_LOOKUP_CUBE, x, y, z, 0 );
  }
  template<> inline __declspec(__device__) int4 rtTexCubemap(rtTextureId id, float x, float y, float z)
  {
    return float4AsInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_CUBE, x, y, z, 0 ));
  }
  template<> inline __declspec(__device__) uint4 rtTexCubemap(rtTextureId id, float x, float y, float z)
  {
    return float4AsUInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_CUBE, x, y, z, 0 ));
  }
  template<> inline __declspec(__device__) unsigned char rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTexCubemap (rtTextureId id, float x, float y, float z) { float4 tmp = rtTexCubemap <float4> (id, x, y, z); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTexCubemap (rtTextureId id, float x, float y, float z) { float4 tmp = rtTexCubemap <float4> (id, x, y, z); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTexCubemap (rtTextureId id, float x, float y, float z) { uint4 tmp = rtTexCubemap <uint4> (id, x, y, z); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTexCubemap (rtTextureId id, float x, float y, float z) { int4 tmp = rtTexCubemap <int4> (id, x, y, z); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTexCubemap(T* retVal, rtTextureId id, float x, float y, float z)
  {
    T tmp = rtTexCubemap<T>(id, x, y, z);
    *retVal = tmp;
  }
    
  template<typename T>
  inline __declspec(__device__) T rtTexCubemapLayered(rtTextureId id, float x, float y, float z, int layer);
  template<> inline __declspec(__device__) float4 rtTexCubemapLayered(rtTextureId id, float x, float y, float z, int layer)
  {
    return optix::rt_texture_get_base_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer );
  }
  template<> inline __declspec(__device__) int4 rtTexCubemapLayered(rtTextureId id, float x, float y, float z, int layer)
  {
    return float4AsInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer ));
  }
  template<> inline __declspec(__device__) uint4 rtTexCubemapLayered(rtTextureId id, float x, float y, float z, int layer)
  {
    return float4AsUInt4(optix::rt_texture_get_base_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer ));
  }
  template<> inline __declspec(__device__) unsigned char rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { float4 tmp = rtTexCubemapLayered <float4> (id, x, y, z, layer); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { float4 tmp = rtTexCubemapLayered <float4> (id, x, y, z, layer); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { uint4 tmp = rtTexCubemapLayered <uint4> (id, x, y, z, layer); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTexCubemapLayered (rtTextureId id, float x, float y, float z, int layer) { int4 tmp = rtTexCubemapLayered <int4> (id, x, y, z, layer); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTexCubemapLayered(T* retVal, rtTextureId id, float x, float y, float z, int layer)
  {
    T tmp = rtTexCubemapLayered<T>(id, x, y, z, layer);
    *retVal = tmp;
  }
    
  template<typename T>
  inline __declspec(__device__) T rtTexCubemapLod(rtTextureId id, float x, float y, float z, float level);
  template<> inline __declspec(__device__) float4 rtTexCubemapLod(rtTextureId id, float x, float y, float z, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_CUBE, x, y, z, 0, level );
  }
  template<> inline __declspec(__device__) int4 rtTexCubemapLod(rtTextureId id, float x, float y, float z, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_CUBE, x, y, z, 0, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTexCubemapLod(rtTextureId id, float x, float y, float z, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_CUBE, x, y, z, 0, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { float4 tmp = rtTexCubemapLod <float4> (id, x, y, z, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { float4 tmp = rtTexCubemapLod <float4> (id, x, y, z, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { uint4 tmp = rtTexCubemapLod <uint4> (id, x, y, z, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTexCubemapLod (rtTextureId id, float x, float y, float z, float level) { int4 tmp = rtTexCubemapLod <int4> (id, x, y, z, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTexCubemapLod(T* retVal, rtTextureId id, float x, float y, float z, float level)
  {
    T tmp = rtTexCubemapLod<T>(id, x, y, z, level);
    *retVal = tmp;
  }

  template<typename T>
  inline __declspec(__device__) T rtTexCubemapLayeredLod(rtTextureId id, float x, float y, float z, int layer, float level);
  template<> inline __declspec(__device__) float4 rtTexCubemapLayeredLod(rtTextureId id, float x, float y, float z, int layer, float level)
  {
    return optix::rt_texture_get_level_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer, level );
  }
  template<> inline __declspec(__device__) int4 rtTexCubemapLayeredLod(rtTextureId id, float x, float y, float z, int layer, float level)
  {
    return float4AsInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer, level ));
  }
  template<> inline __declspec(__device__) uint4 rtTexCubemapLayeredLod(rtTextureId id, float x, float y, float z, int layer, float level)
  {
    return float4AsUInt4(optix::rt_texture_get_level_id(id, TEX_LOOKUP_ACUBE, x, y, z, layer, level ));
  }
  template<> inline __declspec(__device__) unsigned char rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return (unsigned char)(tmp.x); } template<> inline __declspec(__device__) char rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return (char)(tmp.x); } template<> inline __declspec(__device__) unsigned short rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return (unsigned short)(tmp.x); } template<> inline __declspec(__device__) short rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return (short)(tmp.x); } template<> inline __declspec(__device__) int rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return tmp.x; } template<> inline __declspec(__device__) unsigned int rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_uchar1(tmp.x); } template<> inline __declspec(__device__) char1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_char1(tmp.x); } template<> inline __declspec(__device__) ushort1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_ushort1(tmp.x); } template<> inline __declspec(__device__) short1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_short1(tmp.x); } template<> inline __declspec(__device__) uint1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_uint1(tmp.x); } template<> inline __declspec(__device__) int1 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_int1(tmp.x); } template<> inline __declspec(__device__) float rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { float4 tmp = rtTexCubemapLayeredLod <float4> (id, x, y, z, layer, level); return tmp.x; } template<> inline __declspec(__device__) uchar2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_uchar2(tmp.x, tmp.y); } template<> inline __declspec(__device__) char2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_char2(tmp.x, tmp.y); } template<> inline __declspec(__device__) ushort2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_ushort2(tmp.x, tmp.y); } template<> inline __declspec(__device__) short2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_short2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uint2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_uint2(tmp.x, tmp.y); } template<> inline __declspec(__device__) int2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_int2(tmp.x, tmp.y); } template<> inline __declspec(__device__) float2 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { float4 tmp = rtTexCubemapLayeredLod <float4> (id, x, y, z, layer, level); return ::make_float2(tmp.x, tmp.y); } template<> inline __declspec(__device__) uchar4 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) char4 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_char4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) ushort4 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { uint4 tmp = rtTexCubemapLayeredLod <uint4> (id, x, y, z, layer, level); return make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); } template<> inline __declspec(__device__) short4 rtTexCubemapLayeredLod (rtTextureId id, float x, float y, float z, int layer, float level) { int4 tmp = rtTexCubemapLayeredLod <int4> (id, x, y, z, layer, level); return make_short4(tmp.x, tmp.y, tmp.z, tmp.w); }
  template<typename T> 
  inline __declspec(__device__) void rtTexCubemapLayeredLod(T* retVal, rtTextureId id, float x, float y, float z, int layer, float level)
  {
    T tmp = rtTexCubemapLayeredLod<T>(id, x, y, z, layer, level);
    *retVal = tmp;
  }

  

  
};


























































   



namespace rti_internal_callableprogram {
  




  



     
  class CPArgVoid {};
  template< typename T1>
  struct is_CPArgVoid            { static const bool result = false; };

  template<> 
  struct is_CPArgVoid<CPArgVoid> { static const bool result = true; };

  template< bool Condition, typename Dummy = void >
  struct check_is_CPArgVoid {
    typedef bool result;
  };

  template<typename IntentionalError>
  struct check_is_CPArgVoid<false,IntentionalError> {
    typedef typename IntentionalError::does_not_exist result;
  };

  



  template <typename ReturnT
            ,typename Arg0T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg1T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg2T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg3T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg4T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg5T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg6T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg7T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg8T=rti_internal_callableprogram::CPArgVoid
            ,typename Arg9T=rti_internal_callableprogram::CPArgVoid
            >
  class callableProgramIdBase {
  public:
      
      __declspec(__device__) __forceinline callableProgramIdBase() {}
    
    __declspec(__device__) __forceinline callableProgramIdBase(RTprogramidnull nullid) { m_id = (int)nullid; }
    
    __declspec(__device__) __forceinline explicit callableProgramIdBase(int id) : m_id(id) {}

    
    
    
    
    
    
    
    __declspec(__device__) __forceinline ReturnT operator()()
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg0T>::result>::result Arg0_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg1T>::result>::result Arg1_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg2T>::result>::result Arg2_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg3T>::result>::result Arg3_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg4T>::result>::result Arg4_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)();
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call();
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg1T>::result>::result Arg1_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg2T>::result>::result Arg2_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg3T>::result>::result Arg3_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg4T>::result>::result Arg4_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg2T>::result>::result Arg2_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg3T>::result>::result Arg3_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg4T>::result>::result Arg4_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg3T>::result>::result Arg3_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg4T>::result>::result Arg4_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg4T>::result>::result Arg4_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg5T>::result>::result Arg5_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4, Arg5T arg5)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg6T>::result>::result Arg6_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4,arg5);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4, Arg5T arg5, Arg6T arg6)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg7T>::result>::result Arg7_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4,arg5,arg6);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4, Arg5T arg5, Arg6T arg6, Arg7T arg7)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg8T>::result>::result Arg8_test;
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4, Arg5T arg5, Arg6T arg6, Arg7T arg7,
                                                  Arg8T arg8)
    {
      typedef typename check_is_CPArgVoid<is_CPArgVoid<Arg9T>::result>::result Arg9_test;
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    __declspec(__device__) __forceinline ReturnT operator()(Arg0T arg0, Arg1T arg1, Arg2T arg2, Arg3T arg3,
                                                  Arg4T arg4, Arg5T arg5, Arg6T arg6, Arg7T arg7,
                                                  Arg8T arg8, Arg9T arg9)
    {
      typedef ReturnT (*funcT)(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T);
      funcT call = (funcT)optix::rt_callable_program_from_id(m_id);
      return call(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
  protected:
    int m_id;
  };
} 

namespace optix {

  

























  



  

  template<typename T>
  class callableProgramId;

  
  template<typename ReturnT>
  class callableProgramId<ReturnT()>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T>
  class callableProgramId<ReturnT(Arg0T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T>
  class callableProgramId<ReturnT(Arg0T,Arg1T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T, typename Arg8T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T, typename Arg8T, typename Arg9T>
  class callableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T> { public: __declspec(__device__) __forceinline callableProgramId() {} __declspec(__device__) __forceinline callableProgramId(RTprogramidnull nullid) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T>(nullid) {} __declspec(__device__) __forceinline explicit callableProgramId(int id) : rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T>(id) {} __declspec(__device__) __forceinline callableProgramId& operator= (RTprogramidnull nullid) { this->m_id = nullid; return *this; } __declspec(__device__) __forceinline int getId() const { return this->m_id; } __declspec(__device__) __forceinline operator bool() const { return this->m_id != RT_PROGRAM_ID_NULL; } };
  
  























  
  



  

  template<typename T>
  class boundCallableProgramId;

  
  template<typename ReturnT>
  class boundCallableProgramId<ReturnT()>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T>
  class boundCallableProgramId<ReturnT(Arg0T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T, typename Arg8T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  template<typename ReturnT, typename Arg0T, typename Arg1T, typename Arg2T, typename Arg3T,
           typename Arg4T, typename Arg5T, typename Arg6T, typename Arg7T, typename Arg8T, typename Arg9T>
  class boundCallableProgramId<ReturnT(Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T)>: public rti_internal_callableprogram::callableProgramIdBase<ReturnT,Arg0T,Arg1T,Arg2T,Arg3T,Arg4T,Arg5T,Arg6T,Arg7T,Arg8T,Arg9T> { public: __declspec(__device__) __forceinline boundCallableProgramId() {} private: __declspec(__device__) __forceinline boundCallableProgramId(const boundCallableProgramId& ); __declspec(__device__) __forceinline boundCallableProgramId& operator= (const boundCallableProgramId& ); };
  
} 

namespace rti_internal_typeinfo {
  
  template <typename T>
  struct rti_typeenum<optix::callableProgramId<T> >
  {
    static const int m_typeenum = _OPTIX_TYPE_ENUM_PROGRAM_ID;
  };

  
  template <typename T>
  struct rti_typeenum<optix::boundCallableProgramId<T> >
  {
    static const int m_typeenum = _OPTIX_TYPE_ENUM_PROGRAM_AS_ID;
  };
  
}








































































 



































template<class T>
static inline __declspec(__device__) void rtTrace( rtObject topNode, optix::Ray ray, T& prd )
{
  optix::rt_trace(*(unsigned int*)&topNode, ray.origin, ray.direction, ray.ray_type, ray.tmin, ray.tmax, &prd, sizeof(T));
}


template<class T>
static inline __declspec(__device__) void rtTrace( rtObject topNode, optix::Ray ray, float time, T& prd )
{
  optix::rt_trace_with_time(*(unsigned int*)&topNode, ray.origin, ray.direction, ray.ray_type, ray.tmin, ray.tmax, time, &prd, sizeof(T));
}














































static inline __declspec(__device__) bool rtPotentialIntersection( float tmin )
{
  return optix::rt_potential_intersection( tmin );
}

























static inline __declspec(__device__) bool rtReportIntersection( unsigned int material )
{
  return optix::rt_report_intersection( material );
}
































static inline __declspec(__device__) void rtIgnoreIntersection()
{
  optix::rt_ignore_intersection();
}

























static inline __declspec(__device__) void rtTerminateRay()
{
  optix::rt_terminate_ray();
}




































static inline __declspec(__device__) void rtIntersectChild( unsigned int index )
{
  optix::rt_intersect_child( index );
}




































static inline __declspec(__device__) float3 rtTransformPoint( RTtransformkind kind, const float3& p )
{
  return optix::rt_transform_point( kind, p );
}





































static inline __declspec(__device__) float3 rtTransformVector( RTtransformkind kind, const float3& v )
{
  return optix::rt_transform_vector( kind, v );
}





































static inline __declspec(__device__) float3 rtTransformNormal( RTtransformkind kind, const float3& n )
{
  return optix::rt_transform_normal( kind, n );
}




































static inline __declspec(__device__) void rtGetTransform( RTtransformkind kind, float matrix[16] )
{
  return optix::rt_get_transform( kind, matrix );
}




































  

static inline __declspec(__device__) void rtPrintf( const char* fmt )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt);
}
template<typename T1>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1);
}
template<typename T1, typename T2>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2);
}
template<typename T1, typename T2, typename T3>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3);
}
template<typename T1, typename T2, typename T3, typename T4>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
}
template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12>
static inline __declspec(__device__) void rtPrintf( const char* fmt, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12 )
{
  if( !optix::rt_print_active() ) return;
  printf(fmt, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
}







#line 2270 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"

namespace rti_internal_register {
   __declspec(__device__) void* reg_bitness_detector;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail0;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail1;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail2;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail3;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail4;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail5;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail6;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail7;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail8;
   __declspec(__device__) volatile unsigned long long reg_exception_64_detail9;
   __declspec(__device__) volatile unsigned int reg_exception_detail0;
   __declspec(__device__) volatile unsigned int reg_exception_detail1;
   __declspec(__device__) volatile unsigned int reg_exception_detail2;
   __declspec(__device__) volatile unsigned int reg_exception_detail3;
   __declspec(__device__) volatile unsigned int reg_exception_detail4;
   __declspec(__device__) volatile unsigned int reg_exception_detail5;
   __declspec(__device__) volatile unsigned int reg_exception_detail6;
   __declspec(__device__) volatile unsigned int reg_exception_detail7;
   __declspec(__device__) volatile unsigned int reg_exception_detail8;
   __declspec(__device__) volatile unsigned int reg_exception_detail9;
   __declspec(__device__) volatile unsigned int reg_rayIndex_x;
   __declspec(__device__) volatile unsigned int reg_rayIndex_y;
   __declspec(__device__) volatile unsigned int reg_rayIndex_z;
}






































static inline __declspec(__device__) void rtThrow( unsigned int code )
{
  optix::rt_throw( code );
}




























static inline __declspec(__device__) unsigned int rtGetExceptionCode()
{
  return optix::rt_get_exception_code();
}






























static inline __declspec(__device__) void rtPrintExceptionDetails()
{
  const unsigned int code = rtGetExceptionCode();

  if( code == RT_EXCEPTION_STACK_OVERFLOW )
  {
    rtPrintf( "Caught RT_EXCEPTION_STACK_OVERFLOW\n"
              "  launch index : %d, %d, %d\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z
              );
  }
  else if( code == RT_EXCEPTION_BUFFER_INDEX_OUT_OF_BOUNDS )
  {

    const unsigned int dim = rti_internal_register::reg_exception_detail0;

    rtPrintf( "Caught RT_EXCEPTION_BUFFER_INDEX_OUT_OF_BOUNDS\n"
              "  launch index   : %d, %d, %d\n"
              "  buffer address : 0x%llX\n"
              "  dimensionality : %d\n"
              "  size           : %lldx%lldx%lld\n"
              "  element size   : %d\n"
              "  accessed index : %lld, %lld, %lld\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z,
              rti_internal_register::reg_exception_64_detail0,
              rti_internal_register::reg_exception_detail0,
              rti_internal_register::reg_exception_64_detail1,
              dim > 1 ? rti_internal_register::reg_exception_64_detail2 : 1,
              dim > 2 ? rti_internal_register::reg_exception_64_detail3 : 1,
              rti_internal_register::reg_exception_detail1,
              rti_internal_register::reg_exception_64_detail4,
              rti_internal_register::reg_exception_64_detail5,
              rti_internal_register::reg_exception_64_detail6
              );























#line 2463 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"
  }
  else if( code == RT_EXCEPTION_PROGRAM_ID_INVALID )
  {
    rtPrintf( "Caught RT_EXCEPTION_PROGRAM_ID_INVALID\n");
    switch(rti_internal_register::reg_exception_detail1)
    {
    case 0:
      rtPrintf( "\tprogram ID equal to RT_PROGRAM_ID_NULL used\n");
      break;
    case 1:
      rtPrintf( "\tprogram ID (%d) is not in the valid range of [1,size)\n", rti_internal_register::reg_exception_detail0);
      break;
    case 2:
      rtPrintf( "\tprogram ID of a deleted program used\n");
      break;
    }
  }
  else if( code == RT_EXCEPTION_TEXTURE_ID_INVALID )
  {
    rtPrintf( "Caught RT_EXCEPTION_TEXTURE_ID_INVALID\n");
    switch(rti_internal_register::reg_exception_detail1)
    {
    case 0:
      rtPrintf( "\ttexture ID (%d) is invalid (0)\n", rti_internal_register::reg_exception_detail0);
      break;
    case 1:
      rtPrintf( "\ttexture ID (%d) is not in the valid range of [1,size)\n", rti_internal_register::reg_exception_detail0);
      break;
    case 2:
      rtPrintf( "\ttexture ID (%d) is invalid (-1)\n", rti_internal_register::reg_exception_detail0);
      break;
    }
  }
  else if( code == RT_EXCEPTION_BUFFER_ID_INVALID )
  {
    rtPrintf( "Caught RT_EXCEPTION_BUFFER_ID_INVALID\n");
    switch(rti_internal_register::reg_exception_detail1)
    {
    case 0:
      rtPrintf( "\tbuffer ID equal to RT_BUFFER_ID_NULL used\n");
      break;
    case 1:
      rtPrintf( "\tbuffer ID (%d) is not in the valid range of [1,size)\n", rti_internal_register::reg_exception_detail0);
      break;
    case 2:
      rtPrintf( "\tBuffer ID of a deleted buffer used\n");
      break;
    }
  }
  else if( code == RT_EXCEPTION_INDEX_OUT_OF_BOUNDS )
  {

    const unsigned int dim = rti_internal_register::reg_exception_detail0;

    rtPrintf( "Caught RT_EXCEPTION_INDEX_OUT_OF_BOUNDS\n"
              "  launch index   : %d, %d, %d\n"
              "  buffer address : 0x%llX\n"
              "  size           : %lld\n"
              "  accessed index : %lld\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z,
              rti_internal_register::reg_exception_64_detail0,
              rti_internal_register::reg_exception_64_detail1,
              rti_internal_register::reg_exception_64_detail2
              );















#line 2545 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"
  }
  else if( code == RT_EXCEPTION_INVALID_RAY )
  {
    rtPrintf( "Caught RT_EXCEPTION_INVALID_RAY\n"
              "  launch index  : %d, %d, %d\n"
              "  ray origin    : %f %f %f\n"
              "  ray direction : %f %f %f\n"
              "  ray type      : %d\n"
              "  ray tmin      : %f\n"
              "  ray tmax      : %f\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z,
              __int_as_float(rti_internal_register::reg_exception_detail0),
              __int_as_float(rti_internal_register::reg_exception_detail1),
              __int_as_float(rti_internal_register::reg_exception_detail2),
              __int_as_float(rti_internal_register::reg_exception_detail3),
              __int_as_float(rti_internal_register::reg_exception_detail4),
              __int_as_float(rti_internal_register::reg_exception_detail5),
              rti_internal_register::reg_exception_detail6,
              __int_as_float(rti_internal_register::reg_exception_detail7),
              __int_as_float(rti_internal_register::reg_exception_detail8)
              );
  }
  else if( code == RT_EXCEPTION_INTERNAL_ERROR )
  {
    
    rtPrintf( "Caught RT_EXCEPTION_INTERNAL_ERROR\n"
              "  launch index : %d, %d, %d\n"
              "  error id     : %d\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z,
              rti_internal_register::reg_exception_detail0
              );
  }
  else if( code >= RT_EXCEPTION_USER && code <= 0xFFFF )
  {
    rtPrintf( "Caught RT_EXCEPTION_USER+%d\n"
              "  launch index : %d, %d, %d\n",
              code-RT_EXCEPTION_USER,
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z
              );
  }
  else
  {
    
    rtPrintf( "Caught unknown exception\n"
              "  launch index : %d, %d, %d\n",
              rti_internal_register::reg_rayIndex_x,
              rti_internal_register::reg_rayIndex_y,
              rti_internal_register::reg_rayIndex_z
              );
  }
}

#line 2604 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_device.h"

#line 50 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\../optix.h"


#line 53 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\../optix.h"


#line 56 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\../optix.h"
#line 57 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"

#line 1 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"






































#line 40 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"

namespace optix {

#line 44 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"



#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_functions.h"
















































































































































































#line 178 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1/include\\vector_functions.h"
#line 48 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"




} 
#line 54 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"









namespace optix {
using ::make_char1; using ::make_char2; using ::make_char3; using ::make_char4;
using ::make_uchar1; using ::make_uchar2; using ::make_uchar3; using ::make_uchar4;
using ::make_short1; using ::make_short2; using ::make_short3; using ::make_short4;
using ::make_ushort1; using ::make_ushort2; using ::make_ushort3; using ::make_ushort4;
using ::make_int1; using ::make_int2; using ::make_int3; using ::make_int4;
using ::make_uint1; using ::make_uint2; using ::make_uint3; using ::make_uint4;
using ::make_long1; using ::make_long2; using ::make_long3; using ::make_long4;
using ::make_ulong1; using ::make_ulong2; using ::make_ulong3; using ::make_ulong4;
using ::make_float1; using ::make_float2; using ::make_float3; using ::make_float4;
using ::make_longlong1; using ::make_longlong2; using ::make_longlong3; using ::make_longlong4;
using ::make_ulonglong1; using ::make_ulonglong2; using ::make_ulonglong3; using ::make_ulonglong4;
using ::make_double1; using ::make_double2; using ::make_double3; using ::make_double4;
} 



#line 81 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"

#line 83 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_vector_functions.h"

#line 59 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"






#line 66 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"







#line 74 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 77 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 80 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 83 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 86 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 89 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 92 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 95 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 98 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 101 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 104 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 107 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


#line 110 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"








#line 119 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


namespace optix {





#line 128 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"
  
  
  using ::uint;
  using ::ushort;
#line 133 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"
} 















































































#line 214 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"

namespace optix {
  
  
  


  
  using ::fminf;
  using ::fmaxf;
  using ::copysignf;
#line 226 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"
  using ::expf;
  using ::floorf;

  

  using ::min;
  using ::max;













#line 247 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"

} 


namespace optix {






  using ::float_as_int;
  using ::int_as_float;



























#line 288 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"






__forceinline __declspec(__host__) __declspec(__device__) float lerp(const float a, const float b, const float t)
{
  return a + t*(b-a);
}


__forceinline __declspec(__host__) __declspec(__device__) float bilerp(const float x00, const float x10, const float x01, const float x11,
                                         const float u, const float v)
{
  return lerp( lerp( x00, x10, u ), lerp( x01, x11, u ), v );
}


__forceinline __declspec(__host__) __declspec(__device__) float clamp(const float f, const float a, const float b)
{
  return fmaxf(a, fminf(f, b));
}


__forceinline __declspec(__host__) __declspec(__device__) float getByIndex(const float1& v, int i)
{
  return ((float*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(float1& v, int i, float x)
{
  ((float*)(&v))[i] = x;
}
  






__forceinline __declspec(__host__) __declspec(__device__) float2 make_float2(const float s)
{
  return make_float2(s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 make_float2(const int2& a)
{
  return make_float2(float(a.x), float(a.y));
}
__forceinline __declspec(__host__) __declspec(__device__) float2 make_float2(const uint2& a)
{
  return make_float2(float(a.x), float(a.y));
}



__forceinline __declspec(__host__) __declspec(__device__) float2 operator-(const float2& a)
{
  return make_float2(-a.x, -a.y);
}




__forceinline __declspec(__host__) __declspec(__device__) float2 fminf(const float2& a, const float2& b)
{
  return make_float2(fminf(a.x,b.x), fminf(a.y,b.y));
}
__forceinline __declspec(__host__) __declspec(__device__) float fminf(const float2& a)
{
  return fminf(a.x, a.y);
}





__forceinline __declspec(__host__) __declspec(__device__) float2 fmaxf(const float2& a, const float2& b)
{
  return make_float2(fmaxf(a.x,b.x), fmaxf(a.y,b.y));
}
__forceinline __declspec(__host__) __declspec(__device__) float fmaxf(const float2& a)
{
  return fmaxf(a.x, a.y);
}





__forceinline __declspec(__host__) __declspec(__device__) float2 operator+(const float2& a, const float2& b)
{
  return make_float2(a.x + b.x, a.y + b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator+(const float2& a, const float b)
{
  return make_float2(a.x + b, a.y + b);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator+(const float a, const float2& b)
{
  return make_float2(a + b.x, a + b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(float2& a, const float2& b)
{
  a.x += b.x; a.y += b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) float2 operator-(const float2& a, const float2& b)
{
  return make_float2(a.x - b.x, a.y - b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator-(const float2& a, const float b)
{
  return make_float2(a.x - b, a.y - b);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator-(const float a, const float2& b)
{
  return make_float2(a - b.x, a - b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator-=(float2& a, const float2& b)
{
  a.x -= b.x; a.y -= b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) float2 operator*(const float2& a, const float2& b)
{
  return make_float2(a.x * b.x, a.y * b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator*(const float2& a, const float s)
{
  return make_float2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator*(const float s, const float2& a)
{
  return make_float2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float2& a, const float2& s)
{
  a.x *= s.x; a.y *= s.y;
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float2& a, const float s)
{
  a.x *= s; a.y *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) float2 operator/(const float2& a, const float2& b)
{
  return make_float2(a.x / b.x, a.y / b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator/(const float2& a, const float s)
{
  float inv = 1.0f / s;
  return a * inv;
}
__forceinline __declspec(__host__) __declspec(__device__) float2 operator/(const float s, const float2& a)
{
  return make_float2( s/a.x, s/a.y );
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(float2& a, const float s)
{
  float inv = 1.0f / s;
  a *= inv;
}



__forceinline __declspec(__host__) __declspec(__device__) float2 lerp(const float2& a, const float2& b, const float t)
{
  return a + t*(b-a);
}


__forceinline __declspec(__host__) __declspec(__device__) float2 bilerp(const float2& x00, const float2& x10, const float2& x01, const float2& x11,
                                          const float u, const float v)
{
  return lerp( lerp( x00, x10, u ), lerp( x01, x11, u ), v );
}




__forceinline __declspec(__host__) __declspec(__device__) float2 clamp(const float2& v, const float a, const float b)
{
  return make_float2(clamp(v.x, a, b), clamp(v.y, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) float2 clamp(const float2& v, const float2& a, const float2& b)
{
  return make_float2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}



__forceinline __declspec(__host__) __declspec(__device__) float dot(const float2& a, const float2& b)
{
  return a.x * b.x + a.y * b.y;
}


__forceinline __declspec(__host__) __declspec(__device__) float length(const float2& v)
{
  return sqrtf(dot(v, v));
}


__forceinline __declspec(__host__) __declspec(__device__) float2 normalize(const float2& v)
{
  float invLen = 1.0f / sqrtf(dot(v, v));
  return v * invLen;
}


__forceinline __declspec(__host__) __declspec(__device__) float2 floor(const float2& v)
{
  return make_float2(::floorf(v.x), ::floorf(v.y));
}


__forceinline __declspec(__host__) __declspec(__device__) float2 reflect(const float2& i, const float2& n)
{
  return i - 2.0f * n * dot(n,i);
}





__forceinline __declspec(__host__) __declspec(__device__) float2 faceforward(const float2& n, const float2& i, const float2& nref)
{
  return n * copysignf( 1.0f, dot(i, nref) );
}


__forceinline __declspec(__host__) __declspec(__device__) float2 expf(const float2& v)
{
  return make_float2(::expf(v.x), ::expf(v.y));
}


__forceinline __declspec(__host__) __declspec(__device__) float getByIndex(const float2& v, int i)
{
  return ((float*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(float2& v, int i, float x)
{
  ((float*)(&v))[i] = x;
}








__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const float s)
{
  return make_float3(s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const float2& a)
{
  return make_float3(a.x, a.y, 0.0f);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const int3& a)
{
  return make_float3(float(a.x), float(a.y), float(a.z));
}
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const uint3& a)
{
  return make_float3(float(a.x), float(a.y), float(a.z));
}



__forceinline __declspec(__host__) __declspec(__device__) float3 operator-(const float3& a)
{
  return make_float3(-a.x, -a.y, -a.z);
}




__forceinline __declspec(__host__) __declspec(__device__) float3 fminf(const float3& a, const float3& b)
{
  return make_float3(fminf(a.x,b.x), fminf(a.y,b.y), fminf(a.z,b.z));
}
__forceinline __declspec(__host__) __declspec(__device__) float fminf(const float3& a)
{
  return fminf(fminf(a.x, a.y), a.z);
}





__forceinline __declspec(__host__) __declspec(__device__) float3 fmaxf(const float3& a, const float3& b)
{
  return make_float3(fmaxf(a.x,b.x), fmaxf(a.y,b.y), fmaxf(a.z,b.z));
}
__forceinline __declspec(__host__) __declspec(__device__) float fmaxf(const float3& a)
{
  return fmaxf(fmaxf(a.x, a.y), a.z);
}





__forceinline __declspec(__host__) __declspec(__device__) float3 operator+(const float3& a, const float3& b)
{
  return make_float3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator+(const float3& a, const float b)
{
  return make_float3(a.x + b, a.y + b, a.z + b);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator+(const float a, const float3& b)
{
  return make_float3(a + b.x, a + b.y, a + b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(float3& a, const float3& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) float3 operator-(const float3& a, const float3& b)
{
  return make_float3(a.x - b.x, a.y - b.y, a.z - b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator-(const float3& a, const float b)
{
  return make_float3(a.x - b, a.y - b, a.z - b);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator-(const float a, const float3& b)
{
  return make_float3(a - b.x, a - b.y, a - b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator-=(float3& a, const float3& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) float3 operator*(const float3& a, const float3& b)
{
  return make_float3(a.x * b.x, a.y * b.y, a.z * b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator*(const float3& a, const float s)
{
  return make_float3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator*(const float s, const float3& a)
{
  return make_float3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float3& a, const float3& s)
{
  a.x *= s.x; a.y *= s.y; a.z *= s.z;
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float3& a, const float s)
{
  a.x *= s; a.y *= s; a.z *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) float3 operator/(const float3& a, const float3& b)
{
  return make_float3(a.x / b.x, a.y / b.y, a.z / b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator/(const float3& a, const float s)
{
  float inv = 1.0f / s;
  return a * inv;
}
__forceinline __declspec(__host__) __declspec(__device__) float3 operator/(const float s, const float3& a)
{
  return make_float3( s/a.x, s/a.y, s/a.z );
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(float3& a, const float s)
{
  float inv = 1.0f / s;
  a *= inv;
}



__forceinline __declspec(__host__) __declspec(__device__) float3 lerp(const float3& a, const float3& b, const float t)
{
  return a + t*(b-a);
}


__forceinline __declspec(__host__) __declspec(__device__) float3 bilerp(const float3& x00, const float3& x10, const float3& x01, const float3& x11,
                                          const float u, const float v)
{
  return lerp( lerp( x00, x10, u ), lerp( x01, x11, u ), v );
}




__forceinline __declspec(__host__) __declspec(__device__) float3 clamp(const float3& v, const float a, const float b)
{
  return make_float3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) float3 clamp(const float3& v, const float3& a, const float3& b)
{
  return make_float3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z));
}



__forceinline __declspec(__host__) __declspec(__device__) float dot(const float3& a, const float3& b)
{
  return a.x * b.x + a.y * b.y + a.z * b.z;
}


__forceinline __declspec(__host__) __declspec(__device__) float3 cross(const float3& a, const float3& b)
{
  return make_float3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
}


__forceinline __declspec(__host__) __declspec(__device__) float length(const float3& v)
{
  return sqrtf(dot(v, v));
}


__forceinline __declspec(__host__) __declspec(__device__) float3 normalize(const float3& v)
{
  float invLen = 1.0f / sqrtf(dot(v, v));
  return v * invLen;
}


__forceinline __declspec(__host__) __declspec(__device__) float3 floor(const float3& v)
{
  return make_float3(::floorf(v.x), ::floorf(v.y), ::floorf(v.z));
}


__forceinline __declspec(__host__) __declspec(__device__) float3 reflect(const float3& i, const float3& n)
{
  return i - 2.0f * n * dot(n,i);
}





__forceinline __declspec(__host__) __declspec(__device__) float3 faceforward(const float3& n, const float3& i, const float3& nref)
{
  return n * copysignf( 1.0f, dot(i, nref) );
}


__forceinline __declspec(__host__) __declspec(__device__) float3 expf(const float3& v)
{
  return make_float3(::expf(v.x), ::expf(v.y), ::expf(v.z));
}


__forceinline __declspec(__host__) __declspec(__device__) float getByIndex(const float3& v, int i)
{
  return ((float*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(float3& v, int i, float x)
{
  ((float*)(&v))[i] = x;
}
  






__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float s)
{
  return make_float4(s, s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float3& a)
{
  return make_float4(a.x, a.y, a.z, 0.0f);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const int4& a)
{
  return make_float4(float(a.x), float(a.y), float(a.z), float(a.w));
}
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const uint4& a)
{
  return make_float4(float(a.x), float(a.y), float(a.z), float(a.w));
}



__forceinline __declspec(__host__) __declspec(__device__) float4 operator-(const float4& a)
{
  return make_float4(-a.x, -a.y, -a.z, -a.w);
}




__forceinline __declspec(__host__) __declspec(__device__) float4 fminf(const float4& a, const float4& b)
{
  return make_float4(fminf(a.x,b.x), fminf(a.y,b.y), fminf(a.z,b.z), fminf(a.w,b.w));
}
__forceinline __declspec(__host__) __declspec(__device__) float fminf(const float4& a)
{
  return fminf(fminf(a.x, a.y), fminf(a.z, a.w));
}





__forceinline __declspec(__host__) __declspec(__device__) float4 fmaxf(const float4& a, const float4& b)
{
  return make_float4(fmaxf(a.x,b.x), fmaxf(a.y,b.y), fmaxf(a.z,b.z), fmaxf(a.w,b.w));
}
__forceinline __declspec(__host__) __declspec(__device__) float fmaxf(const float4& a)
{
  return fmaxf(fmaxf(a.x, a.y), fmaxf(a.z, a.w));
}





__forceinline __declspec(__host__) __declspec(__device__) float4 operator+(const float4& a, const float4& b)
{
  return make_float4(a.x + b.x, a.y + b.y, a.z + b.z,  a.w + b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator+(const float4& a, const float b)
{
  return make_float4(a.x + b, a.y + b, a.z + b,  a.w + b);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator+(const float a, const float4& b)
{
  return make_float4(a + b.x, a + b.y, a + b.z,  a + b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(float4& a, const float4& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) float4 operator-(const float4& a, const float4& b)
{
  return make_float4(a.x - b.x, a.y - b.y, a.z - b.z,  a.w - b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator-(const float4& a, const float b)
{
  return make_float4(a.x - b, a.y - b, a.z - b,  a.w - b);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator-(const float a, const float4& b)
{
  return make_float4(a - b.x, a - b.y, a - b.z,  a - b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator-=(float4& a, const float4& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const float4& a, const float4& s)
{
  return make_float4(a.x * s.x, a.y * s.y, a.z * s.z, a.w * s.w);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const float4& a, const float s)
{
  return make_float4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const float s, const float4& a)
{
  return make_float4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float4& a, const float4& s)
{
  a.x *= s.x; a.y *= s.y; a.z *= s.z; a.w *= s.w;
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(float4& a, const float s)
{
  a.x *= s; a.y *= s; a.z *= s; a.w *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) float4 operator/(const float4& a, const float4& b)
{
  return make_float4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator/(const float4& a, const float s)
{
  float inv = 1.0f / s;
  return a * inv;
}
__forceinline __declspec(__host__) __declspec(__device__) float4 operator/(const float s, const float4& a)
{
  return make_float4( s/a.x, s/a.y, s/a.z, s/a.w );
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(float4& a, const float s)
{
  float inv = 1.0f / s;
  a *= inv;
}



__forceinline __declspec(__host__) __declspec(__device__) float4 lerp(const float4& a, const float4& b, const float t)
{
  return a + t*(b-a);
}


__forceinline __declspec(__host__) __declspec(__device__) float4 bilerp(const float4& x00, const float4& x10, const float4& x01, const float4& x11,
                                          const float u, const float v)
{
  return lerp( lerp( x00, x10, u ), lerp( x01, x11, u ), v );
}




__forceinline __declspec(__host__) __declspec(__device__) float4 clamp(const float4& v, const float a, const float b)
{
  return make_float4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b), clamp(v.w, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) float4 clamp(const float4& v, const float4& a, const float4& b)
{
  return make_float4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}



__forceinline __declspec(__host__) __declspec(__device__) float dot(const float4& a, const float4& b)
{
  return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}


__forceinline __declspec(__host__) __declspec(__device__) float length(const float4& r)
{
  return sqrtf(dot(r, r));
}


__forceinline __declspec(__host__) __declspec(__device__) float4 normalize(const float4& v)
{
  float invLen = 1.0f / sqrtf(dot(v, v));
  return v * invLen;
}


__forceinline __declspec(__host__) __declspec(__device__) float4 floor(const float4& v)
{
  return make_float4(::floorf(v.x), ::floorf(v.y), ::floorf(v.z), ::floorf(v.w));
}


__forceinline __declspec(__host__) __declspec(__device__) float4 reflect(const float4& i, const float4& n)
{
  return i - 2.0f * n * dot(n,i);
}







__forceinline __declspec(__host__) __declspec(__device__) float4 faceforward(const float4& n, const float4& i, const float4& nref)
{
  return n * copysignf( 1.0f, dot(i, nref) );
}


__forceinline __declspec(__host__) __declspec(__device__) float4 expf(const float4& v)
{
  return make_float4(::expf(v.x), ::expf(v.y), ::expf(v.z), ::expf(v.w));
}


__forceinline __declspec(__host__) __declspec(__device__) float getByIndex(const float4& v, int i)
{
  return ((float*)(&v))[i];
}


__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(float4& v, int i, float x)
{
  ((float*)(&v))[i] = x;
}
  
  




__forceinline __declspec(__host__) __declspec(__device__) int clamp(const int f, const int a, const int b)
{
  return max(a, min(f, b));
}


__forceinline __declspec(__host__) __declspec(__device__) int getByIndex(const int1& v, int i)
{
  return ((int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(int1& v, int i, int x)
{
  ((int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) int2 make_int2(const int s)
{
  return make_int2(s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) int2 make_int2(const float2& a)
{
  return make_int2(int(a.x), int(a.y));
}



__forceinline __declspec(__host__) __declspec(__device__) int2 operator-(const int2& a)
{
  return make_int2(-a.x, -a.y);
}


__forceinline __declspec(__host__) __declspec(__device__) int2 min(const int2& a, const int2& b)
{
  return make_int2(min(a.x,b.x), min(a.y,b.y));
}


__forceinline __declspec(__host__) __declspec(__device__) int2 max(const int2& a, const int2& b)
{
  return make_int2(max(a.x,b.x), max(a.y,b.y));
}




__forceinline __declspec(__host__) __declspec(__device__) int2 operator+(const int2& a, const int2& b)
{
  return make_int2(a.x + b.x, a.y + b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(int2& a, const int2& b)
{
  a.x += b.x; a.y += b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) int2 operator-(const int2& a, const int2& b)
{
  return make_int2(a.x - b.x, a.y - b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) int2 operator-(const int2& a, const int b)
{
  return make_int2(a.x - b, a.y - b);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator-=(int2& a, const int2& b)
{
  a.x -= b.x; a.y -= b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) int2 operator*(const int2& a, const int2& b)
{
  return make_int2(a.x * b.x, a.y * b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) int2 operator*(const int2& a, const int s)
{
  return make_int2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) int2 operator*(const int s, const int2& a)
{
  return make_int2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(int2& a, const int s)
{
  a.x *= s; a.y *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) int2 clamp(const int2& v, const int a, const int b)
{
  return make_int2(clamp(v.x, a, b), clamp(v.y, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) int2 clamp(const int2& v, const int2& a, const int2& b)
{
  return make_int2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const int2& a, const int2& b)
{
  return a.x == b.x && a.y == b.y;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const int2& a, const int2& b)
{
  return a.x != b.x || a.y != b.y;
}



__forceinline __declspec(__host__) __declspec(__device__) int getByIndex(const int2& v, int i)
{
  return ((int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(int2& v, int i, int x)
{
  ((int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) int3 make_int3(const int s)
{
  return make_int3(s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) int3 make_int3(const float3& a)
{
  return make_int3(int(a.x), int(a.y), int(a.z));
}



__forceinline __declspec(__host__) __declspec(__device__) int3 operator-(const int3& a)
{
  return make_int3(-a.x, -a.y, -a.z);
}


__forceinline __declspec(__host__) __declspec(__device__) int3 min(const int3& a, const int3& b)
{
  return make_int3(min(a.x,b.x), min(a.y,b.y), min(a.z,b.z));
}


__forceinline __declspec(__host__) __declspec(__device__) int3 max(const int3& a, const int3& b)
{
  return make_int3(max(a.x,b.x), max(a.y,b.y), max(a.z,b.z));
}




__forceinline __declspec(__host__) __declspec(__device__) int3 operator+(const int3& a, const int3& b)
{
  return make_int3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(int3& a, const int3& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) int3 operator-(const int3& a, const int3& b)
{
  return make_int3(a.x - b.x, a.y - b.y, a.z - b.z);
}

__forceinline __declspec(__host__) __declspec(__device__) void operator-=(int3& a, const int3& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) int3 operator*(const int3& a, const int3& b)
{
  return make_int3(a.x * b.x, a.y * b.y, a.z * b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) int3 operator*(const int3& a, const int s)
{
  return make_int3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) int3 operator*(const int s, const int3& a)
{
  return make_int3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(int3& a, const int s)
{
  a.x *= s; a.y *= s; a.z *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) int3 operator/(const int3& a, const int3& b)
{
  return make_int3(a.x / b.x, a.y / b.y, a.z / b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) int3 operator/(const int3& a, const int s)
{
  return make_int3(a.x / s, a.y / s, a.z / s);
}
__forceinline __declspec(__host__) __declspec(__device__) int3 operator/(const int s, const int3& a)
{
  return make_int3(s /a.x, s / a.y, s / a.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(int3& a, const int s)
{
  a.x /= s; a.y /= s; a.z /= s;
}





__forceinline __declspec(__host__) __declspec(__device__) int3 clamp(const int3& v, const int a, const int b)
{
  return make_int3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) int3 clamp(const int3& v, const int3& a, const int3& b)
{
  return make_int3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const int3& a, const int3& b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const int3& a, const int3& b)
{
  return a.x != b.x || a.y != b.y || a.z != b.z;
}



__forceinline __declspec(__host__) __declspec(__device__) int getByIndex(const int3& v, int i)
{
  return ((int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(int3& v, int i, int x)
{
  ((int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int s)
{
  return make_int4(s, s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const float4& a)
{
  return make_int4((int)a.x, (int)a.y, (int)a.z, (int)a.w);
}



__forceinline __declspec(__host__) __declspec(__device__) int4 operator-(const int4& a)
{
  return make_int4(-a.x, -a.y, -a.z, -a.w);
}


__forceinline __declspec(__host__) __declspec(__device__) int4 min(const int4& a, const int4& b)
{
  return make_int4(min(a.x,b.x), min(a.y,b.y), min(a.z,b.z), min(a.w,b.w));
}


__forceinline __declspec(__host__) __declspec(__device__) int4 max(const int4& a, const int4& b)
{
  return make_int4(max(a.x,b.x), max(a.y,b.y), max(a.z,b.z), max(a.w,b.w));
}




__forceinline __declspec(__host__) __declspec(__device__) int4 operator+(const int4& a, const int4& b)
{
  return make_int4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(int4& a, const int4& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) int4 operator-(const int4& a, const int4& b)
{
  return make_int4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}

__forceinline __declspec(__host__) __declspec(__device__) void operator-=(int4& a, const int4& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) int4 operator*(const int4& a, const int4& b)
{
  return make_int4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) int4 operator*(const int4& a, const int s)
{
  return make_int4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) int4 operator*(const int s, const int4& a)
{
  return make_int4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(int4& a, const int s)
{
  a.x *= s; a.y *= s; a.z *= s; a.w *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) int4 operator/(const int4& a, const int4& b)
{
  return make_int4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) int4 operator/(const int4& a, const int s)
{
  return make_int4(a.x / s, a.y / s, a.z / s, a.w / s);
}
__forceinline __declspec(__host__) __declspec(__device__) int4 operator/(const int s, const int4& a)
{
  return make_int4(s / a.x, s / a.y, s / a.z, s / a.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(int4& a, const int s)
{
  a.x /= s; a.y /= s; a.z /= s; a.w /= s;
}





__forceinline __declspec(__host__) __declspec(__device__) int4 clamp(const int4& v, const int a, const int b)
{
  return make_int4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b), clamp(v.w, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) int4 clamp(const int4& v, const int4& a, const int4& b)
{
  return make_int4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const int4& a, const int4& b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z && a.w == b.w;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const int4& a, const int4& b)
{
  return a.x != b.x || a.y != b.y || a.z != b.z || a.w != b.w;
}



__forceinline __declspec(__host__) __declspec(__device__) int getByIndex(const int4& v, int i)
{
  return ((int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(int4& v, int i, int x)
{
  ((int*)(&v))[i] = x;
}
  





__forceinline __declspec(__host__) __declspec(__device__) unsigned int clamp(const unsigned int f, const unsigned int a, const unsigned int b)
{
  return max(a, min(f, b));
}


__forceinline __declspec(__host__) __declspec(__device__) unsigned int getByIndex(const uint1& v, unsigned int i)
{
  return ((unsigned int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(uint1& v, int i, unsigned int x)
{
  ((unsigned int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) uint2 make_uint2(const unsigned int s)
{
  return make_uint2(s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint2 make_uint2(const float2& a)
{
  return make_uint2((unsigned int)a.x, (unsigned int)a.y);
}



__forceinline __declspec(__host__) __declspec(__device__) uint2 min(const uint2& a, const uint2& b)
{
  return make_uint2(min(a.x,b.x), min(a.y,b.y));
}


__forceinline __declspec(__host__) __declspec(__device__) uint2 max(const uint2& a, const uint2& b)
{
  return make_uint2(max(a.x,b.x), max(a.y,b.y));
}




__forceinline __declspec(__host__) __declspec(__device__) uint2 operator+(const uint2& a, const uint2& b)
{
  return make_uint2(a.x + b.x, a.y + b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(uint2& a, const uint2& b)
{
  a.x += b.x; a.y += b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) uint2 operator-(const uint2& a, const uint2& b)
{
  return make_uint2(a.x - b.x, a.y - b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) uint2 operator-(const uint2& a, const unsigned int b)
{
  return make_uint2(a.x - b, a.y - b);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator-=(uint2& a, const uint2& b)
{
  a.x -= b.x; a.y -= b.y;
}





__forceinline __declspec(__host__) __declspec(__device__) uint2 operator*(const uint2& a, const uint2& b)
{
  return make_uint2(a.x * b.x, a.y * b.y);
}
__forceinline __declspec(__host__) __declspec(__device__) uint2 operator*(const uint2& a, const unsigned int s)
{
  return make_uint2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint2 operator*(const unsigned int s, const uint2& a)
{
  return make_uint2(a.x * s, a.y * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(uint2& a, const unsigned int s)
{
  a.x *= s; a.y *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) uint2 clamp(const uint2& v, const unsigned int a, const unsigned int b)
{
  return make_uint2(clamp(v.x, a, b), clamp(v.y, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) uint2 clamp(const uint2& v, const uint2& a, const uint2& b)
{
  return make_uint2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const uint2& a, const uint2& b)
{
  return a.x == b.x && a.y == b.y;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const uint2& a, const uint2& b)
{
  return a.x != b.x || a.y != b.y;
}



__forceinline __declspec(__host__) __declspec(__device__) unsigned int getByIndex(const uint2& v, unsigned int i)
{
  return ((unsigned int*)(&v))[i];
}
  

__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(uint2& v, int i, unsigned int x)
{
  ((unsigned int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) uint3 make_uint3(const unsigned int s)
{
  return make_uint3(s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint3 make_uint3(const float3& a)
{
  return make_uint3((unsigned int)a.x, (unsigned int)a.y, (unsigned int)a.z);
}



__forceinline __declspec(__host__) __declspec(__device__) uint3 min(const uint3& a, const uint3& b)
{
  return make_uint3(min(a.x,b.x), min(a.y,b.y), min(a.z,b.z));
}


__forceinline __declspec(__host__) __declspec(__device__) uint3 max(const uint3& a, const uint3& b)
{
  return make_uint3(max(a.x,b.x), max(a.y,b.y), max(a.z,b.z));
}




__forceinline __declspec(__host__) __declspec(__device__) uint3 operator+(const uint3& a, const uint3& b)
{
  return make_uint3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(uint3& a, const uint3& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) uint3 operator-(const uint3& a, const uint3& b)
{
  return make_uint3(a.x - b.x, a.y - b.y, a.z - b.z);
}

__forceinline __declspec(__host__) __declspec(__device__) void operator-=(uint3& a, const uint3& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z;
}





__forceinline __declspec(__host__) __declspec(__device__) uint3 operator*(const uint3& a, const uint3& b)
{
  return make_uint3(a.x * b.x, a.y * b.y, a.z * b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) uint3 operator*(const uint3& a, const unsigned int s)
{
  return make_uint3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint3 operator*(const unsigned int s, const uint3& a)
{
  return make_uint3(a.x * s, a.y * s, a.z * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(uint3& a, const unsigned int s)
{
  a.x *= s; a.y *= s; a.z *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) uint3 operator/(const uint3& a, const uint3& b)
{
  return make_uint3(a.x / b.x, a.y / b.y, a.z / b.z);
}
__forceinline __declspec(__host__) __declspec(__device__) uint3 operator/(const uint3& a, const unsigned int s)
{
  return make_uint3(a.x / s, a.y / s, a.z / s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint3 operator/(const unsigned int s, const uint3& a)
{
  return make_uint3(s / a.x, s / a.y, s / a.z);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(uint3& a, const unsigned int s)
{
  a.x /= s; a.y /= s; a.z /= s;
}





__forceinline __declspec(__host__) __declspec(__device__) uint3 clamp(const uint3& v, const unsigned int a, const unsigned int b)
{
  return make_uint3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) uint3 clamp(const uint3& v, const uint3& a, const uint3& b)
{
  return make_uint3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const uint3& a, const uint3& b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const uint3& a, const uint3& b)
{
  return a.x != b.x || a.y != b.y || a.z != b.z;
}




__forceinline __declspec(__host__) __declspec(__device__) unsigned int getByIndex(const uint3& v, unsigned int i)
{
  return ((unsigned int*)(&v))[i];
}
  


__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(uint3& v, int i, unsigned int x)
{
  ((unsigned int*)(&v))[i] = x;
}
  







__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const unsigned int s)
{
  return make_uint4(s, s, s, s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const float4& a)
{
  return make_uint4((unsigned int)a.x, (unsigned int)a.y, (unsigned int)a.z, (unsigned int)a.w);
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 min(const uint4& a, const uint4& b)
{
  return make_uint4(min(a.x,b.x), min(a.y,b.y), min(a.z,b.z), min(a.w,b.w));
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 max(const uint4& a, const uint4& b)
{
  return make_uint4(max(a.x,b.x), max(a.y,b.y), max(a.z,b.z), max(a.w,b.w));
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 operator+(const uint4& a, const uint4& b)
{
  return make_uint4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator+=(uint4& a, const uint4& b)
{
  a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 operator-(const uint4& a, const uint4& b)
{
  return make_uint4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}

__forceinline __declspec(__host__) __declspec(__device__) void operator-=(uint4& a, const uint4& b)
{
  a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w;
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 operator*(const uint4& a, const uint4& b)
{
  return make_uint4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) uint4 operator*(const uint4& a, const unsigned int s)
{
  return make_uint4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint4 operator*(const unsigned int s, const uint4& a)
{
  return make_uint4(a.x * s, a.y * s, a.z * s, a.w * s);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator*=(uint4& a, const unsigned int s)
{
  a.x *= s; a.y *= s; a.z *= s; a.w *= s;
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 operator/(const uint4& a, const uint4& b)
{
  return make_uint4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
__forceinline __declspec(__host__) __declspec(__device__) uint4 operator/(const uint4& a, const unsigned int s)
{
  return make_uint4(a.x / s, a.y / s, a.z / s, a.w / s);
}
__forceinline __declspec(__host__) __declspec(__device__) uint4 operator/(const unsigned int s, const uint4& a)
{
  return make_uint4(s / a.x, s / a.y, s / a.z, s / a.w);
}
__forceinline __declspec(__host__) __declspec(__device__) void operator/=(uint4& a, const unsigned int s)
{
  a.x /= s; a.y /= s; a.z /= s; a.w /= s;
}





__forceinline __declspec(__host__) __declspec(__device__) uint4 clamp(const uint4& v, const unsigned int a, const unsigned int b)
{
  return make_uint4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b), clamp(v.w, a, b));
}

__forceinline __declspec(__host__) __declspec(__device__) uint4 clamp(const uint4& v, const uint4& a, const uint4& b)
{
  return make_uint4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}





__forceinline __declspec(__host__) __declspec(__device__) bool operator==(const uint4& a, const uint4& b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z && a.w == b.w;
}

__forceinline __declspec(__host__) __declspec(__device__) bool operator!=(const uint4& a, const uint4& b)
{
  return a.x != b.x || a.y != b.y || a.z != b.z || a.w != b.w;
}




__forceinline __declspec(__host__) __declspec(__device__) unsigned int getByIndex(const uint4& v, unsigned int i)
{
  return ((unsigned int*)(&v))[i];
}
  


__forceinline __declspec(__host__) __declspec(__device__) void setByIndex(uint4& v, int i, unsigned int x)
{
  ((unsigned int*)(&v))[i] = x;
}
  






__forceinline __declspec(__host__) __declspec(__device__) int2 make_int2(const int3& v0) { return make_int2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) int2 make_int2(const int4& v0) { return make_int2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) int3 make_int3(const int4& v0) { return make_int3( v0.x, v0.y, v0.z ); }
__forceinline __declspec(__host__) __declspec(__device__) uint2 make_uint2(const uint3& v0) { return make_uint2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) uint2 make_uint2(const uint4& v0) { return make_uint2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) uint3 make_uint3(const uint4& v0) { return make_uint3( v0.x, v0.y, v0.z ); }
__forceinline __declspec(__host__) __declspec(__device__) float2 make_float2(const float3& v0) { return make_float2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) float2 make_float2(const float4& v0) { return make_float2( v0.x, v0.y ); }
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const float4& v0) { return make_float3( v0.x, v0.y, v0.z ); }





__forceinline __declspec(__host__) __declspec(__device__) int3 make_int3(const int v0, const int2& v1) { return make_int3( v0, v1.x, v1.y ); }
__forceinline __declspec(__host__) __declspec(__device__) int3 make_int3(const int2& v0, const int v1) { return make_int3( v0.x, v0.y, v1 ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int v0, const int v1, const int2& v2) { return make_int4( v0, v1, v2.x, v2.y ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int v0, const int2& v1, const int v2) { return make_int4( v0, v1.x, v1.y, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int2& v0, const int v1, const int v2) { return make_int4( v0.x, v0.y, v1, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int v0, const int3& v1) { return make_int4( v0, v1.x, v1.y, v1.z ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int3& v0, const int v1) { return make_int4( v0.x, v0.y, v0.z, v1 ); }
__forceinline __declspec(__host__) __declspec(__device__) int4 make_int4(const int2& v0, const int2& v1) { return make_int4( v0.x, v0.y, v1.x, v1.y ); }
__forceinline __declspec(__host__) __declspec(__device__) uint3 make_uint3(const unsigned int v0, const uint2& v1) { return make_uint3( v0, v1.x, v1.y ); }
__forceinline __declspec(__host__) __declspec(__device__) uint3 make_uint3(const uint2& v0, const unsigned int v1) { return make_uint3( v0.x, v0.y, v1 ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const unsigned int v0, const unsigned int v1, const uint2& v2) { return make_uint4( v0, v1, v2.x, v2.y ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const unsigned int v0, const uint2& v1, const unsigned int v2) { return make_uint4( v0, v1.x, v1.y, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const uint2& v0, const unsigned int v1, const unsigned int v2) { return make_uint4( v0.x, v0.y, v1, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const unsigned int v0, const uint3& v1) { return make_uint4( v0, v1.x, v1.y, v1.z ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const uint3& v0, const unsigned int v1) { return make_uint4( v0.x, v0.y, v0.z, v1 ); }
__forceinline __declspec(__host__) __declspec(__device__) uint4 make_uint4(const uint2& v0, const uint2& v1) { return make_uint4( v0.x, v0.y, v1.x, v1.y ); }
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const float2& v0, const float v1) { return make_float3(v0.x, v0.y, v1); }
__forceinline __declspec(__host__) __declspec(__device__) float3 make_float3(const float v0, const float2& v1) { return make_float3( v0, v1.x, v1.y ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float v0, const float v1, const float2& v2) { return make_float4( v0, v1, v2.x, v2.y ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float v0, const float2& v1, const float v2) { return make_float4( v0, v1.x, v1.y, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float2& v0, const float v1, const float v2) { return make_float4( v0.x, v0.y, v1, v2 ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float v0, const float3& v1) { return make_float4( v0, v1.x, v1.y, v1.z ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float3& v0, const float v1) { return make_float4( v0.x, v0.y, v0.z, v1 ); }
__forceinline __declspec(__host__) __declspec(__device__) float4 make_float4(const float2& v0, const float2& v1) { return make_float4( v0.x, v0.y, v1.x, v1.y ); }









__forceinline __declspec(__host__) __declspec(__device__) float smoothstep(const float edge0, const float edge1, const float x)
{
  
  const float t = clamp( (x-edge0) / (edge1-edge0), 0.0f, 1.0f );
  return t*t * ( 3.0f - 2.0f*t );
}



__forceinline __declspec(__host__) __declspec(__device__) float3 temperature(const float t)
{
  const float b = t < 0.25f ? smoothstep( -0.25f, 0.25f, t ) : 1.0f-smoothstep( 0.25f, 0.5f, t );
  const float g = t < 0.5f  ? smoothstep( 0.0f, 0.5f, t ) : (t < 0.75f ? 1.0f : 1.0f-smoothstep( 0.75f, 1.0f, t ));
  const float r = smoothstep( 0.5f, 0.75f, t );
  return make_float3( r, g, b );
}



__forceinline __declspec(__host__) __declspec(__device__) bool intersect_triangle_branchless(const Ray&    ray,
                                                               const float3& p0,
                                                               const float3& p1,
                                                               const float3& p2,
                                                                     float3& n,
                                                                     float&  t,
                                                                     float&  beta,
                                                                     float&  gamma)
{
  const float3 e0 = p1 - p0;
  const float3 e1 = p0 - p2;
  n  = cross( e1, e0 );

  const float3 e2 = ( 1.0f / dot( n, ray.direction ) ) * ( p0 - ray.origin );
  const float3 i  = cross( ray.direction, e2 );

  beta  = dot( i, e1 );
  gamma = dot( i, e0 );
  t     = dot( n, e2 );

  return ( (t<ray.tmax) & (t>ray.tmin) & (beta>=0.0f) & (gamma>=0.0f) & (beta+gamma<=1) );
}



__forceinline __declspec(__host__) __declspec(__device__) bool intersect_triangle_earlyexit(const Ray&    ray,
                                                              const float3& p0,
                                                              const float3& p1,
                                                              const float3& p2,
                                                                    float3& n,
                                                                    float&  t,
                                                                    float&  beta,
                                                                    float&  gamma)
{
  float3 e0 = p1 - p0;
  float3 e1 = p0 - p2;
  n  = cross( e0, e1 );

  float v   = dot( n, ray.direction );
  float r   = 1.0f / v;

  float3 e2 = p0 - ray.origin;
  float va  = dot( n, e2 );
  t         = r*va;

  
  
  beta = 0;
  gamma = 0;
  
  if(t < ray.tmax && t > ray.tmin) {
    float3 i   = cross( e2, ray.direction );
    float v1   = dot( i, e1 );
    beta = r*v1;
    if(beta >= 0.0f){
      float v2 = dot( i, e0 );
      gamma = r*v2;
      n = -n;
      return ( (v1+v2)*v <= v*v && gamma >= 0.0f );
    }
  }
  return false;
}

 
__forceinline __declspec(__host__) __declspec(__device__) bool intersect_triangle(const Ray&    ray,
                                                    const float3& p0,
                                                    const float3& p1,
                                                    const float3& p2,
                                                          float3& n,
                                                          float&  t,
                                                          float&  beta,
                                                          float&  gamma)
{
  return intersect_triangle_branchless(ray, p0, p1, p2, n, t, beta, gamma);  
}











__forceinline __declspec(__host__) __declspec(__device__) bool refract(float3& r, const float3& i, const float3& n, const float ior)
{
  float3 nn = n;
  float negNdotV = dot(i,nn);
  float eta;

  if (negNdotV > 0.0f)
  {
    eta = ior;
    nn = -n;
    negNdotV = -negNdotV;
  }
  else
  {
    eta = 1.f / ior;
  }

  const float k = 1.f - eta*eta * (1.f - negNdotV * negNdotV);

  if (k < 0.0f) {
    
    r = make_float3(0.f);
    return false;
  } else {
    r = normalize(eta*i - (eta*negNdotV + sqrtf(k)) * nn);
    return true;
  }
}



__forceinline __declspec(__host__) __declspec(__device__) float fresnel_schlick(const float cos_theta, const float exponent = 5.0f,
                                                  const float minimum = 0.0f, const float maximum = 1.0f)
{
  






  


  return clamp(minimum + (maximum - minimum) * powf(fmaxf(0.0f,1.0f - cos_theta), exponent),
               minimum, maximum);
}

__forceinline __declspec(__host__) __declspec(__device__) float3 fresnel_schlick(const float cos_theta, const float exponent,
                                                   const float3& minimum, const float3& maximum)
{
  return make_float3(fresnel_schlick(cos_theta, exponent, minimum.x, maximum.x),
                     fresnel_schlick(cos_theta, exponent, minimum.y, maximum.y),
                     fresnel_schlick(cos_theta, exponent, minimum.z, maximum.z));
}




__forceinline __declspec(__host__) __declspec(__device__) float luminance(const float3& rgb)
{
  const float3 ntsc_luminance = { 0.30f, 0.59f, 0.11f };
  return  dot( rgb, ntsc_luminance );
}



__forceinline __declspec(__host__) __declspec(__device__) float luminanceCIE(const float3& rgb)
{
  const float3 cie_luminance = { 0.2126f, 0.7152f, 0.0722f };
  return  dot( rgb, cie_luminance );
}

__forceinline __declspec(__host__) __declspec(__device__) void cosine_sample_hemisphere(const float u1, const float u2, float3& p)
{
  
  const float r   = sqrtf( u1 );
  const float phi = 2.0f*3.14159265358979323846f * u2;
  p.x = r * cosf( phi );
  p.y = r * sinf( phi );

  
  p.z = sqrtf( fmaxf( 0.0f, 1.0f - p.x*p.x - p.y*p.y ) );
}



__forceinline __declspec(__host__) __declspec(__device__) float2 square_to_disk(const float2& sample)
{
  float phi, r;

  const float a = 2.0f * sample.x - 1.0f;
  const float b = 2.0f * sample.y - 1.0f;

  if (a > -b)
  {
    if (a > b)
    {
      r = a;
      phi = (float)0.785398163397448309616f * (b/a);
    }
    else
    {
      r = b;
      phi = (float)0.785398163397448309616f * (2.0f - (a/b));
    }
  }
  else
  {
    if (a < b)
    {
      r = -a;
      phi = (float)0.785398163397448309616f * (4.0f + (b/a));
    }
    else
    {
      r = -b;
      phi = (b) ? (float)0.785398163397448309616f * (6.0f - (a/b)) : 0.0f;
    }
  }

  return make_float2( r * cosf(phi), r * sinf(phi) );
}




__forceinline __declspec(__host__) __declspec(__device__) float3 cart_to_pol(const float3& v)
{
  float azimuth;
  float elevation;
  float radius = length(v);

  float r = sqrtf(v.x*v.x + v.y*v.y);
  if (r > 0.0f)
  {
    azimuth   = atanf(v.y / v.x);
    elevation = atanf(v.z / r);

    if (v.x < 0.0f)
      azimuth += 3.14159265358979323846f;
    else if (v.y < 0.0f)
      azimuth += 3.14159265358979323846f * 2.0f;
  }
  else
  {
    azimuth = 0.0f;

    if (v.z > 0.0f)
      elevation = +1.57079632679489661923f;
    else
      elevation = -1.57079632679489661923f;
  }

  return make_float3(azimuth, elevation, radius);
}




struct Onb
{
  __forceinline __declspec(__host__) __declspec(__device__) Onb(const float3& normal)
  {
    m_normal = normal;

    if( fabs(m_normal.x) > fabs(m_normal.z) )
    {
      m_binormal.x = -m_normal.y;
      m_binormal.y =  m_normal.x;
      m_binormal.z =  0;
    }
    else
    {
      m_binormal.x =  0;
      m_binormal.y = -m_normal.z;
      m_binormal.z =  m_normal.y;
    }

    m_binormal = normalize(m_binormal);
    m_tangent = cross( m_binormal, m_normal );
  }

  __forceinline __declspec(__host__) __declspec(__device__) void inverse_transform(float3& p) const
  {
    p = p.x*m_tangent + p.y*m_binormal + p.z*m_normal;
  }

  float3 m_tangent;
  float3 m_binormal;
  float3 m_normal;
};

} 







using optix::operator-;
using optix::operator-=;
using optix::operator+;
using optix::operator+=;
using optix::operator*;
using optix::operator*=;
using optix::operator/;
using optix::operator/=;
using optix::operator==;
#line 2256 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"
















using optix::make_char1; using optix::make_char2; using optix::make_char3; using optix::make_char4;
using optix::make_uchar1; using optix::make_uchar2; using optix::make_uchar3; using optix::make_uchar4;
using optix::make_short1; using optix::make_short2; using optix::make_short3; using optix::make_short4;
using optix::make_ushort1; using optix::make_ushort2; using optix::make_ushort3; using optix::make_ushort4;
using optix::make_int1; using optix::make_int2; using optix::make_int3; using optix::make_int4;
using optix::make_uint1; using optix::make_uint2; using optix::make_uint3; using optix::make_uint4;
using optix::make_long1; using optix::make_long2; using optix::make_long3; using optix::make_long4;
using optix::make_ulong1; using optix::make_ulong2; using optix::make_ulong3; using optix::make_ulong4;
using optix::make_float1; using optix::make_float2; using optix::make_float3; using optix::make_float4;
using optix::make_longlong1; using optix::make_longlong2; using optix::make_longlong3; using optix::make_longlong4;
using optix::make_ulonglong1; using optix::make_ulonglong2; using optix::make_ulonglong3; using optix::make_ulonglong4;
using optix::make_double1; using optix::make_double2; using optix::make_double3; using optix::make_double4;



#line 2288 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"



using optix::fmaxf;
using optix::fminf;
using optix::copysignf;
#line 2295 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"


using optix::expf;
using optix::floor;
#line 2300 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"




#line 2305 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"

#line 2307 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu\\optixu_math_namespace.h"

#line 53 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"











using optix::uint;
using optix::ushort;


using optix::copysignf;
using optix::expf;
using optix::floor;
using optix::fmaxf;
using optix::fminf;
using optix::max;
using optix::min;


using optix::clamp;
using optix::cross;
using optix::dot;
using optix::faceforward;
using optix::fresnel_schlick;
using optix::length;
using optix::lerp;
using optix::normalize;
using optix::reflect;
using optix::refract;
using optix::smoothstep;
using optix::temperature;

#line 91 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optixu/optixu_math.h"
#line 30 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_math.h"

#line 32 "c:\\programdata\\nvidia corporation\\optix sdk 5.1.1\\include\\optix_math.h"
#line 37 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optix_cuda.h"


#line 40 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optix_cuda.h"
#line 30 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"


#line 1 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optixu/optixu_matrix_namespace.h"







































#line 41 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optixu/optixu_matrix_namespace.h"




namespace optix {

  template <int DIM> struct VectorDim { };
  template <> struct VectorDim<2> { typedef float2 VectorType; };
  template <> struct VectorDim<3> { typedef float3 VectorType; };
  template <> struct VectorDim<4> { typedef float4 VectorType; };


  template <unsigned int M, unsigned int N> class Matrix;

   template <unsigned int M> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,M>& operator*=(Matrix<M,M>& m1, const Matrix<M,M>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) bool         operator==(const Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) bool         operator!=(const Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator-=(Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator+=(Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator*=(Matrix<M,N>& m1, float f);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>&operator/=(Matrix<M,N>& m1, float f);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N> operator-(const Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N> operator+(const Matrix<M,N>& m1, const Matrix<M,N>& m2);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N> operator/(const Matrix<M,N>& m, float f);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N> operator*(const Matrix<M,N>& m, float f);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N> operator*(float f, const Matrix<M,N>& m);
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatM operator*(const Matrix<M,N>& m, const typename Matrix<M,N>::floatN& v );
   template <unsigned int M, unsigned int N> __forceinline __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatN operator*(const typename Matrix<M,N>::floatM& v, const Matrix<M,N>& m);
   template<unsigned int M, unsigned int N, unsigned int R> __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,R> operator*(const Matrix<M,N>& m1, const Matrix<N,R>& m2);


  
  template <unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float2 operator*(const Matrix<2,N>& m, const typename Matrix<2,N>::floatN& vec );
  template <unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float3 operator*(const Matrix<3,N>& m, const typename Matrix<3,N>::floatN& vec );
  template <unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const Matrix<4,N>& m, const typename Matrix<4,N>::floatN& vec );
  __forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const Matrix<4,4>& m, const float4& vec );

  



















  template <unsigned int M, unsigned int N>
  class Matrix
  {
  public:
    typedef typename VectorDim<N>::VectorType  floatN; 
    typedef typename VectorDim<M>::VectorType  floatM; 

	
	__declspec(__host__) __declspec(__device__)              Matrix();

	
	__declspec(__host__) __declspec(__device__) explicit     Matrix( const float data[M*N] ) { for(unsigned int i = 0; i < M*N; ++i) m_data[i] = data[i]; }

	
	__declspec(__host__) __declspec(__device__)              Matrix( const Matrix& m );

	
	__declspec(__host__) __declspec(__device__) Matrix&      operator=( const Matrix& b );

	
	__declspec(__host__) __declspec(__device__) float        operator[]( unsigned int i )const { return m_data[i]; }

	
	__declspec(__host__) __declspec(__device__) float&       operator[]( unsigned int i )      { return m_data[i]; }

	
	__declspec(__host__) __declspec(__device__) floatN       getRow( unsigned int m )const;

	
	__declspec(__host__) __declspec(__device__) floatM       getCol( unsigned int n )const;

	
	__declspec(__host__) __declspec(__device__) float*       getData();

	
	__declspec(__host__) __declspec(__device__) const float* getData()const;

	
	__declspec(__host__) __declspec(__device__) void         setRow( unsigned int m, const floatN &r );

	
	__declspec(__host__) __declspec(__device__) void         setCol( unsigned int n, const floatM &c );

	
	__declspec(__host__) __declspec(__device__) Matrix<N,M>         transpose() const;

	
	__declspec(__host__) __declspec(__device__) Matrix<4,4>         inverse() const;

	
	__declspec(__host__) __declspec(__device__) float               det() const;

	
	__declspec(__host__) __declspec(__device__) static Matrix<4,4>  rotate(const float radians, const float3& axis);

	
	__declspec(__host__) __declspec(__device__) static Matrix<4,4>  translate(const float3& vec);

	
	__declspec(__host__) __declspec(__device__) static Matrix<4,4>  scale(const float3& vec);

    
	__declspec(__host__) __declspec(__device__) static Matrix<4,4>  fromBasis( const float3& u, const float3& v, const float3& w, const float3& c );

	
	__declspec(__host__) __declspec(__device__) static Matrix<N,N>  identity();

	
	__declspec(__host__) __declspec(__device__) bool         operator<( const Matrix<M, N>& rhs ) const;
  private:
	  
	  float m_data[M*N];
  };



  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>::Matrix()
  {
  }

  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>::Matrix( const Matrix<M,N>& m )
  {
    for(unsigned int i = 0; i < M*N; ++i)
      m_data[i] = m[i];
  }

  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<M,N>&  Matrix<M,N>::operator=( const Matrix& b )
  {
    for(unsigned int i = 0; i < M*N; ++i)
      m_data[i] = b[i];
    return *this;
  }


  














  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatN Matrix<M,N>::getRow( unsigned int m )const
  {
    typename Matrix<M,N>::floatN temp;
    float* v = reinterpret_cast<float*>( &temp );
    const float* row = &( m_data[m*N] );
    for(unsigned int i = 0; i < N; ++i)
      v[i] = row[i];

    return temp;
  }


  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatM Matrix<M,N>::getCol( unsigned int n )const
  {
    typename Matrix<M,N>::floatM temp;
    float* v = reinterpret_cast<float*>( &temp );
    for ( unsigned int i = 0; i < M; ++i )
      v[i] = m_data[i*N+n];

    return temp;
  }


  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float* Matrix<M,N>::getData()
  {
    return m_data;
  }


  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) const float* Matrix<M,N>::getData() const
  {
    return m_data;
  }


  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) void Matrix<M,N>::setRow( unsigned int m, const typename Matrix<M,N>::floatN &r )
  {
    const float* v = reinterpret_cast<const float*>( &r );
    float* row = &( m_data[m*N] );
    for(unsigned int i = 0; i < N; ++i)
      row[i] = v[i];
  }


  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) void Matrix<M,N>::setCol( unsigned int n, const typename Matrix<M,N>::floatM &c )
  {
    const float* v = reinterpret_cast<const float*>( &c );
    for ( unsigned int i = 0; i < M; ++i )
      m_data[i*N+n] = v[i];
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) bool operator==(const Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    for ( unsigned int i = 0; i < M*N; ++i )
      if ( m1[i] != m2[i] ) return false;
    return true;
  }

  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) bool operator!=(const Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    for ( unsigned int i = 0; i < M*N; ++i )
      if ( m1[i] != m2[i] ) return true;
    return false;
  }

  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N> operator-(const Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    Matrix<M,N> temp( m1 );
    temp -= m2;
    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator-=(Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    for ( unsigned int i = 0; i < M*N; ++i )
      m1[i] -= m2[i];
    return m1;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N> operator+(const Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    Matrix<M,N> temp( m1 );
    temp += m2;
    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator+=(Matrix<M,N>& m1, const Matrix<M,N>& m2)
  {
    for ( unsigned int i = 0; i < M*N; ++i )
      m1[i] += m2[i];
    return m1;
  }


  
  template<unsigned int M, unsigned int N, unsigned int R>
  __declspec(__host__) __declspec(__device__) Matrix<M,R> operator*( const Matrix<M,N>& m1, const Matrix<N,R>& m2)
  {
    Matrix<M,R> temp;

    for ( unsigned int i = 0; i < M; ++i ) {
      for ( unsigned int j = 0; j < R; ++j ) {
        float sum = 0.0f;
        for ( unsigned int k = 0; k < N; ++k ) {
          float ik = m1[ i*N+k ];
          float kj = m2[ k*R+j ];
          sum += ik * kj;
        }
        temp[i*R+j] = sum;
      }
    }
    return temp;
  }


  
  template<unsigned int M>
  __declspec(__host__) __declspec(__device__) Matrix<M,M>& operator*=(Matrix<M,M>& m1, const Matrix<M,M>& m2)
  {
    m1 = m1*m2;
    return m1;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatM operator*(const Matrix<M,N>& m, const typename Matrix<M,N>::floatN& vec )
  {
    typename Matrix<M,N>::floatM temp;
    float* t = reinterpret_cast<float*>( &temp );
    const float* v = reinterpret_cast<const float*>( &vec );

    for (unsigned int i = 0; i < M; ++i) {
      float sum = 0.0f;
      for (unsigned int j = 0; j < N; ++j) {
        sum += m[i*N+j] * v[j];
      }
      t[i] = sum;
    }

    return temp;
  }

  
  template<unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float2 operator*(const Matrix<2,N>& m, const typename Matrix<2,N>::floatN& vec )
  {
    float2 temp = { 0.0f, 0.0f };
    const float* v = reinterpret_cast<const float*>( &vec );

    int index = 0;
    for (unsigned int j = 0; j < N; ++j)
      temp.x += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.y += m[index++] * v[j];

    return temp;
  }

  
  template<unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float3 operator*(const Matrix<3,N>& m, const typename Matrix<3,N>::floatN& vec )
  {
    float3 temp = { 0.0f, 0.0f, 0.0f };
    const float* v = reinterpret_cast<const float*>( &vec );

    int index = 0;
    for (unsigned int j = 0; j < N; ++j)
      temp.x += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.y += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.z += m[index++] * v[j];

    return temp;
  }

  
  template<unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const Matrix<4,N>& m, const typename Matrix<4,N>::floatN& vec )
  {
    float4 temp = { 0.0f, 0.0f, 0.0f, 0.0f };

    const float* v = reinterpret_cast<const float*>( &vec );

    int index = 0;
    for (unsigned int j = 0; j < N; ++j)
      temp.x += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.y += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.z += m[index++] * v[j];

    for (unsigned int j = 0; j < N; ++j)
      temp.w += m[index++] * v[j];

    return temp;
  }

  
  __forceinline __declspec(__host__) __declspec(__device__) float4 operator*(const Matrix<4,4>& m, const float4& vec )
  {
    float4 temp;
    temp.x  = m[ 0] * vec.x +
              m[ 1] * vec.y +
              m[ 2] * vec.z +
              m[ 3] * vec.w;
    temp.y  = m[ 4] * vec.x +
              m[ 5] * vec.y +
              m[ 6] * vec.z +
              m[ 7] * vec.w;
    temp.z  = m[ 8] * vec.x +
              m[ 9] * vec.y +
              m[10] * vec.z +
              m[11] * vec.w;
    temp.w  = m[12] * vec.x +
              m[13] * vec.y +
              m[14] * vec.z +
              m[15] * vec.w;

    return temp;
  }

  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) typename Matrix<M,N>::floatN operator*(const typename Matrix<M,N>::floatM& vec, const Matrix<M,N>& m)
  {
    typename Matrix<M,N>::floatN  temp;
    float* t = reinterpret_cast<float*>( &temp );
    const float* v = reinterpret_cast<const float*>( &vec);

    for (unsigned int i = 0; i < N; ++i) {
      float sum = 0.0f;
      for (unsigned int j = 0; j < M; ++j) {
        sum += v[j] * m[j*N+i] ;
      }
      t[i] = sum;
    }

    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N> operator*(const Matrix<M,N>& m, float f)
  {
    Matrix<M,N> temp( m );
    temp *= f;
    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator*=(Matrix<M,N>& m, float f)
  {
    for ( unsigned int i = 0; i < M*N; ++i )
      m[i] *= f;
    return m;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N>  operator*(float f, const Matrix<M,N>& m)
  {
    Matrix<M,N> temp;

    for ( unsigned int i = 0; i < M*N; ++i )
      temp[i] = m[i]*f;

    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N> operator/(const Matrix<M,N>& m, float f)
  {
    Matrix<M,N> temp( m );
    temp /= f;
    return temp;
  }


  
  template<unsigned int M, unsigned int N>
  __declspec(__host__) __declspec(__device__) Matrix<M,N>& operator/=(Matrix<M,N>& m, float f)
  {
    float inv_f = 1.0f / f;
    for ( unsigned int i = 0; i < M*N; ++i )
      m[i] *= inv_f;
    return m;
  }

  
  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<N,M> Matrix<M,N>::transpose() const
  {
    Matrix<N,M> ret;
    for( unsigned int row = 0; row < M; ++row )
      for( unsigned int col = 0; col < N; ++col )
        ret[col*M+row] = m_data[row*N+col];
    return ret;
  }

  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) float Matrix<3,3>::det() const
  {
    const float* m   = m_data;
    float d = m[0]*m[4]*m[8] + m[1]*m[5]*m[6] + m[2]*m[3]*m[7]
      - m[0]*m[5]*m[7] - m[1]*m[3]*m[8] - m[2]*m[4]*m[6];
    return d;
  }

  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) float Matrix<4,4>::det() const
  {
    const float* m   = m_data;
    float d =
      m[0]*m[5]*m[10]*m[15]-
      m[0]*m[5]*m[11]*m[14]+m[0]*m[9]*m[14]*m[7]-
      m[0]*m[9]*m[6]*m[15]+m[0]*m[13]*m[6]*m[11]-
      m[0]*m[13]*m[10]*m[7]-m[4]*m[1]*m[10]*m[15]+m[4]*m[1]*m[11]*m[14]-
      m[4]*m[9]*m[14]*m[3]+m[4]*m[9]*m[2]*m[15]-
      m[4]*m[13]*m[2]*m[11]+m[4]*m[13]*m[10]*m[3]+m[8]*m[1]*m[6]*m[15]-
      m[8]*m[1]*m[14]*m[7]+m[8]*m[5]*m[14]*m[3]-
      m[8]*m[5]*m[2]*m[15]+m[8]*m[13]*m[2]*m[7]-
      m[8]*m[13]*m[6]*m[3]-
      m[12]*m[1]*m[6]*m[11]+m[12]*m[1]*m[10]*m[7]-
      m[12]*m[5]*m[10]*m[3]+m[12]*m[5]*m[2]*m[11]-
      m[12]*m[9]*m[2]*m[7]+m[12]*m[9]*m[6]*m[3];
    return d;
  }

  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<4,4> Matrix<4,4>::inverse() const
  {
    Matrix<4,4> dst;
    const float* m   = m_data;
    const float d = 1.0f / det();

    dst[0]  = d * (m[5] * (m[10] * m[15] - m[14] * m[11]) + m[9] * (m[14] * m[7] - m[6] * m[15]) + m[13] * (m[6] * m[11] - m[10] * m[7]));
    dst[4]  = d * (m[6] * (m[8] * m[15] - m[12] * m[11]) + m[10] * (m[12] * m[7] - m[4] * m[15]) + m[14] * (m[4] * m[11] - m[8] * m[7]));
    dst[8]  = d * (m[7] * (m[8] * m[13] - m[12] * m[9]) + m[11] * (m[12] * m[5] - m[4] * m[13]) + m[15] * (m[4] * m[9] - m[8] * m[5]));
    dst[12] = d * (m[4] * (m[13] * m[10] - m[9] * m[14]) + m[8] * (m[5] * m[14] - m[13] * m[6]) + m[12] * (m[9] * m[6] - m[5] * m[10]));
    dst[1]  = d * (m[9] * (m[2] * m[15] - m[14] * m[3]) + m[13] * (m[10] * m[3] - m[2] * m[11]) + m[1] * (m[14] * m[11] - m[10] * m[15]));
    dst[5]  = d * (m[10] * (m[0] * m[15] - m[12] * m[3]) + m[14] * (m[8] * m[3] - m[0] * m[11]) + m[2] * (m[12] * m[11] - m[8] * m[15]));
    dst[9]  = d * (m[11] * (m[0] * m[13] - m[12] * m[1]) + m[15] * (m[8] * m[1] - m[0] * m[9]) + m[3] * (m[12] * m[9] - m[8] * m[13]));
    dst[13] = d * (m[8] * (m[13] * m[2] - m[1] * m[14]) + m[12] * (m[1] * m[10] - m[9] * m[2]) + m[0] * (m[9] * m[14] - m[13] * m[10]));
    dst[2]  = d * (m[13] * (m[2] * m[7] - m[6] * m[3]) + m[1] * (m[6] * m[15] - m[14] * m[7]) + m[5] * (m[14] * m[3] - m[2] * m[15]));
    dst[6]  = d * (m[14] * (m[0] * m[7] - m[4] * m[3]) + m[2] * (m[4] * m[15] - m[12] * m[7]) + m[6] * (m[12] * m[3] - m[0] * m[15]));
    dst[10] = d * (m[15] * (m[0] * m[5] - m[4] * m[1]) + m[3] * (m[4] * m[13] - m[12] * m[5]) + m[7] * (m[12] * m[1] - m[0] * m[13]));
    dst[14] = d * (m[12] * (m[5] * m[2] - m[1] * m[6]) + m[0] * (m[13] * m[6] - m[5] * m[14]) + m[4] * (m[1] * m[14] - m[13] * m[2]));
    dst[3]  = d * (m[1] * (m[10] * m[7] - m[6] * m[11]) + m[5] * (m[2] * m[11] - m[10] * m[3]) + m[9] * (m[6] * m[3] - m[2] * m[7]));
    dst[7]  = d * (m[2] * (m[8] * m[7] - m[4] * m[11]) + m[6] * (m[0] * m[11] - m[8] * m[3]) + m[10] * (m[4] * m[3] - m[0] * m[7]));
    dst[11] = d * (m[3] * (m[8] * m[5] - m[4] * m[9]) + m[7] * (m[0] * m[9] - m[8] * m[1]) + m[11] * (m[4] * m[1] - m[0] * m[5]));
    dst[15] = d * (m[0] * (m[5] * m[10] - m[9] * m[6]) + m[4] * (m[9] * m[2] - m[1] * m[10]) + m[8] * (m[1] * m[6] - m[5] * m[2]));
    return dst;
  }

  
  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<4,4> Matrix<4,4>::rotate(const float radians, const float3& axis)
  {
    Matrix<4,4> Mat = Matrix<4,4>::identity();
    float *m = Mat.getData();

    
    float sintheta=sinf(radians);
    float costheta=cosf(radians);
    float ux=axis.x;
    float uy=axis.y;
    float uz=axis.z;
    m[0*4+0]=ux*ux+costheta*(1-ux*ux);
    m[0*4+1]=ux*uy*(1-costheta)-uz*sintheta;
    m[0*4+2]=uz*ux*(1-costheta)+uy*sintheta;
    m[0*4+3]=0;

    m[1*4+0]=ux*uy*(1-costheta)+uz*sintheta;
    m[1*4+1]=uy*uy+costheta*(1-uy*uy);
    m[1*4+2]=uy*uz*(1-costheta)-ux*sintheta;
    m[1*4+3]=0;

    m[2*4+0]=uz*ux*(1-costheta)-uy*sintheta;
    m[2*4+1]=uy*uz*(1-costheta)+ux*sintheta;
    m[2*4+2]=uz*uz+costheta*(1-uz*uz);
    m[2*4+3]=0;

    m[3*4+0]=0;
    m[3*4+1]=0;
    m[3*4+2]=0;
    m[3*4+3]=1;

    return Matrix<4,4>( m );
  }

  
  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<4,4> Matrix<4,4>::translate(const float3& vec)
  {
    Matrix<4,4> Mat = Matrix<4,4>::identity();
    float *m = Mat.getData();

    m[3] = vec.x;
    m[7] = vec.y;
    m[11]= vec.z;

    return Matrix<4,4>( m );
  }

  
  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<4,4> Matrix<4,4>::scale(const float3& vec)
  {
    Matrix<4,4> Mat = Matrix<4,4>::identity();
    float *m = Mat.getData();

    m[0] = vec.x;
    m[5] = vec.y;
    m[10]= vec.z;

    return Matrix<4,4>( m );
  }


  
  template<>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<4,4>  Matrix<4,4>::fromBasis( const float3& u, const float3& v, const float3& w, const float3& c )
  {
    float m[16];                                                                 
    m[ 0] = u.x;                                                                  
    m[ 1] = v.x;                                                                  
    m[ 2] = w.x;                                                                  
    m[ 3] = c.x;                                                                  

    m[ 4] = u.y;                                                                  
    m[ 5] = v.y;                                                                  
    m[ 6] = w.y;                                                                  
    m[ 7] = c.y;                                                                  

    m[ 8] = u.z;                                                                  
    m[ 9] = v.z;                                                                  
    m[10] = w.z;                                                                 
    m[11] = c.z;                                                                 

    m[12] = 0.0f;                                                                
    m[13] = 0.0f;                                                                
    m[14] = 0.0f;                                                                
    m[15] = 1.0f;                                                                

    return Matrix<4,4>( m );      
  }

  
  
  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) Matrix<N,N> Matrix<M,N>::identity()
  {
    float temp[N*N];
    for(unsigned int i = 0; i < N*N; ++i)
      temp[i] = 0;
    for( unsigned int i = 0; i < N; ++i )
      temp[i*N+i] = 1.0f;
    return Matrix<N,N>( temp );
  }

  
  template<unsigned int M, unsigned int N>
  __forceinline __declspec(__host__) __declspec(__device__) bool Matrix<M,N>::operator<( const Matrix<M, N>& rhs ) const
  {
    for( unsigned int i = 0; i < N*M; ++i ) {
      if( m_data[i] < rhs[i] )
        return true;
      else if( m_data[i] > rhs[i] )
        return false;
    }
    return false;
  }

  typedef Matrix<2, 2> Matrix2x2;
  typedef Matrix<2, 3> Matrix2x3;
  typedef Matrix<2, 4> Matrix2x4;
  typedef Matrix<3, 2> Matrix3x2;
  typedef Matrix<3, 3> Matrix3x3;
  typedef Matrix<3, 4> Matrix3x4;
  typedef Matrix<4, 2> Matrix4x2;
  typedef Matrix<4, 3> Matrix4x3;
  typedef Matrix<4, 4> Matrix4x4;


  __forceinline __declspec(__host__) __declspec(__device__) Matrix<3,3> make_matrix3x3(const Matrix<4,4> &matrix)
  {
    Matrix<3,3> Mat;
    float *m = Mat.getData();
    const float *m4x4 = matrix.getData();

    m[0*3+0]=m4x4[0*4+0];
    m[0*3+1]=m4x4[0*4+1];
    m[0*3+2]=m4x4[0*4+2];

    m[1*3+0]=m4x4[1*4+0];
    m[1*3+1]=m4x4[1*4+1];
    m[1*3+2]=m4x4[1*4+2];

    m[2*3+0]=m4x4[2*4+0];
    m[2*3+1]=m4x4[2*4+1];
    m[2*3+2]=m4x4[2*4+2];

    return Mat;
  }

} 







#line 767 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optixu/optixu_matrix_namespace.h"

#line 769 "C:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 5.1.1\\include\\optixu/optixu_matrix_namespace.h"
#line 33 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"
#line 1 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/helpers.h"




























#pragma once





static __declspec(__device__) __inline optix::uchar4 make_color(const optix::float3& c)
{
    return optix::make_uchar4( static_cast<unsigned char>(__saturatef(c.z)*255.99f),  
                               static_cast<unsigned char>(__saturatef(c.y)*255.99f),  
                               static_cast<unsigned char>(__saturatef(c.x)*255.99f),  
                               255u);                                                 
}
#line 43 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/helpers.h"


static
__declspec(__host__) __declspec(__device__) __inline optix::float3 sample_phong_lobe( optix::float2 sample, float exponent, 
                                                                optix::float3 U, optix::float3 V, optix::float3 W )
{
  const float power = expf( logf(sample.y)/(exponent+1.0f) );
  const float phi = sample.x * 2.0f * (float)3.14159265358979323846f;
  const float scale = sqrtf(1.0f - power*power);
  
  const float x = cosf(phi)*scale;
  const float y = sinf(phi)*scale;
  const float z = power;

  return x*U + y*V + z*W;
}


static
__declspec(__host__) __declspec(__device__) __inline optix::float3 sample_phong_lobe( const optix::float2 &sample, float exponent, 
                                                                const optix::float3 &U, const optix::float3 &V, const optix::float3 &W, 
                                                                float &pdf, float &bdf_val )
{
  const float cos_theta = powf(sample.y, 1.0f/(exponent+1.0f) );

  const float phi = sample.x * 2.0f * 3.14159265358979323846f;
  const float sin_theta = sqrtf(1.0f - cos_theta*cos_theta);
  
  const float x = cosf(phi)*sin_theta;
  const float y = sinf(phi)*sin_theta;
  const float z = cos_theta;

  const float powered_cos = powf( cos_theta, exponent );
  pdf = (exponent+1.0f) / (2.0f*3.14159265358979323846f) * powered_cos;
  bdf_val = (exponent+2.0f) / (2.0f*3.14159265358979323846f) * powered_cos;  

  return x*U + y*V + z*W;
}


static
__declspec(__host__) __declspec(__device__) __inline float get_phong_lobe_pdf( float exponent, const optix::float3 &normal, const optix::float3 &dir_out, 
                                                         const optix::float3 &dir_in, float &bdf_val)
{  
  optix::float3 r = -optix::reflect(dir_out, normal);
  const float cos_theta = fabs(optix::dot(r, dir_in));
  const float powered_cos = powf(cos_theta, exponent );

  bdf_val = (exponent+2.0f) / (2.0f*3.14159265358979323846f) * powered_cos;  
  return (exponent+1.0f) / (2.0f*3.14159265358979323846f) * powered_cos;
}


static
__declspec(__host__) __declspec(__device__) __inline void create_onb( const optix::float3& n, optix::float3& U, optix::float3& V, optix::float3& W )
{
  W = optix::normalize( n );
  U = optix::cross( W, optix::make_float3( 0.0f, 1.0f, 0.0f ) );

  if ( fabs( U.x ) < 0.001f && fabs( U.y ) < 0.001f && fabs( U.z ) < 0.001f  )
    U = optix::cross( W, optix::make_float3( 1.0f, 0.0f, 0.0f ) );

  U = optix::normalize( U );
  V = optix::cross( W, U );
}


static
__declspec(__device__) __inline void create_onb( const optix::float3& n, optix::float3& U, optix::float3& V)
{

  U = optix::cross( n, optix::make_float3( 0.0f, 1.0f, 0.0f ) );

  if ( optix::dot( U, U ) < 1e-3f )
    U = optix::cross( n, optix::make_float3( 1.0f, 0.0f, 0.0f ) );

  U = optix::normalize( U );
  V = optix::cross( n, U );
}


static
__declspec(__host__) __declspec(__device__) __inline optix::float3 differential_transfer_origin(optix::float3 dPdx, optix::float3 dDdx, float t, optix::float3 direction, optix::float3 normal)
{
  float dtdx = -optix::dot((dPdx + t*dDdx), normal)/optix::dot(direction, normal);
  return (dPdx + t*dDdx)+dtdx*direction;
}


static
__declspec(__host__) __declspec(__device__) __inline optix::float3 differential_generation_direction(optix::float3 d, optix::float3 basis)
{
  float dd = optix::dot(d,d);
  return (dd*basis-optix::dot(d,basis)*d)/(dd*sqrtf(dd));
}


static
__declspec(__host__) __declspec(__device__) __inline
optix::float3 differential_reflect_direction(optix::float3 dPdx, optix::float3 dDdx, optix::float3 dNdP, 
                                             optix::float3 D, optix::float3 N)
{
  optix::float3 dNdx = dNdP*dPdx;
  float dDNdx = optix::dot(dDdx,N) + optix::dot(D,dNdx);
  return dDdx - 2*(optix::dot(D,N)*dNdx + dDNdx*N);
}


static __declspec(__host__) __declspec(__device__) __inline 
optix::float3 differential_refract_direction(optix::float3 dPdx, optix::float3 dDdx, optix::float3 dNdP, 
                                             optix::float3 D, optix::float3 N, float ior, optix::float3 T)
{
  float eta;
  if(optix::dot(D,N) > 0.f) {
    eta = ior;
    N = -N;
  } else {
    eta = 1.f / ior;
  }

  optix::float3 dNdx = dNdP*dPdx;
  float mu = eta*optix::dot(D,N)-optix::dot(T,N);
  float TN = -sqrtf(1-eta*eta*(1-optix::dot(D,N)*optix::dot(D,N)));
  float dDNdx = optix::dot(dDdx,N) + optix::dot(D,dNdx);
  float dmudx = (eta - (eta*eta*optix::dot(D,N))/TN)*dDNdx;
  return eta*dDdx - (mu*dNdx+dmudx*N);
}


static __declspec(__host__) __declspec(__device__) __inline optix::float3 Yxy2XYZ( const optix::float3& Yxy )
{
  
  if( Yxy.z < 1e-4 ) 
    return optix::make_float3( 0.0f, 0.0f, 0.0f );

  return optix::make_float3(  Yxy.y * ( Yxy.x / Yxy.z ),
                              Yxy.x,
                              ( 1.0f - Yxy.y - Yxy.z ) * ( Yxy.x / Yxy.z ) );
}

static __declspec(__host__) __declspec(__device__) __inline optix::float3 XYZ2rgb( const optix::float3& xyz)
{
  const float R = optix::dot( xyz, optix::make_float3(  3.2410f, -1.5374f, -0.4986f ) );
  const float G = optix::dot( xyz, optix::make_float3( -0.9692f,  1.8760f,  0.0416f ) );
  const float B = optix::dot( xyz, optix::make_float3(  0.0556f, -0.2040f,  1.0570f ) );
  return optix::make_float3( R, G, B );
}

static __declspec(__host__) __declspec(__device__) __inline optix::float3 Yxy2rgb( optix::float3 Yxy )
{
  
  if( Yxy.z < 1e-4 ) 
    return optix::make_float3( 0.0f, 0.0f, 0.0f );

  
  float3 xyz = optix::make_float3( Yxy.y * ( Yxy.x / Yxy.z ),
                                   Yxy.x,
                                   ( 1.0f - Yxy.y - Yxy.z ) * ( Yxy.x / Yxy.z ) );

  const float R = optix::dot( xyz, optix::make_float3(  3.2410f, -1.5374f, -0.4986f ) );
  const float G = optix::dot( xyz, optix::make_float3( -0.9692f,  1.8760f,  0.0416f ) );
  const float B = optix::dot( xyz, optix::make_float3(  0.0556f, -0.2040f,  1.0570f ) );
  return optix::make_float3( R, G, B );
}

static __declspec(__host__) __declspec(__device__) __inline optix::float3 rgb2Yxy( optix::float3 rgb)
{
  
  const float X = optix::dot( rgb, optix::make_float3( 0.4124f, 0.3576f, 0.1805f ) );
  const float Y = optix::dot( rgb, optix::make_float3( 0.2126f, 0.7152f, 0.0722f ) );
  const float Z = optix::dot( rgb, optix::make_float3( 0.0193f, 0.1192f, 0.9505f ) );
  
  
  
  float denominator = X + Y + Z;
  if ( denominator < 1e-4 )
    return optix::make_float3( 0.0f, 0.0f, 0.0f );

  
  return optix::make_float3( Y, 
                             X / ( denominator ),
                             Y / ( denominator ) );
}

static __declspec(__host__) __declspec(__device__) __inline optix::float3 tonemap( const optix::float3 &hdr_value, float Y_log_av, float Y_max)
{
  optix::float3 val_Yxy = rgb2Yxy( hdr_value );
  
  float Y        = val_Yxy.x; 
  const float a = 0.04f;
  float Y_rel = a * Y / Y_log_av;
  float mapped_Y = Y_rel * (1.0f + Y_rel / (Y_max * Y_max)) / (1.0f + Y_rel);

  optix::float3 mapped_Yxy = optix::make_float3( mapped_Y, val_Yxy.y, val_Yxy.z ); 
  optix::float3 mapped_rgb = Yxy2rgb( mapped_Yxy ); 

  return mapped_rgb;
}

#line 34 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"
#line 1 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/prd.h"




























#pragma once



struct PerRayData_radiance
{
	int depth;
	unsigned int seed;

	
	bool done;
	float3 result;
	float3 reflectance;
	float3 radiance;
	float3 origin;
	float3 direction;
	float3 normal;
	float3 depth_value;

	float2 reproject_uv;

	float  importance;
};

struct PerRayData_pathtrace_shadow
{
	bool inShadow;
	float3 attenuation;
};
#line 35 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"
#line 1 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/random.h"






























template<unsigned int N>
static __declspec(__host__) __declspec(__device__) __inline unsigned int tea( unsigned int val0, unsigned int val1 )
{
  unsigned int v0 = val0;
  unsigned int v1 = val1;
  unsigned int s0 = 0;

  for( unsigned int n = 0; n < N; n++ )
  {
    s0 += 0x9e3779b9;
    v0 += ((v1<<4)+0xa341316c)^(v1+s0)^((v1>>5)+0xc8013ea4);
    v1 += ((v0<<4)+0xad90777d)^(v0+s0)^((v0>>5)+0x7e95761e);
  }

  return v0;
}


static __declspec(__host__) __declspec(__device__) __inline unsigned int lcg(unsigned int &prev)
{
  const unsigned int LCG_A = 1664525u;
  const unsigned int LCG_C = 1013904223u;
  prev = (LCG_A * prev + LCG_C);
  return prev & 0x00FFFFFF;
}

static __declspec(__host__) __declspec(__device__) __inline unsigned int lcg2(unsigned int &prev)
{
  prev = (prev*8121 + 28411)  % 134456;
  return prev;
}


static __declspec(__host__) __declspec(__device__) __inline float rnd(unsigned int &prev)
{
  return ((float) lcg(prev) / (float) 0x01000000);
}


static __declspec(__host__) __inline unsigned int mwc()
{
  static unsigned long long r[4];
  static unsigned long long carry;
  static bool init = false;
  if( !init ) {
    init = true;
    unsigned int seed = 7654321u, seed0, seed1, seed2, seed3;
    r[0] = seed0 = lcg2(seed);
    r[1] = seed1 = lcg2(seed0);
    r[2] = seed2 = lcg2(seed1);
    r[3] = seed3 = lcg2(seed2);
    carry = lcg2(seed3);
  }

  unsigned long long sum = 2111111111ull * r[3] +
                           1492ull       * r[2] +
                           1776ull       * r[1] +
                           5115ull       * r[0] +
                           1ull          * carry;
  r[3]   = r[2];
  r[2]   = r[1];
  r[1]   = r[0];
  r[0]   = static_cast<unsigned int>(sum);        
  carry  = static_cast<unsigned int>(sum >> 32);  
  return static_cast<unsigned int>(r[0]);
}

static __declspec(__host__) __inline unsigned int random1u()
{


#line 103 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/random.h"
  return mwc();
#line 105 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/random.h"
}

static __declspec(__host__) __inline optix::uint2 random2u()
{
  return optix::make_uint2(random1u(), random1u());
}

static __declspec(__host__) __inline void fillRandBuffer( unsigned int *seeds, unsigned int N )
{
  for( unsigned int i=0; i<N; ++i ) 
    seeds[i] = mwc();
}

static __declspec(__host__) __declspec(__device__) __inline unsigned int rot_seed( unsigned int seed, unsigned int frame )
{
    return seed ^ frame;
}
#line 36 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"
#line 1 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/shared_helper_funcs.h"
#pragma once






#line 1 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include\\shared_helper_math.h"
#pragma once






static __declspec(__device__) __inline float3 exp(const float3& x)
{
	return make_float3(exp(x.x), exp(x.y), exp(x.z));
}

static __declspec(__device__) __inline float3 schlick(float nDi, const float3& rgb)
{
	float r = fresnel_schlick(nDi, 5, rgb.x, 1);
	float g = fresnel_schlick(nDi, 5, rgb.y, 1);
	float b = fresnel_schlick(nDi, 5, rgb.z, 1);
	return make_float3(r, g, b);
}


static __declspec(__device__) __inline float get_random(uint seed0, uint seed1) {

	
	seed0 = 36969 * (seed0 & 65535) + (seed0 >> 16);
	seed1 = 18000 * (seed1 & 65535) + (seed1 >> 16);

	unsigned int ires = (seed0 << 16) + seed1;

	
	union {
		float f;
		unsigned int ui;
	} res;

	res.ui = (ires & 0x007fffff) | 0x40000000;  
	return (res.f - 2.0f) / 2.0f;
}
#line 9 "d:\\data\\projects\\2018\\foveated rendering\\foveated rendering using ray tracing\\foveated rendering using ray tracing\\cuda\\device_include/shared_helper_funcs.h"

__declspec(__device__) __declspec(__constant__) float gaussian_weight[9] = {
	1.0f / 16.0f, 1.0f / 8.0f, 1.0f / 16.0f,
	1.0f / 8.0f, 1.0f / 4.0f, 1.0f / 8.0f,
	1.0f / 16.0f, 1.0f / 8.0f, 1.0f / 16.0f
};
__declspec(__device__) __declspec(__constant__) float gradient_weight[9] = {
	-1.0f / 8.0f, -1.0f / 8.0f, -1.0f / 8.0f,
	-1.0f / 8.0f,  1.0f		  , -1.0f / 8.0f,
	-1.0f / 8.0f, -1.0f / 8.0f, -1.0f / 8.0f
};
__declspec(__device__) __declspec(__constant__) uint2 offset[9] = {
	(-1, +1), (0, +1), (+1, +1),
	(-1, +0), (0, +0), (+1, +0),
	(-1, -1), (0, -1), (+1, -1)
};

__declspec(__device__) float4 gaussian_blur(optix::buffer<float4, 2> &buffer, const uint2 launch_uv, const float2 bufferSize) {
	float4 result = make_float4(0.0f);
	for (int i = 0; i < 9; i++) {
		uint2 kernel_uv = launch_uv + offset[i];
		if (kernel_uv.x < 0 || kernel_uv.x >= bufferSize.x || kernel_uv.y < 0 || kernel_uv.y >= bufferSize.y)
			continue;
		result += buffer[kernel_uv] * gaussian_weight[i];
	}
	return result;
}

__declspec(__device__) __inline float4 bilinear(optix::buffer<float4, 2> &buffer, const float2 launch_uv, const float2 bufferSize) {
	float4 result = make_float4(0.0f);

	float4 x00 = make_float4(0.0f);
	float4 x01 = make_float4(0.0f);
	float4 x10 = make_float4(0.0f);
	float4 x11 = make_float4(0.0f);
	float u = 0.5f, float v = 0.5f;

	if (0.0f <= launch_uv.x && launch_uv.x < bufferSize.x && 0.0f <= launch_uv.y && launch_uv.y < bufferSize.y) {
		x00 = buffer[make_uint2(floorf(launch_uv.x), floorf(launch_uv.y))];
		x01 = buffer[make_uint2(floorf(launch_uv.x), ceilf(launch_uv.y))];
		x10 = buffer[make_uint2(ceilf(launch_uv.x), floorf(launch_uv.y))];
		x11 = buffer[make_uint2(ceilf(launch_uv.x), ceilf(launch_uv.y))];

		u = ceilf(launch_uv.x) - launch_uv.x;
		v = ceilf(launch_uv.y) - launch_uv.y;

		result = lerp(lerp(x00, x10, u), lerp(x01, x11, u), v);
	}
	return result;
}

__declspec(__device__) __inline bool isCacheHit(const float prev_depth, const float curr_depth, const float epsilon) {
	float diff = prev_depth - curr_depth;

	return abs(diff) < epsilon ? true : false;
}

__declspec(__device__) float3 RGBY(optix::buffer<float4, 2> &buffer, const uint2 launch_uv) {
	float4 rgba = buffer[launch_uv];
	float R = rgba.x - (rgba.y + rgba.z) / 2.0f;
	float G = rgba.y - (rgba.x + rgba.z) / 2.0f;
	float B = rgba.z - (rgba.x + rgba.y) / 2.0f;
	float Y = (rgba.x + rgba.y) / 2.0f - abs(rgba.x - rgba.y) / 2.0f - rgba.z;
	float L = (rgba.x + rgba.y + rgba.z) / 3.0f;
		

	return make_float3(R - G, B - Y, L);
}










__declspec(__device__) __inline float luminance(optix::buffer<float4, 2> &bufferA, const uint2 launch_indexA, const uint2 launch_indexB) {
	float4 rgbaA = bufferA[launch_indexA];
	float4 rgbaB = bufferA[launch_indexB];
	float3 coeff = make_float3(0.64f, 0.32f, 0.04f);
	return abs((coeff.x * rgbaA.x + coeff.y * rgbaA.y + coeff.z * rgbaA.z) - (coeff.x * rgbaB.x + coeff.y * rgbaB.y + coeff.z * rgbaB.z)) / 3.0f;
}
__declspec(__device__) __inline float depth_saliency(optix::buffer<float4, 2> &buffer, const uint2 launch_index, const uint2 gaze, const float theta = 1.0f) {
	float focal_length = buffer[gaze].x;
	float depth = buffer[launch_index].x - focal_length;
	
	float depth_2 = depth * depth;
	float d = 0.4f * theta;
	float d_2 = d * d;
	float ad = 1.0f * theta;

	return 1.0f / (d * sqrt(2.0f * 3.14159265358979323846f)) * exp(-depth_2 / d_2) * ad;
}

__declspec(__device__) __declspec(__constant__) float gx[9] = {
	-1.0f, -0.0f, +1.0f,
	-2.0f, +0.0f, +2.0f,
	-1.0f, -0.0f, +1.0f
};
__declspec(__device__) __declspec(__constant__) float gy[9] = {
	-1.0f, -2.0f, -1.0f,
	-0.0f, +0.0f, +0.0f,
	+1.0f, +2.0f, +1.0f
};

__declspec(__device__) float edge_detect(optix::buffer<float4, 2> &buffer, const uint2 launch_uv, const float2 bufferSize) {
	
	float sumA = 0.0f, sumB = 0.0f, isBoundary = 0.0f;
	for (int i = 0; i < 9; i++) {
		uint2 edge_uv = launch_uv + offset[i];
		if (edge_uv.x < 0 || edge_uv.x >= bufferSize.x || edge_uv.y < 0 || edge_uv.y >= bufferSize.y)
			continue;

		float depth = buffer[edge_uv].x;
		sumA += depth * gx[i];
		sumB += depth * gy[i];
	}
	return isBoundary = clamp(((sumA > 0.0f ? sumA : -sumA) + (sumB > 0.0f ? sumB : -sumB)), 0.0f, 1.0f) > 0.99f;
}

__declspec(__device__) __inline float gradient_x(optix::buffer<float4, 2> &buffer, const uint2 launch_uv, const float2 bufferSize, const int scale = 1) {
	float result = 0.0f;
	for (int i = 0; i < 9; i++) {
		uint2 kernel_uv = launch_uv + offset[i] * scale;
		if (kernel_uv.x < 0 || kernel_uv.x >= bufferSize.x || kernel_uv.y < 0 || kernel_uv.y >= bufferSize.y)
			continue;
		float4 data = buffer[kernel_uv];
		result += (data.x + data.y + data.z) / 3.0f * gx[i];
	}
	return result;
}
__declspec(__device__) __inline float gradient_y(optix::buffer<float4, 2> &buffer, const uint2 launch_uv, const float2 bufferSize, const int scale = 1) {
	float result = 0.0f;
	for (int i = 0; i < 9; i++) {
		uint2 kernel_uv = launch_uv + offset[i] * scale;
		if (kernel_uv.x < 0 || kernel_uv.x >= bufferSize.x || kernel_uv.y < 0 || kernel_uv.y >= bufferSize.y)
			continue;
		float4 data = buffer[kernel_uv];
		result += (data.x + data.y + data.z) / 3.0f * gy[i];
	}
	return result;
}
__declspec(__device__) __inline float orientation_by_sobel(const float gx, const float gy) {
	return atan(gy / gx);
}
__declspec(__device__) float gradient(optix::buffer<float4, 2> &buffer, const uint2 launch_uv, const float2 bufferSize, const int scale = 1) {
	float gx = gradient_x(buffer, launch_uv, bufferSize, scale);
	float gy = gradient_y(buffer, launch_uv, bufferSize, scale);

	return sqrt(gx * gx + gy * gy);
}


__declspec(__device__) float4 smooth_buffer_pixel(optix::buffer<float4, 2> &buffer, const uint2 index, const float2 bufferSize) {
	float4 pixel = make_float4(0.0f);
	int count = 0;
	for (int i = 0; i < 9; i++) {
		uint2 uv = index + offset[i];
		if (uv.x < 0 || uv.x >= bufferSize.x || uv.y < 0 || uv.y >= bufferSize.y)
			continue;

		pixel += buffer[uv];
		count++;
	}
	return pixel / (count < 1.0f ? 1.0f : count);
}


__declspec(__device__) __inline float2 compute_reprojection(const optix::float3& p, optix::Matrix4x4& mvp, optix::float2& screen)
{
	float4 p_cs = make_float4(p, 1.0f);
	p_cs = mvp * p_cs;
	float2 d_cs = make_float2(p_cs) / p_cs.w;
	
	float2 q_uv = (d_cs * screen + screen) * 0.5f;
	
	return q_uv;
}


__declspec(__device__) __inline float2 compute_reprojection_pinhole(const float3& p, float3& cam_pos, float3& cam_target, float3 cam_up, float2& screen)
{
	float3 rendercamview = cam_target; rendercamview = normalize(rendercamview);
	float3 rendercamup = cam_up; rendercamup = normalize(rendercamup);
	float3 horizontalAxis = cross(rendercamview, rendercamup); horizontalAxis = normalize(horizontalAxis);
	float3 verticalAxis = cross(horizontalAxis, rendercamview); verticalAxis = normalize(verticalAxis);
	
	

	float3 eye_to_p = normalize(p - cam_pos);
	float2 screen_uv = make_float2(dot(eye_to_p, horizontalAxis), dot(eye_to_p, verticalAxis)) / tan(45.0f * 0.5f * (3.14159265358979323846f / 180.0f));

	return (screen_uv * screen + screen) * 0.5f;
}

__declspec(__device__) __inline float velocity_map(const float velocity) {
	float m = -0.4f;
	float m_2 = m * m;
	float Am = 20.0f;
	float v_of_Am_2 = (velocity / Am)  * (velocity / Am);
	return 1.0f / (m * sqrt(2.0f * 3.14159265358979323846f)) * exp(-v_of_Am_2 / m_2) + 1.0f;
}

__declspec(__device__) __inline float linearize_depth(float d, const float n, const float f) {
	float depthSample = 2.0f * d - 1.0f;
	float zLinear = 2.0f * n * f / (f + n - depthSample * (f - n));
	return zLinear;
}


__declspec(__device__) float3 cool2warm(const float intensity) {
	float3 color;
	if (intensity <= 0.5f) {
		color.x = 0.0f; color.y = intensity * 2.0f; color.z = 1.0f - intensity * 2.0f;
	}
	else {
		color.x = (intensity - 0.5f) * 2.0f; color.y = (1.0f - intensity) * 2.0f; color.z = 0.0f;
	}
	return color;
}

__declspec(__device__) float3 heatmap(const float intensity) {
	return make_float3(cos(intensity * 1.57079632679489661923f - 1.57079632679489661923f), sin(intensity * 3.14159265358979323846f) * 1.5f, cos(intensity * 1.57079632679489661923f));
}



__declspec(__device__) __declspec(__constant__) bool mask_25[4][4] = {
	{ 1, 1, 0, 0 },
	{ 1, 1, 0, 0 },
	{ 1, 1, 1, 1 },
	{ 1, 1, 1, 1 },
};
__declspec(__device__) __declspec(__constant__) bool mask_50[4][4] = {
	{ 1, 1, 0, 0 },
	{ 1, 1, 0, 0 },
	{ 0, 0, 1, 1 },
	{ 0, 0, 1, 1 },
};
__declspec(__device__) __declspec(__constant__) bool mask_75[4][4] = {
	{ 1, 1, 0, 0 },
	{ 1, 1, 0, 0 },
	{ 0, 0, 0, 0 },
	{ 0, 0, 0, 0 },
};

__declspec(__device__) __inline bool masked_sampling(const uint2 launch_index, const float sample_dist, const float sample_coef, float intensity) {
	bool isSample = false;
	float r0 = 0.07f;
	float r1 = r0 * 1.5f;
	float r2 = r0 * 2.0f;

	if (0 <= sample_dist && sample_dist < r0)
		isSample = 1;
	else if (r0 < sample_dist && sample_dist <= r1)
		isSample = mask_25[launch_index.x % 4][launch_index.y % 4];
	else if (r1 < sample_dist && sample_dist <= r2)
		isSample = mask_50[launch_index.x % 4][launch_index.y % 4];
	


	int extra_sample_rate = 8;

	float g0 = 0.01f;
	float g1 = 0.4f;
	float g2 = 0.6f;
	float g3 = 0.8f;
	if (g0 < intensity && intensity < g1)
		isSample = isSample | mask_75[launch_index.x % 4][launch_index.y % 4];
	else if (g1 <= intensity && intensity < g2)
		isSample = isSample | mask_50[launch_index.x % 4][launch_index.y % 4];
	else if (g2 <= intensity)
		isSample = isSample | mask_25[launch_index.x % 4][launch_index.y % 4];
	else if (g3 <= intensity)
		isSample = isSample | 1;
	else 
		isSample = isSample | ((launch_index.x % extra_sample_rate) == 0 && (launch_index.y % extra_sample_rate) == 0);

	







		

	return isSample;
}

__declspec(__device__) __inline void createPinHoleCam(const float3 cam_pos, const float3 cam_target, const float3 cam_up, const float3 gaze_target, const float2 pixel, float3& ray_orig, float3& ray_dir, const float aperture, uint seed0, uint seed1) {
	
	float3 rendercamview = cam_target; rendercamview = normalize(rendercamview);
	float3 rendercamup = cam_up; rendercamup = normalize(rendercamup);
	float3 horizontalAxis = cross(rendercamview, rendercamup); horizontalAxis = normalize(horizontalAxis);
	float3 verticalAxis = cross(horizontalAxis, rendercamview); verticalAxis = normalize(verticalAxis);

	float3 middle = cam_pos + rendercamview;
	float3 horizontal = horizontalAxis * tan(45.0f * 0.5f * (3.14159265358979323846f / 180.0f));
	float3 vertical = verticalAxis * tan(45.0f * -0.5f * (3.14159265358979323846f / 180.0f));

	float3 pointOnPlaneOneUnitAwayFromEye = middle + (horizontal * ((2 * pixel.x) - 1)) + (vertical * ((2 * pixel.y) - 1));
	float3 pointOnImagePlane = cam_pos + ((pointOnPlaneOneUnitAwayFromEye - cam_pos) * length(gaze_target - cam_pos)); 

	float3 aperturePoint = cam_pos;

	
	if (aperture - 0.07f > 0.00001f) {

		float random0 = get_random(seed0, seed1);
		float random1 = get_random(seed1, seed0);

		float angle = 2.0f * 3.14159265358979323846f * random0;
		float distance = aperture;
		float apertureX = cos(angle) * distance;
		float apertureY = sin(angle) * distance;

		aperturePoint = cam_pos + (horizontalAxis * apertureX) + (verticalAxis * apertureY);
	}

	float3 apertureToImagePlane = pointOnImagePlane - aperturePoint;
	apertureToImagePlane = normalize(apertureToImagePlane);

	
	ray_orig = aperturePoint;
	ray_dir = apertureToImagePlane;
}


__declspec(__device__) __inline float4 color_to_accumulated(const float4& accum_color)
{
	float4 color = accum_color;
	if (color.w > 0.0f) {
		color.x /= accum_color.w;
		color.y /= accum_color.w;
		color.z /= accum_color.w;
		color.w = 1.0f;
	}
	return color;
}


__declspec(__device__) float3 uncharted2Tonemap(const float3 x) {
	const float A = 0.15;
	const float B = 0.50;
	const float C = 0.10;
	const float D = 0.20;
	const float E = 0.02;
	const float F = 0.30;
	return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

__declspec(__device__) __inline float3 Uncharted2ToneMapping(const float3 color) {
	const float exposureBias = 2.0f;
	const float oo_gamma = 2.2f;
	float3 result = uncharted2Tonemap(exposureBias * color);
	float3 whiteScale = 1.0f / uncharted2Tonemap(make_float3(11.2f));
	result *= whiteScale;
	result = make_float3(pow(result.x, oo_gamma), pow(result.y, oo_gamma), pow(result.z, oo_gamma));

	return result;
}


__declspec(__device__) uint2 FowardLogPolar(uint2 xy, float2 center, float2 bufferSize) {
	uint2 uv = make_uint2(0.0f);
	float2 xy_prime = make_float2(xy) - center;

	float l1 = length(center);
	float l2 = length(bufferSize - center);
	float l3 = length(make_float2(center.x, bufferSize.y - center.y));
	float l4 = length(make_float2(bufferSize.x - center.x, center.y));
	float L = log(max(max(l1, l2), max(l3, l4)));

	uv.x = int(pow((log(length(xy_prime)) / L), 4.0f) * bufferSize.x);
	uv.y = int((atan2(xy_prime.y, xy_prime.x) + ((2.0f * 3.14159265358979323846f) * (xy_prime.y < 0.0f ? 1.0f : 0.0f))) * (bufferSize.y / (2.0f * 3.14159265358979323846f)));

	return uv;
}

__declspec(__device__) uint2 InverseLogPolar(uint2 uv, float2 center, float2 bufferSize) {
	uint2 xy = make_uint2(-1.0f);

	if (uv.x < 0.0 || uv.x >= bufferSize.x || uv.y < 0.0 || uv.y >= bufferSize.y)
		return xy;

	float l1 = length(center);
	float l2 = length(bufferSize - center);
	float l3 = length(make_float2(center.x, bufferSize.y - center.y));
	float l4 = length(make_float2(bufferSize.x - center.x, center.y));
	float L = log(max(max(l1, l2), max(l3, l4)));

	float A = L;
	float B = (2.0f * 3.14159265358979323846f) / (bufferSize.y);

	float K = pow(uv.x / (bufferSize.x), 1.0f / 4.0f);
	xy.x = int(exp(L * K) * cos(B*uv.y) + center.x);
	xy.y = int(exp(L * K) * sin(B*uv.y) + center.y);

	return xy;
}
#line 37 "D:/Data/Projects/2018/Foveated Rendering/Foveated Rendering using Ray Tracing/Foveated Rendering using Ray Tracing/cuda/fov_path_trace_camera.cu"

using namespace optix;

namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo eye = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float3)}; } namespace rti_internal_typename { __declspec(__device__) char eye[] = "float3"; } namespace rti_internal_typeenum { __declspec(__device__) int eye = ::rti_internal_typeinfo::rti_typeenum<float3>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char eye[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char eye[] = ""; } __declspec(__device__) float3 eye;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo mvp = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(Matrix4x4)}; } namespace rti_internal_typename { __declspec(__device__) char mvp[] = "Matrix4x4"; } namespace rti_internal_typeenum { __declspec(__device__) int mvp = ::rti_internal_typeinfo::rti_typeenum<Matrix4x4>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char mvp[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char mvp[] = ""; } __declspec(__device__) Matrix4x4 mvp;

namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo bad_color = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float4)}; } namespace rti_internal_typename { __declspec(__device__) char bad_color[] = "float4"; } namespace rti_internal_typeenum { __declspec(__device__) int bad_color = ::rti_internal_typeinfo::rti_typeenum<float4>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char bad_color[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char bad_color[] = ""; } __declspec(__device__) float4 bad_color;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo scene_epsilon = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float)}; } namespace rti_internal_typename { __declspec(__device__) char scene_epsilon[] = "float"; } namespace rti_internal_typeenum { __declspec(__device__) int scene_epsilon = ::rti_internal_typeinfo::rti_typeenum<float>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char scene_epsilon[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char scene_epsilon[] = ""; } __declspec(__device__) float scene_epsilon;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo cutoff_color = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float3)}; } namespace rti_internal_typename { __declspec(__device__) char cutoff_color[] = "float3"; } namespace rti_internal_typeenum { __declspec(__device__) int cutoff_color = ::rti_internal_typeinfo::rti_typeenum<float3>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char cutoff_color[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char cutoff_color[] = ""; } __declspec(__device__) float3 cutoff_color;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo max_depth = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(int)}; } namespace rti_internal_typename { __declspec(__device__) char max_depth[] = "int"; } namespace rti_internal_typeenum { __declspec(__device__) int max_depth = ::rti_internal_typeinfo::rti_typeenum<int>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char max_depth[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char max_depth[] = ""; } __declspec(__device__) int max_depth;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo gaze = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float2)}; } namespace rti_internal_typename { __declspec(__device__) char gaze[] = "float2"; } namespace rti_internal_typeenum { __declspec(__device__) int gaze = ::rti_internal_typeinfo::rti_typeenum<float2>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char gaze[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char gaze[] = ""; } __declspec(__device__) float2 gaze;

__declspec(__device__) optix::buffer<float4, 2>              shading_buffer;

__declspec(__device__) optix::buffer<float4, 2>              history_buffer;
__declspec(__device__) optix::buffer<float4, 2>              history_cache;
__declspec(__device__) optix::buffer<float4, 2>              weight_buffer;
__declspec(__device__) optix::buffer<float4, 2>              depth_buffer;

__declspec(__device__) optix::buffer<uint3, 2>				 thread_buffer;
__declspec(__device__) optix::buffer<uint3, 2>				 thread_cache;

__declspec(__device__) optix::buffer<float4, 2>              extra_buffer;

namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo top_object = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(rtObject)}; } namespace rti_internal_typename { __declspec(__device__) char top_object[] = "rtObject"; } namespace rti_internal_typeenum { __declspec(__device__) int top_object = ::rti_internal_typeinfo::rti_typeenum<rtObject>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char top_object[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char top_object[] = ""; } __declspec(__device__) rtObject top_object;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo frame = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(unsigned int)}; } namespace rti_internal_typename { __declspec(__device__) char frame[] = "unsigned int"; } namespace rti_internal_typeenum { __declspec(__device__) int frame = ::rti_internal_typeinfo::rti_typeenum<unsigned int>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char frame[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char frame[] = ""; } __declspec(__device__) unsigned int frame;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo launch_index = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(uint2)}; } namespace rti_internal_typename { __declspec(__device__) char launch_index[] = "uint2"; } namespace rti_internal_typeenum { __declspec(__device__) int launch_index = ::rti_internal_typeinfo::rti_typeenum<uint2>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char launch_index[] = "rtLaunchIndex"; } namespace rti_internal_annotation { __declspec(__device__) char launch_index[] = ""; } __declspec(__device__) uint2 launch_index;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo launch_dim = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(uint2)}; } namespace rti_internal_typename { __declspec(__device__) char launch_dim[] = "uint2"; } namespace rti_internal_typeenum { __declspec(__device__) int launch_dim = ::rti_internal_typeinfo::rti_typeenum<uint2>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char launch_dim[] = "rtLaunchDim"; } namespace rti_internal_annotation { __declspec(__device__) char launch_dim[] = ""; } __declspec(__device__) uint2 launch_dim;

__declspec(__device__) optix::buffer<float3, 1> gaze_target;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo up = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float3)}; } namespace rti_internal_typename { __declspec(__device__) char up[] = "float3"; } namespace rti_internal_typeenum { __declspec(__device__) int up = ::rti_internal_typeinfo::rti_typeenum<float3>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char up[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char up[] = ""; } __declspec(__device__) float3 up;               
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo cam_target = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float3)}; } namespace rti_internal_typename { __declspec(__device__) char cam_target[] = "float3"; } namespace rti_internal_typeenum { __declspec(__device__) int cam_target = ::rti_internal_typeinfo::rti_typeenum<float3>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char cam_target[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char cam_target[] = ""; } __declspec(__device__) float3 cam_target;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo g_apertureSize = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(float)}; } namespace rti_internal_typename { __declspec(__device__) char g_apertureSize[] = "float"; } namespace rti_internal_typeenum { __declspec(__device__) int g_apertureSize = ::rti_internal_typeinfo::rti_typeenum<float>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char g_apertureSize[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char g_apertureSize[] = ""; } __declspec(__device__) float g_apertureSize;
namespace rti_internal_typeinfo { __declspec(__device__) ::rti_internal_typeinfo::rti_typeinfo diffuse_max_depth = { ::rti_internal_typeinfo::_OPTIX_VARIABLE, sizeof(int)}; } namespace rti_internal_typename { __declspec(__device__) char diffuse_max_depth[] = "int"; } namespace rti_internal_typeenum { __declspec(__device__) int diffuse_max_depth = ::rti_internal_typeinfo::rti_typeenum<int>::m_typeenum; } namespace rti_internal_semantic { __declspec(__device__) char diffuse_max_depth[] = ""; } namespace rti_internal_annotation { __declspec(__device__) char diffuse_max_depth[] = ""; } __declspec(__device__) int diffuse_max_depth;

__declspec(__global__) void ray_trace()
{
	size_t2 screen = shading_buffer.size();
	float2 screenf = make_float2(screen);

	uint3 thread_work = thread_buffer[launch_index];
	uint2 thread_uv = make_uint2(thread_work);

	float3 result = make_float3(0.0f);
	float4 c_history = make_float4(0.0f);

	float4 c_weight = weight_buffer[thread_uv];
	uint2 query_uv = make_uint2(round(c_weight.x), round(c_weight.y));

	if (c_weight.z > 0.0f) {
		
		
		c_history = history_cache[query_uv];

		

	}

	bool usingRay = thread_work.z;

	
	
	
	

	if (!usingRay) {
		history_buffer[thread_uv] = c_history;

		shading_buffer[thread_uv] = color_to_accumulated(c_history);

		return;
	}

	
	
	
	float3 normal = make_float3(0, 0, 0);
	float3 origin = make_float3(0, 0, 0);
	int depth = 0;

	int sqrt_num_samples = 1;
	float2 jitter_scale = 1.0f / screenf / sqrt_num_samples;
	unsigned int samples_per_pixel = sqrt_num_samples*sqrt_num_samples;

	do
	{
		uint seed = tea<16>(screen.x*thread_uv.y + thread_uv.x, c_history.w > 0 ? frame : 0);

		float2 pixel = make_float2(thread_uv) / screenf * 2.0f - 1.0f;
		uint x = samples_per_pixel % sqrt_num_samples;
		uint y = samples_per_pixel / sqrt_num_samples;
		float2 jitter = make_float2(x - rnd(seed), y - rnd(seed));
		float2 d = pixel + jitter*jitter_scale;

		float4 tmp = make_float4(d, -1.0f, 1.0f);
		tmp = mvp * tmp;
		float3 nearPos = make_float3(tmp) / tmp.w;

		float3 ray_origin = eye;
		float3 ray_direction = normalize(nearPos - eye);


		





		
		PerRayData_radiance prd;
		prd.result = make_float3(0.0f);
		prd.depth = 0;
		prd.seed = seed;
		prd.done = false;
		prd.importance = 1.0f;

		prd.reflectance = make_float3(1.0f);
		

		
		optix::Ray ray(ray_origin, ray_direction,  1, scene_epsilon);
		rtTrace(top_object, ray, prd);
		result += prd.result;
		seed = prd.seed;

		depth = prd.depth;

	} while (--samples_per_pixel);
	result /= float(sqrt_num_samples*sqrt_num_samples);

	{
		
		result = Uncharted2ToneMapping(result);

		float4 final_result = make_float4(result, 1.0f) + c_history;
		history_buffer[thread_uv] = final_result;

		shading_buffer[thread_uv] = color_to_accumulated(final_result);
	}
}

__declspec(__global__) void exception()
{
	const unsigned int code = rtGetExceptionCode();
	rtPrintf("Caught exception 0x%X at launch index (%d,%d)\n", code, launch_index.x, launch_index.y);
	
}

